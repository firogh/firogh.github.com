# References
[How programs get run](https://lwn.net/Articles/630727/)
[How programs get run: ELF binaries](https://lwn.net/Articles/631631/)

# Binary format and interpreter
[Kernel Support for miscellaneous (your favourite) Binary Formats](https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html)

# Stack
Temporary stack: __bprm_mm_init
Finialized stack: setup_arg_pages

# Postions for loaders and binaries 
commit eab09532d40090698b05a07c1c87f39fdbc5fab5
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Jul 10 15:52:37 2017 -0700
    binfmt_elf: use ELF_ET_DYN_BASE only for PIE			# and MAP_FIXED
    The ELF_ET_DYN_BASE position was originally intended to keep loaders
    away from ET_EXEC binaries.  (For example, running "/lib/ld-linux.so.2
    /bin/cat" might cause the subsequent load of /bin/cat into where the
    loader had been loaded.)
    With the advent of PIE (ET_DYN binaries with an INTERP Program Header),
    ELF_ET_DYN_BASE continued to be used since the kernel was only looking
    at ET_DYN.  However, since ELF_ET_DYN_BASE is traditionally set at the
    top 1/3rd of the TASK_SIZE, a substantial portion of the address space
    is unused.
[...]
-/* This is the location that an ET_DYN program is loaded if exec'ed.  Typical
-   use of this is to invoke "./ld.so someprog" to test out a new version of
-   the loader.  We need to make sure that it is out of the way of the program
-   that it will "exec", and that there is sufficient room for the brk.  */
-
-#define ELF_ET_DYN_BASE                (TASK_SIZE / 3 * 2)
+/*
+ * This is the base location for PIE (ET_DYN with INTERP) loads. On
+ * 64-bit, this is raised to 4GB to leave the entire 32-bit address
+ * space open for things that want to use the area for 32-bit pointers.
+ */
+#define ELF_ET_DYN_BASE                (mmap_is_ia32() ? 0x000400000UL : \
+                                                 0x100000000UL)
commit 4ed28639519c7bad5f518e70b3284c6e0763e650
Author: Michal Hocko <mhocko@suse.com>
Date:   Tue Apr 10 16:36:01 2018 -0700
    fs, elf: drop MAP_FIXED usage from elf_map



DYN BASE
ssc 'echo 0 > /proc/sys/kernel/randomize_va_space'
firo@linux-6qg8:~/ws> cat /proc/self/maps | head
555555554000-55555555c000 r-xp 00000000 00:2d 31819                      /usr/bin/cat
/*
 * This is the base location for PIE (ET_DYN with INTERP) loads. On
 * 64-bit, this is above 4GB to leave the entire 32-bit address
 * space open for things that want to use the area for 32-bit pointers.
 */
#define ELF_ET_DYN_BASE         (mmap_is_ia32() ? 0x000400000UL : \
                                                  (DEFAULT_MAP_WINDOW / 3 * 2))
# Map every PT_LOAD
elf_map
[elf_map: why offset of vma need to subtract eppnt->p_vaddr ?](https://lists.kernelnewbies.org/pipermail/kernelnewbies/2013-March/007851.html)
It's because 
1. mmap maps file in page unit and 
2. the target vaddr (1st argument of mmap)  will be Maksed by PAGE_MASK.
3. PAGE_MASK & p_vaddr and PAGE_MASK & p_offset always are equal

# AUX vector
create_elf_tables

# Execve: text,bss,data
do_execveat_common and elf_mmap
cat /proc/self/maps and man 5 proc
read: file rmap, file backed.
write: anon ramp, swapbacked. check wp_page_copy and page_add_new_anon_rmap
