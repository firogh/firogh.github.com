# Formal causes
[book_linuxkernel_blockdrv](https://github.com/gurugio/book_linuxkernel_blockdrv)
[Linux Block Device Architecture](https://yannik520.github.io/blkdevarch.html)
[Notes on the Generic Block Layer Rewrite in Linux 2.5](https://www.kernel.org/doc/Documentation/block/biodoc.txt)
[Improvements in the block layer](https://lwn.net/Articles/735275/)

# bdev
bi_dev is initialized from supber_block
btrfs: 
in btrfs_mount -> sget and btrfs_set_super
__extent_writepage
__extent_writepage_io 
em = epd->get_extent = btrfs_get_extent -> em->bdev = root->fs_info->fs_devices->latest_bdev;
bdev = em->bdev;
submit_extent_page
bdev_get_queue(bio->bi_bdev)
## bdevfs
def_blk_fops
blkdev_open
inode major minor

# gendisk and hd_struct and disk_part_tbl
[Driver porting: the gendisk interface](https://lwn.net/Articles/25711/)
bdev_get_queue(bio->bi_bdev)
[Partition and gendisk](https://groups.google.com/forum/#!msg/zh-kernel/sg6BvXTJSUk/-fnTfL9_VXYJ)
and
commit 540eed5637b766bb1e881ef744c42617760b4815
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Aug 25 19:56:15 2008 +0900
    block: make partition array dynamic
## disk init
init_sd

# Plug
[Explicit block device plugging and comments](https://lwn.net/Articles/438256/)
[block: initial patch for on-stack per-task plugging](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=73c101011926c58)
Reduce the lock contection of request_queue lock. 
 * blk_plug permits building a queue of related requests by holding the I/O
 * fragments for a short period. This allows merging of sequential requests
 * into single larger request. As the requests are moved from a per-task list to
 * the device's request_queue in a batch, this results in improved scalability
 * as the lock contention for request_queue lock is reduced.
## Unplug
1. synchronized method
__blk_run_queue
2. asynchronized way
kblockd_workqueue
kworker/%u:%d%s (cpu, id, priority)
[workqueue: drop 'H' from kworker names of unbound worker pools](https://lkml.org/lkml/2013/3/19/661)
ps aux | grep kblockd
root         6  0.0  0.0      0     0 ?        I<   08:15   0:00 [kworker/0:0H-kblockd]
root       435  0.0  0.0      0     0 ?        I<   08:15   0:00 [kworker/0:1H-kblockd]
root        46  0.0  0.0      0     0 ?        I<   08:15   0:00 [kblockd]
1. blk_finish_plug
2. blk_schedule_flush_list
3. in pluged state: more then BLK_MAX_REQUEST_COUNT
3.1 ??deadlock avoidance: if memory is low and waiting for IO complete and reclaiming pages.??
3.2 Short period queuing each bio just for baching. If Sleep, when flush the queued bio?
3.3 schedule->sched_submit_work
## all result in blk_flush_plug_list
if schedule:  workqueue
else synchronize ?? which function?

# Block cgroup
## request_list
commit a051661ca6d134c18599498b185b667859d4339b
Refs: v3.5-rc1-40-ga051661ca6d1
Author:     Tejun Heo <tj@kernel.org>
AuthorDate: Tue Jun 26 15:05:44 2012 -0700
Commit:     Jens Axboe <axboe@kernel.dk>
CommitDate: Tue Jun 26 18:42:49 2012 -0400
    blkcg: implement per-blkg request allocation

# SCSI
[SCSI Interfaces Guide](https://www.kernel.org/doc/htmldocs/scsi/)
Documentation/scsi/
[SCSI Mid-Level Multipath](https://www.landley.net/kdocs/ols/2003/ols2003-pages-23-33.pdf)
## TCQ
https://www.oreilly.com/library/view/linux-device-drivers/0596005903/ch16.html
## Ob
https://en.opensuse.org/SDB:SCSI_debugging_hints
scsi_logging_level -s -a 7
/proc/sys/dev/scsi/logging_level
sg3_utils

# NVMe
nvme_alloc_ns: nvme_make_request => blk_mq_make_request
commit a4aea5623d4a54682b6ff5c18196d7802f3e478f
Author: Matias Bj√∏rling <m@bjorling.me>
Date:   Tue Nov 4 08:20:14 2014 -0700
    NVMe: Convert to blk-mq
    This converts the NVMe driver to a blk-mq request-based driver.
Also see nvme_end_request().
nvme_submit_cmd
nvme_complete_rq
## Doorbell
