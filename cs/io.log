# IO
[Linux kernel IO subsystem - by Jan Kara](https://www.youtube.com/watch?v=2tu__ZHC0mI)
https://www.postgresql.eu/events/fosdem2019/sessions/session/2346/slides/159/fosdem_linux_io.pdf
## Memory hierarchy
[Latency Numbers Every Programmer Should Know](http://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html)
## Asynchronous I/O
[Non-blocking buffered file read operations](https://lwn.net/Articles/612483/)
## Memory-mapped file I/O
Check LSP chapter 4: Mapping Files into Memory
## I/O hardware
serial communication: UART(16550) + RS-232 
parallel communication: SCSI, ISA, ATA, PCI, FSB 

# Observability 
[Linux Block I/O Tracing](https://www.linux.com/topic/networking/linux-block-io-tracing/)
io wait: in_iowait
commit 8f0dfc34e9b323a028c2ec41abb7e9de477b7a94
Refs: v2.6.31-rc8-33-g8f0dfc34e9b3
Author:     Arjan van de Ven <arjan@linux.intel.com>
AuthorDate: Mon Jul 20 11:26:58 2009 -0700
    sched: Provide iowait counters
crash> dev -d | head
MAJOR GENDISK            NAME       REQUEST_QUEUE      TOTAL ASYNC  SYNC   DRV 
request_queue.nr_rqs includes request_queue.in_flight
## requests queued in request queue
request_queue.rq or root_rl
request_queue.nr_rqs: removed in latest kernel.
get_request and blk_finish_request
for mq: blk_mq_ctx.rq_dispatched and blk_mq_ctx.rq_completed
rq counts including following in_flight counts.
## request_queue.in_flight: requests sent to drv
blk_dequeue_request & RQF_STARTED both in blk_peek_request
q->in_flight[rq_is_sync(rq)]++;
__blk_put_request => elv_completed_request and elv_requeue_request
q->in_flight[rq_is_sync(rq)]--
## Timeline
### RQF_STARTED
https://bugzilla.suse.com/show_bug.cgi?id=930934
The warnings from blk_complete_request() about request not having REQ_STARTED which are before the BUG_ON triggering are actually reporting that someone is queueing completion of a request that hasn't been run. So they are warning about problems that are coming.

## bio
[A block layer introduction part 1: the bio layer](https://lwn.net/Articles/736534/)
[Lwn: Driver porting: the BIO structure](https://lwn.net/Articles/26404/)
[Jens Axobe's papper: Linux Block IO-present and future](https://www.landley.net/kdocs/ols/2004/ols2004v1-pages-51-62.pdf)
[Jens Axobe: Notes on the Generic Block Layer Rewrite in Linux 2.5](https://www.kernel.org/doc/Documentation/block/biodoc.txt)
[Notes on 2.5 block i/o layer changes](http://lse.sourceforge.net/io/bionotes.txt)
Documentation/block/biovecs.txt
block: Abstract out bvec iterator - 4f024f3797c43cb4b73cd2c50cec728842d0e49e
### bi_sector
tglx: commit e1e2cfc3fb42dbe54dd94fe97ba17a62cd7a265b
Author: Linus Torvalds <torvalds@athlon.transmeta.com>
Date:   Mon Feb 4 23:58:06 2002 -0800
    v2.5.0.1 -> v2.5.0.2
    - Jens Axboe: start of new block IO layer
### submit_bio
submit_bio -> generic_make_request -> generic_make_request_checks -> blk_partition_remap
make_request_fn: blk_queue_bio
Case 1. Try Merge
1.1 Plug merge
1.2 Elevator merge; CFS, deadline, noop
Case 2. Plug
2.1 full? blk_flush_plug_list
2.2 list_add_tail
Recursion avoidance
### merge bio
all bios in same request is contiguous.
__make_request elv_merge
/sys/block/sda/queue/max_sectors_kb 1280??
Front merge, Back merge, Coalesce merge

## Request
[Block layer introduction part 2: the request layer](https://lwn.net/Articles/738449/)
[Driver porting: Request Queues I](https://lwn.net/Articles/27055/)
[Driver porting: Request Queues II](https://lwn.net/Articles/27361/)
request_queue, blk_init_queue, queue_head: linked list of request
/sys/block/sda/queue/nr_requests
make_request_fn: transform bio to request.
generic_make_request
convert sector from partition to gendisk

## REQ Barrier
tglx:   commit 719eb3e1860791195ed7656b800d8bb57b277a75
Author:     Jens Axboe <axboe@suse.de>
AuthorDate: Thu Nov 7 21:50:01 2002 -0800
    [PATCH] soft and hard barriers
    Right now we have one type of barrier in the block layer, and that is
    used mainly for making sure that the io scheduler doesn't reorder
    requests when we don't want it to.  We also need a flag to tell the io
    scheduler and low level queue that this is a barrier.  So basically two needs:
    o software barrier, prevents the io scheduler from reordering
    o hardware barrier, driver must prevent drive from reordering
    So this patch gets rid of REQ_BARRIER and instead adds REQ_SOFTBARRIER
    and REQ_HARDBARRIER.

# Blk flush
generic_file_fsync blkdev_issue_flush
kblockd_workqueue -> blk_delay_work

# Plug
[Explicit block device plugging and comments](https://lwn.net/Articles/438256/)
[A block layer introduction part 1: the bio layer: plug](https://lwn.net/Articles/736534/)
[block: initial patch for on-stack per-task plugging](git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=73c101011926c58)
Reduce the lock contection of request_queue lock. 
 * blk_plug permits building a queue of related requests by holding the I/O 
 * fragments for a short period. This allows merging of sequential requests
 * into single larger request. As the requests are moved from a per-task list to
 * the device's request_queue in a batch, this results in improved scalability
 * as the lock contention for request_queue lock is reduced.
## Unplug
1. synchronized method
__blk_run_queue
2. asynchronized way 
kblockd_workqueue
kworker/%u:%d%s (cpu, id, priority)
[workqueue: drop 'H' from kworker names of unbound worker pools](https://lkml.org/lkml/2013/3/19/661)
ps aux | grep kblockd
root         6  0.0  0.0      0     0 ?        I<   08:15   0:00 [kworker/0:0H-kblockd]
root       435  0.0  0.0      0     0 ?        I<   08:15   0:00 [kworker/0:1H-kblockd]
root        46  0.0  0.0      0     0 ?        I<   08:15   0:00 [kblockd]
1. blk_finish_plug
2. blk_schedule_flush_list
3. in pluged state: more then BLK_MAX_REQUEST_COUNT
3.1 ??deadlock avoidance: if memory is low and waiting for IO complete and reclaiming pages.??
3.2 Short period queuing each bio just for baching. If Sleep, when flush the queued bio?
3.3 schedule->sched_submit_work
## all result in blk_flush_plug_list
if schedule:  workqueue
else synchronize ?? which function?


# Queue
## Blk-mq
[The multiqueue block layer](https://lwn.net/Articles/552904/)
[Kernel Recipes 2015 - Solving the Linux storage scalability bottlenecks - by Jens Axboe](https://www.youtube.com/watch?v=VIdKBD9-Ozg&t=110s)
[Linux Block IO: Introducing Multi-queue SSD Access on Multi-core Systems](https://kernel.dk/systor13-final18.pdf)
commit 320ae51feed5c2f13664aa05a76bec198967e04d
Refs: v3.12-rc5-9-g320ae51feed5
Author:     Jens Axboe <axboe@kernel.dk>
AuthorDate: Thu Oct 24 09:20:05 2013 +0100
    blk-mq: new multi-queue block IO queueing mechanism
## IO scheduler
elv_iosched_show, elv_register
/sys/block/sda/queue/scheduler
## Dispatch 
__blk_run_queue -> request_fn scsi_request_fn
request_fn: interfece between block layer and device for read or write
q->mq_ops->queue_rq, scsi_queue_rq

# Completion, end io callback
__bread_slow: b_end_io = end_buffer_read_sync
__bread_slow->submit_bh -> submit_bh_wbc: bio->bi_end_io = end_bio_bh_io_sync
end_buffer_async_write

scsi_end_request
blk_finish_request
__blk_mq_end_request

scsi_end_request+0x116/0x1e0
scsi_io_completion+0x168/0x6a0
scsi_finish_command+0xdc/0x140
scsi_softirq_done+0x132/0x160
blk_done_softirq+0x96/0xc0

1551 -1875536096) end_bio_bh_io_sync
 977 -1874807536) ext4_end_bio
 136 -1874805104) mpage_end_io
  66 -1874069824) submit_bio_wait_endio

 => submit_bio_wait
 => blkdev_issue_flush
 => ext4_sync_file
 => do_fsync
 => __x64_sys_fdatasync
 => do_syscall_64
