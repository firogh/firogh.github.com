# Converted from page_fault.log
---
tags: [ kernel ] 
layout: post
date: 2017-04-06
title: Anonymous memory and COW and file-backed memory
category: cs
---

# Reference 
man top and [Memory â€“ Part 1: Memory Types](https://techtalk.intersec.com/2013/07/memory-part-1-memory-types/)
[Sharing Page Tables in the Linux Kernel](https://www.kernel.org/doc/ols/2003/ols2003-pages-315-320.pdf)
Anonymous Memory Mappings, LSP chapter 9

# Stack
premise: grows down: address > 65536 + 32 * sizeof(unsigned long) + rsp
expand_stack(): expand vma of stack; + good area workflow.

# Private anonymous memory
Read -> zeropage->write-> WP 
Write -> Normal page with RW
## zeroed user page
tglx: commit 382a7dec462a90ad6ae01227f1e8758ae721f6ed
Author: Christoph Lameter <clameter@sgi.com>
Date:   Tue Feb 1 16:34:17 2005 -0800
    [PATCH] alloc_zeroed_user_highpage() to fix the clear_user_highpage issue

# Private file-backed memory
## Execute
Program and library
read: no pte-> create RO pte, pte prot is PAGE_COPY check protection_map. map_region: vma->vm_page_prot = vm_get_page_prot(vm_flags);
write: a) no pte -> COW; b) RO pte -> WP

# COW
read & write, write and fork; no pte vs RO pte.
## do_cow_page
1. get page and cow:  __do_fault-> vma->vm_ops->fault = filemap_fault -> page cache ? page_cache_read add to lru
2. add page to anon lru list: finish_fault->alloc_set_pte-> page_add_new_anon_rmap -> __SetPageSwapBacked

# Shared anonymous or file-backed memory
Read and write, do_shared_page
## page_mkwrite
commit 9637a5efd4fbe36164c5ce7f6a0ee68b2bf22b7f
Refs: v2.6.17-1704-g9637a5efd4fb
Author:     David Howells <dhowells@redhat.com>
AuthorDate: Fri Jun 23 02:03:43 2006 -0700
Commit:     Linus Torvalds <torvalds@g5.osdl.org>
CommitDate: Fri Jun 23 07:42:51 2006 -0700
    [PATCH] add page_mkwrite() vm_operations method
[Add notification of page becoming writable to VMA ops](https://lwn.net/Articles/162178/)

# PTEs for mappings
tglx: commit 0457d99a336be658cea1a5bdb689de5adb3b382d
Author: Andi Kleen <ak@muc.de>
Date:   Tue Feb 12 20:17:35 2002 -0800
    [PATCH] x86_64 merge: arch + asm
    This adds the x86_64 arch and asm directories and a Documentation/x86_64.
+ * The i386 can't do page protection for execute, and considers that
+ * the same are read. Also, write permissions imply read permissions.
+ * This is the closest we can get..
+#define __P010 PAGE_COPY
