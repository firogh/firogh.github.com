<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Cs on Firo Notes </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://firoyang.org/cs/</link>
    <language>en-us</language>
    <author>Firo Yang</author>
    
    <updated>Tue, 05 Jan 2016 00:00:00 UTC</updated>
    
    <item>
      <title>奔腾年代</title>
      <link>http://firoyang.org/cs/golden_age_of_cs/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 UTC</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/golden_age_of_cs/</guid>
      <description>&lt;p&gt;计算机的奔腾年代&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>System booting</title>
      <link>http://firoyang.org/cs/boot/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 UTC</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/boot/</guid>
      <description>

&lt;h1 id=&#34;reference:4ccc61562af88da39fe562fcf76d50be&#34;&gt;Reference&lt;/h1&gt;

&lt;h1 id=&#34;contents:4ccc61562af88da39fe562fcf76d50be&#34;&gt;Contents&lt;/h1&gt;

&lt;p&gt;What basic initializations should be perfomed when power on?&lt;br /&gt;
How do we load the kernel to memory?&lt;br /&gt;
What does kernel do when kernel boot.&lt;br /&gt;
MBR vs BIOS?&lt;br /&gt;
PC vs embedded&lt;br /&gt;
Kernel init&lt;br /&gt;
before start_kernel&lt;br /&gt;
start_kernel&lt;br /&gt;
reset_init &amp;amp; kernel_init&lt;/p&gt;

&lt;h1 id=&#34;p4080-board:4ccc61562af88da39fe562fcf76d50be&#34;&gt;p4080 Board&lt;/h1&gt;

&lt;p&gt;PBL&lt;br /&gt;
1. initialize I2C, SPI, eLBC, eSDHC.&lt;br /&gt;
2. Load RCW and boot init commands from above.&lt;br /&gt;
3. write date to conf register and memory&lt;/p&gt;

&lt;h1 id=&#34;config:4ccc61562af88da39fe562fcf76d50be&#34;&gt;config&lt;/h1&gt;

&lt;p&gt;CCSRBAR -&amp;gt; CCSR&lt;br /&gt;
default is 0x0_FE00_0000&lt;br /&gt;
CCSRBAR is in CCSR memory. odd. stored in 0(CCSRBAR).&lt;br /&gt;
CCSRBAR always points to itself.&lt;br /&gt;
holdoff&lt;/p&gt;

&lt;h1 id=&#34;u-boot:4ccc61562af88da39fe562fcf76d50be&#34;&gt;u-boot&lt;/h1&gt;

&lt;p&gt;ft_fixup_cpu -&amp;gt; determine_mp_bootpg(NULL) &amp;amp; fdt_add_mem_rsv&lt;/p&gt;

&lt;p&gt;main_loop-&amp;gt; &amp;hellip;-&amp;gt;./common/bootm_os.c:410:&amp;hellip; do_bootm_states-&amp;gt;&lt;br /&gt;
{&lt;br /&gt;
bootm_find_other-&amp;gt;bootm_find_ramdisk_fdt-&amp;gt;bootm_find_fdt-&amp;gt;boot_get_fdt&amp;amp;set_working_fdt_addr(0x0200000)-&amp;gt;IMAGE_FORMAT_FIT-&amp;gt;&lt;br /&gt;
&amp;amp;&lt;br /&gt;
boot_fn = bootm_os_get_boot_func(images-&amp;gt;os.os)=[IH_OS_LINUX] =&lt;br /&gt;
&amp;amp;&lt;br /&gt;
boot_selected_os-&amp;gt;boot_fn=do_bootm_linux-&amp;gt;boot_body_linux-&amp;gt;image_setup_linux-&amp;gt;image_setup_libfdt-&amp;gt;&lt;br /&gt;
board/freescale/corenet_ds/corenet_ds.c ft_board_setup-&amp;gt; ft_cpu_setup-&amp;gt;&lt;br /&gt;
}&lt;/p&gt;

&lt;h1 id=&#34;ppc-multicore-booting:4ccc61562af88da39fe562fcf76d50be&#34;&gt;PPC multicore booting&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;There are two possibilites to make secondary cores booting failed.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;There is a bug in the code executed by Secondary cores&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;The spin table address, passed to croe0, is not correct, so we did not really kick the secondary cores.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CCSRBAR&lt;br /&gt;
MPC86xx_MCM_OFFSET&lt;br /&gt;
srio_boot_master_release_slave&lt;/p&gt;

&lt;p&gt;uboot-&amp;gt;&lt;br /&gt;
set the cpu-release-addr at funciton ft_fixup_cpu(), I am not sure.&lt;/p&gt;

&lt;p&gt;core0 run, 2nd cores holdoff&lt;br /&gt;
core0 set BPTR and kick(BRR) 2nd cores, 2nd cores spintable loop in uboot function setup_mp&lt;br /&gt;
core0 -&amp;gt; arch/powerpc/cpu/mpc85xx/start.S-&amp;gt;_start_e500&lt;br /&gt;
board_init_r-&amp;gt;cpu_init_r-&amp;gt; setup_mp-&amp;gt; {&lt;br /&gt;
&lt;strong&gt;bootpg_addr = (u32)virt_to_phys(&amp;amp;&lt;/strong&gt;second_half_boot_page); //Assembly code for put core to spin tablea. Used by __secondary_start_page&lt;br /&gt;
__spin_table_addr = (u32)get_spin_phys_addr();// used by __second_half_boot_page&lt;br /&gt;
bootpg = BPTR = __secondary_start_page&lt;br /&gt;
plat_mp_up-&amp;gt;kick BRR &amp;amp; Boot Space Translation&lt;br /&gt;
}&lt;br /&gt;
2nd cores holdoff -&amp;gt; &lt;strong&gt;secondary_start_page&lt;br /&gt;
kernel-&amp;gt;&lt;br /&gt;
core0 boot kernel, core0 kickoff 2nd cores spintable, triger 2nd core&amp;rsquo;s spin table by writing  the spin table field with the desired address&lt;br /&gt;
2nd cores ePAPR-&amp;gt;spintable-&amp;gt;addr_l=&lt;/strong&gt;early_start-&amp;gt;__secondary_start-&amp;gt;smp_ops-&amp;gt;setup_cpu-&amp;gt;cpu_idle&lt;br /&gt;
arch/powerpc/kernel/head_fsl_booke.S&lt;br /&gt;
U-boot logs:&lt;br /&gt;
Reserving MP boot page to 7ffff000^M^M - &amp;ndash;   -   MP spin table&lt;br /&gt;
address.&lt;br /&gt;
SPAG : fdt_fixup_fman_firmware, 567^M^M&lt;br /&gt;
^M^M&lt;br /&gt;
..r.^M^M&lt;br /&gt;
VDBG : ft_cpu_setup, 737, comment fdt_fixup_memory ^M^M&lt;br /&gt;
VDBG: Secondary cores are not held in reset.^M^M&lt;br /&gt;
Kernel Logs:&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 1 to ack^M^M&lt;br /&gt;
smp: failed starting cpu 1 (rc -2)^M^M&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 2 to ack^M^M&lt;br /&gt;
smp: failed starting cpu 2 (rc -2)^M^M&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 3 to ack^M^M&lt;br /&gt;
smp: failed starting cpu 3 (rc -2)^M^M&lt;br /&gt;
Brought up 1 CPUs^M^M&lt;br /&gt;
devtmpfs: initialized^M^M&lt;/p&gt;

&lt;p&gt;Note that u-boot can&amp;rsquo;t detect  memory above 2G and we need to check&lt;br /&gt;
if kernel is accessing at high mem of 2G or 4G.&lt;/p&gt;

&lt;p&gt;Here are the logs..&lt;/p&gt;

&lt;p&gt;I printed pa in %lx since the outout of &lt;strong&gt;pa(&lt;/strong&gt;early_start) is in long unsigned int.&lt;/p&gt;

&lt;p&gt;Firo:cpu nr1 release addr c3fe352c, spin_table c000003f, ioremmappable 0&lt;br /&gt;
Firo: kernel origin spin tbale addr_l a63b2000, pir 57cc802, resv 480000, r3 3ae000, pa 50&lt;br /&gt;
Firo: kernel update spin tbale addr_l 50, pir 1, resv 480000, r3 3ae000&lt;br /&gt;
Firo: kernel timeout spin tbale addr_l 50, pir 1, resv 480000, r3 3ae000&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 1 to ack&lt;br /&gt;
smp: failed starting cpu 1 (rc -2)&lt;br /&gt;
Firo:cpu nr2 release addr c3fe3740, spin_table c000007f, ioremmappable 0&lt;br /&gt;
Firo: kernel origin spin tbale addr_l a654e7af, pir a654e780, resv 387cf99a, r3 3408200, pa 50&lt;br /&gt;
Firo: kernel update spin tbale addr_l 50, pir 2, resv 387cf99a, r3 3408200&lt;br /&gt;
Firo: kernel timeout spin tbale addr_l 50, pir 2, resv 387cf99a, r3 3408200&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 2 to ack&lt;br /&gt;
smp: failed starting cpu 2 (rc -2)&lt;br /&gt;
Firo:cpu nr3 release addr c3fe3954, spin_table c00000bf, ioremmappable 0&lt;br /&gt;
Firo: kernel origin spin tbale addr_l 247cf09a, pir 7cf19b, resv a664e740, r3 3e7cf19a, pa 50&lt;br /&gt;
Firo: kernel update spin tbale addr_l 50, pir 3, resv a664e740, r3 3e7cf19a&lt;br /&gt;
Firo: kernel timeout spin tbale addr_l 50, pir 3, resv a664e740, r3 3e7cf19a&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 3 to ack&lt;br /&gt;
smp: failed starting cpu 3 (rc -2)&lt;br /&gt;
I don’t see the following print in u-boot..&lt;br /&gt;
 69                                 fdt_setprop(blob, off, &amp;ldquo;cpu-release-addr&amp;rdquo;,&lt;br /&gt;
 70                                                 &amp;amp;val, sizeof(val));&lt;br /&gt;
+ printf(&amp;ldquo;Firo u-boot:cpu release addr %p, value %x\n&amp;rdquo;, &amp;amp;val, val);&lt;/p&gt;

&lt;p&gt;Firo:cpu nr1 release addr c3fe352c, spin_table c000003f, ioremmappable 0&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 1 to ack&lt;br /&gt;
smp: failed starting cpu 1 (rc -2)&lt;br /&gt;
Firo:cpu nr2 release addr c3fe3740, spin_table c000007f, ioremmappable 0&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 2 to ack&lt;br /&gt;
smp: failed starting cpu 2 (rc -2)&lt;br /&gt;
Firo:cpu nr3 release addr c3fe3954, spin_table c00000bf, ioremmappable 0&lt;br /&gt;
smp_85xx_kick_cpu: timeout waiting for core 3 to ack&lt;br /&gt;
smp: failed starting cpu 3 (rc -2)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Light camera action - compile link load</title>
      <link>http://firoyang.org/cs/build/</link>
      <pubDate>Sun, 25 Oct 2015 01:46:28 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/build/</guid>
      <description>

&lt;h1 id=&#34;reference:aba878e576894cc4457876fdf276811e&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tenouk.com/ModuleW.html&#34;&gt;compiler, assembler, linker and loader: a brief story&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;contents:aba878e576894cc4457876fdf276811e&#34;&gt;Contents&lt;/h1&gt;

&lt;p&gt;Why complier can manipulate the address of vriables?&lt;br /&gt;
What is the address in lds(??) file?&lt;/p&gt;

&lt;h1 id=&#34;build-automation:aba878e576894cc4457876fdf276811e&#34;&gt;Build automation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make&lt;br /&gt;
make cynthia&lt;/p&gt;

&lt;h2 id=&#34;kbuild:aba878e576894cc4457876fdf276811e&#34;&gt;kbuild&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if no .config, every config tools make a .config from scrach!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;oldconfig just for new moduels patch merged in trunk. This no any relations to .config.old and /boot/config.x.y.z&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make localmodconfig will reduce many unused kernel config.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make bzImage  #kmods will not build that configured with M!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make modules_install INSTALL_MOD_PATH=/home/firo/kmods&lt;/p&gt;

&lt;h2 id=&#34;yocto:aba878e576894cc4457876fdf276811e&#34;&gt;yocto&lt;/h2&gt;

&lt;p&gt;make ARCH=arm menuconfig&lt;br /&gt;
##build signle kernel module&lt;br /&gt;
make menuconfig&lt;br /&gt;
make oldconfig &amp;amp;&amp;amp; make prepare&lt;br /&gt;
make -C $(pwd) M=/home/firo/linux/fs/ext3 modules V=1&lt;br /&gt;
make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnu- drivers/pcmcia/sa11xx_base.o&lt;/p&gt;

&lt;h1 id=&#34;compile-construction:aba878e576894cc4457876fdf276811e&#34;&gt;Compile construction&lt;/h1&gt;

&lt;p&gt;Understand pl deeply&lt;br /&gt;
how to translate it into machine code for specific CPU&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gcc&lt;br /&gt;
-E -S -c&lt;br /&gt;
-I -L -l&lt;br /&gt;
-ansi&lt;br /&gt;
-fsyntax-only&lt;br /&gt;
-Werror&lt;br /&gt;
-save-temps&lt;br /&gt;
-H: show all header used&lt;br /&gt;
-v&lt;br /&gt;
-Wall&lt;br /&gt;
-fPIC: for shared library&lt;br /&gt;
-Q: print function and statisc?&lt;br /&gt;
-Wextra: 用处不大.&lt;br /&gt;
-U: undefine a preprocessor macro.&lt;br /&gt;
-pipe: make compilation faster, replace xx.S with |&lt;br /&gt;
-Wpadded: we can rearrange the fields of structure to make the structure smaller&lt;br /&gt;
-time&lt;br /&gt;
-x c: c language&lt;br /&gt;
-: stdin&lt;br /&gt;
asmlinkage&lt;br /&gt;
However, for C functions invoked from assembly code,&lt;br /&gt;
we should explicitly declare the function&amp;rsquo;s calling convention,&lt;br /&gt;
because the parameter passing code in assembly side has been fixed.&lt;br /&gt;
Show all predefined macros for your compiler&lt;br /&gt;
gcc -dM -E -x c /dev/null&lt;br /&gt;
##&lt;a href=&#34;http://www.stlinux.com/devel/debug/jtag/build?q=node/82&#34;&gt;Generating optimized code&lt;/a&gt;&lt;br /&gt;
##Symbol table&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;System.map less&lt;br /&gt;
When you compile the kernel&lt;br /&gt;
nm vmlinux&lt;br /&gt;
readelf -s&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;/proc/kallsyms&lt;/p&gt;

&lt;h1 id=&#34;link:aba878e576894cc4457876fdf276811e&#34;&gt;Link&lt;/h1&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GNU ld&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gold&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Computer architecture</title>
      <link>http://firoyang.org/cs/arch/</link>
      <pubDate>Tue, 13 Oct 2015 00:00:00 UTC</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/arch/</guid>
      <description>

&lt;p&gt;##Reference&lt;br /&gt;
&lt;a href=&#34;https://youtu.be/cNN_tTXABUA&#34;&gt;How a CPU Works&lt;/a&gt;&lt;br /&gt;
Legacy 常用寄存器，常见指令 实模式和保护模式 分段和分页机制 TSS和任务管理 中断机制 时钟机制 高速缓存&lt;br /&gt;
《模拟电子技术基础 童诗白 第四版》第一章前半部分&lt;br /&gt;
Structured Computer Organization 6th Edition&lt;br /&gt;
Digital Design and Computer Architecture 2nd Edition&lt;br /&gt;
Computer Organization and Design 5th Edition&lt;br /&gt;
Write Great Code: Volume 1: Understanding the Machine&lt;br /&gt;
See MIPS run&lt;br /&gt;
Intel 64 and IA-32 architectures software developers manual combined volumes 3A, 3B, and 3C: System programming guide&lt;br /&gt;
Microelectronics&lt;/p&gt;

&lt;h2 id=&#34;isa:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;ISA&lt;/h2&gt;

&lt;p&gt;model: 1570s, &amp;ldquo;likeness made to scale; architect&amp;rsquo;s set of designs,&amp;rdquo; from Middle French modelle&lt;br /&gt;
Semantics in computer science: In programming language theory, semantics is the field concerned&lt;br /&gt;
with the rigorous mathematical study of the meaning of programming languages.&lt;br /&gt;
Language primitive&lt;br /&gt;
ISA: memory model, registers, data types, instructions, word size(?).&lt;br /&gt;
Memory model: unit of address resolution, word, aligment, address space, addressing mode, memory barrier/memory order primitive&amp;rsquo;s semantics.&lt;br /&gt;
#x86 Interrupt&lt;br /&gt;
If interrupt occured in user mode, then cpu will context swith for potential reschedule.&lt;br /&gt;
The Interrupt Descriptor Table (IDT) is a data structure used by the x86 architecture to implement an interrupt vector table.&lt;br /&gt;
##Hardware interrupts&lt;br /&gt;
are used by devices to communicate that they require attention from the operating system.&lt;br /&gt;
asynchronus&lt;br /&gt;
more details in init_IRQ() or set_irq() in driver.&lt;br /&gt;
##software interrupt&lt;br /&gt;
synchronus&lt;br /&gt;
more details in trap_init().&lt;br /&gt;
* exception or trap&lt;br /&gt;
is caused either by an exceptional condition in the processor itself,&lt;br /&gt;
divide zero painc?&lt;br /&gt;
* special instruction, for example INT 0x80&lt;br /&gt;
or a special instruction in the instruction set which causes an interrupt when it is executed.&lt;/p&gt;

&lt;h1 id=&#34;i-o-ic:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;I/O IC&lt;/h1&gt;

&lt;p&gt;serial communication: UART(16550) + RS-232&lt;br /&gt;
parallel communication: SCSI, ISA, ATA, PCI, FSB&lt;/p&gt;

&lt;h1 id=&#34;data-struct-aligment:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;Data struct aligment&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.catb.org/esr/structure-packing/&#34;&gt;The Lost Art of C Structure Packing&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://en.wikipedia.org/wiki/Data_structure_alignment#Typical_alignment_of_C_structs_on_x86&#34;&gt;Typical alignment of C structs on x86&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;为什么需要结构体对齐:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;为什么需要结构体对齐?&lt;/h2&gt;

&lt;p&gt;struct foo {&lt;br /&gt;
char c;&lt;br /&gt;
int i;};&lt;br /&gt;
如果是32位, cpu 一次取4byte a word 数据.&lt;br /&gt;
如果我们把i的前3byte和c存到一起, 剩下1byte of i自己单独存.&lt;br /&gt;
那么我们访问i这个数据就要读两个4byte a word. 对cpu来说性能损耗.&lt;br /&gt;
如果我们把i单独放到4byte 对齐的地址, 那么我们只需要一次cpu读取.fast!&lt;/p&gt;

&lt;h2 id=&#34;产生非对齐访问的场景:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;产生非对齐访问的场景&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Casting variables to types of different lengths, 比如char * 到int *&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pointer arithmetic followed by access to at least 2 bytes of data , 不太理解.&lt;/p&gt;

&lt;h2 id=&#34;我们做什么:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;我们做什么?&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;什么也不干, 按默认对齐来Natural alignment&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为了不影响性能, 同时减少内存使用, 编程时最好显示reorder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;get/put_unaligned  to avoid analigned access.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过attribute aligned指定对齐要求.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据要在不同体系, 32/64之间使用, 比如网络,写到disk, 我们必须要attribute packed&lt;br /&gt;
也就是说不对齐, 不同平台对齐可能不同, 我们不能让数据corruption.&lt;/p&gt;

&lt;h2 id=&#34;如果数据不对齐有什么-cpu怎么办:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;如果数据不对齐有什么, cpu怎么办?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/unaligned-memory-access.txt&#34;&gt;必读UNALIGNED MEMORY ACCESSES&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果用了packed, 编译器会生成extra代码阻止非对齐访问, performance loss.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cpu呢? 可能正确处理raise a exception to fix it with performance loss.&lt;/p&gt;

&lt;h2 id=&#34;calculate-the-sizeof-of-aligned-c-struct:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;Calculate the sizeof of aligned c struct&lt;/h2&gt;

&lt;p&gt;Data alignment means putting the data at a memory address equal to some multiple of the word size,&lt;br /&gt;
which increases the system&amp;rsquo;s performance due to the way the CPU handles memory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;find the widest scalar member and attribute( aligned(x)) to determin alignment.&lt;br /&gt;
找到结构体内scalar和attribute最大的对齐要求.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fill the member to alignement without wrap&lt;br /&gt;
把结构的成员一次填满对齐宽度, 不够的填到下个对齐宽度, 空出来留着padding&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pading to alignment&lt;br /&gt;
填上所有空.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;endianess:db4e8bc0878d0c9c387c4ffab2ea87af&#34;&gt;Endianess&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yolinux.com/TUTORIALS/Endian-Byte-Order.html&#34;&gt;Endianness: Big and Little Endian Byte Order&lt;/a&gt;&lt;br /&gt;
应该说bit endianess 实际存储只有MSB &amp;hellip; LSB这一种二进制表达形式! 在上面的文章的representtion, 辅证这一点.&lt;br /&gt;
这篇文章&lt;a href=&#34;http://tonybai.com/2013/05/21/talk-about-bitfield-in-c-again/&#34;&gt;再谈C语言位域&lt;/a&gt;,&lt;br /&gt;
之所以输出逆序, 是因为错误里理解了, bit 序. bit 序是cpu 读取的方式, 不是存储的方式!&lt;br /&gt;
* &lt;a href=&#34;https://en.wikipedia.org/wiki/Bit_numbering&#34;&gt;bit endianness&lt;/a&gt;&lt;br /&gt;
这样就可以更好的理解iphdr:&lt;br /&gt;
#if defined(__LITTLE_ENDIAN_BITFIELD)&lt;br /&gt;
    &lt;strong&gt;u8    ihl:4,&lt;br /&gt;
        version:4;&lt;br /&gt;
#elif defined (&lt;/strong&gt;BIG_ENDIAN_BITFIELD)&lt;br /&gt;
    __u8    version:4,&lt;br /&gt;
        ihl:4;&lt;br /&gt;
#else&lt;br /&gt;
#error  &amp;ldquo;Please fix &lt;asm/byteorder.h&gt;&amp;ldquo;&lt;br /&gt;
#endif&lt;br /&gt;
ipv4 header的拓扑&lt;br /&gt;
version ihl&lt;br /&gt;
0100 0101&lt;br /&gt;
因为le的cpu是 lsb first, 也就是从最左面的1开始读, 所以第一个是ihl&lt;br /&gt;
而be的cpu是 msb first, 从最右开始所以version开头.&lt;br /&gt;
而使用unsigned char ver_ihl&lt;br /&gt;
(ver_ihl &amp;amp; 0xf0)&amp;gt;&amp;gt; 4 = version&lt;br /&gt;
ver_ihl &amp;amp; 0x0f = ihl&lt;br /&gt;
是无关cpu读取顺序的.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Algorithms and data structues for kernel hacking</title>
      <link>http://firoyang.org/cs/algorithm/</link>
      <pubDate>Wed, 27 May 2015 12:42:12 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/algorithm/</guid>
      <description>

&lt;h1 id=&#34;reference:0410937a83f6b2d022d3a1c190b257c8&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed#&#34;&gt;Core algorithms deployed&lt;/a&gt;&lt;br /&gt;
Algorithms: Design Techniques and Analysis&lt;br /&gt;
The Algorithm Design Manual 2nd Edition&lt;/p&gt;

&lt;h1 id=&#34;世界本源-the-origin-of-the-world-l-origine-du-monde:0410937a83f6b2d022d3a1c190b257c8&#34;&gt;世界本源, the origin of the world, L&amp;rsquo;Origine du monde&lt;/h1&gt;

&lt;p&gt;being(4), abyss(0)&lt;br /&gt;
material(1) change, quality, quantity, relation, space, time&lt;br /&gt;
process(2), tansfer, truth, signifier(3), bijection, Causality, structure&lt;br /&gt;
connectivity&lt;/p&gt;

&lt;h1 id=&#34;排序算法的分析:0410937a83f6b2d022d3a1c190b257c8&#34;&gt;排序算法的分析&lt;/h1&gt;

&lt;p&gt;排序的结果全序.&lt;br /&gt;
在确定排序的思想/算法后, 排序的过程是从无序to 有序的过程.&lt;br /&gt;
我们排序的过程等价成一次算术运算.&lt;br /&gt;
每一次, 在特定的算法下, 数据有序度增加or不增加, 但不减少.&lt;br /&gt;
我们把有序度看成一个quantity.那么此时排序的过程等价于有序度增加的过程.&lt;br /&gt;
怎么定义有序度set内元素构成=&amp;lt;就是一度粗有序度. 严谨的连续元素构成=&amp;lt;关系.&lt;br /&gt;
比如1 2 3 4 5 , bold order:4 + 3+ 2 +1; 严谨有序度:４&lt;/p&gt;

&lt;p&gt;也就是一个算法, 对如3 2 5 4 1. bo:2 + 2 ; 严谨有序度:0&lt;br /&gt;
bo: 2+2 to 10&lt;br /&gt;
严谨: 0 to 4&lt;br /&gt;
就算完成.此时我们没做一次排序, 都在做加法运算.只是每一步转换成一个变量了.&lt;br /&gt;
这似乎对我们理解sorting起不了多大的帮助.&lt;br /&gt;
直觉应该没错.确实不应该关心过程, 而应该关系变化本身, process不等于变化本身.&lt;br /&gt;
只是process是变化的动力, 却不是原因.变化的因果并不是恒定不变的.process成了变化的&lt;br /&gt;
结果了, 因为要这样所以才有了process, 不是这个process才怎么怎么了.&lt;br /&gt;
这样我们知道从raw set to ordered set, 这个过程, 一定可以有多个sort algorithms来完成.&lt;br /&gt;
那么选取哪个sort algorithm就是有改变的形式决定的.&lt;br /&gt;
所以我们依然在探讨结构上的变化. 而不是纯粹的process过程.&lt;br /&gt;
比如先确定边界元素的有序度, 从一边向另一边逐渐演化. 这就是selection sort.&lt;br /&gt;
注意!我们通过等价变换causlity, 原来近乎process主导的问题变为了, quantity structure渐变的问题了.&lt;br /&gt;
原来是伸手不见五指的变, 现在是看的见有形的变.&lt;br /&gt;
再看其他的算法, 比如我们想确定由中间quantity发起向两侧的有序变化, 就是快排.快排为什么快?&lt;br /&gt;
但是我们发现, 这种有中间发起的有序度变多的过程, 有两个疑点.&lt;br /&gt;
1. 这个所谓中间值是我们随机指定的, 几乎不可能是真正意义上的&amp;rdquo;中间值&amp;rdquo;.&lt;br /&gt;
2. 也是疑惑最大, 这种中起的有序度变化, 严格有序度不像边沿变化那样连续, 但是关于所谓中间值的bold order&lt;br /&gt;
确是丝毫没有耗损的! 也就是bold order是非常细腻的, 而Strict order, 是非常粗野的.&lt;br /&gt;
我们可以武断地下个定论, 满足严格有序的算法效率差!后面会给出严谨的证明.&lt;br /&gt;
我们继续, 另外务必注意, 我们这里没有任何关于已知算法的信息.&lt;br /&gt;
已知的各种算法是就是符号系统里面的signifier, 在我们分析的过程中纯粹的就是个名字而已.&lt;br /&gt;
更可怜的是, 这个名字是我们从signified推出来的.&lt;br /&gt;
我们现在已经推出了冒泡, 选择, 快排 三种算法了.&lt;br /&gt;
另外还有merge sort, heap sort, insertion sort, shell sort.&lt;br /&gt;
我只是看了merge sort之后的名字了, 具体的算法, 内容我都忘了(刻意不去想).&lt;br /&gt;
现在看了quick sort确认的是任意一点为为核心的orderness的增多过程. 增加的形式由中间开启.topdown.可以强调中间的含义.&lt;br /&gt;
insertion sort是select的一个generalize的版本, 他不强求strict order的满足. 也是有一边向另一边的orderness增多过程.&lt;br /&gt;
merge sort: 从全部的个体单元开始的开始有序度增多, bottomup过程.不强加中间的含义.&lt;br /&gt;
构成了以raw 元素为开始的, 从东南西北开始的四面埋伏是的有序度增多过程.&lt;br /&gt;
看来我的感觉没错.&lt;br /&gt;
算法的分析就结束了, 意外的收获颇多.本以为行不通的.&lt;/p&gt;

&lt;h1 id=&#34;查找算法的分析-searching-algorithm:0410937a83f6b2d022d3a1c190b257c8&#34;&gt;查找算法的分析 searching algorithm&lt;/h1&gt;

&lt;p&gt;搜索的效率完全在于搜索路径的长短.&lt;br /&gt;
查找是在a set of objects, 找到特定的目标. the structure of the set of objects可能是任意的.&lt;br /&gt;
计算机中如线性的linked list, array, tree, graph. structure并不只是量之间的quality, relation.&lt;br /&gt;
还包括了, change, 即operation, access/get也是一种change, 效果是没有change.&lt;br /&gt;
那么What is the form causality of searching?上面分析sorting的时候, 我们没有分析sorting算法的效率.&lt;br /&gt;
因为排序的form是orderness, 不是效率. 当然效率也很重要.&lt;br /&gt;
而查找算法,直观上要比sorting要简单, 他只关心特定的目标, 找到or not found.&lt;br /&gt;
但是有一点, 我们是万分确信的. 那就是类似sorting, searching的目的也是确定的, 也就是目的因的存在.&lt;br /&gt;
我们通过类似蒙太奇的手法, 去从差异中需找这种量. 寻找一些差异来自于我们找到target的最终结果和每步尝试之间.&lt;br /&gt;
每一步, 我们都比上一步离target更近了. 我想这是searching的form之一.&lt;br /&gt;
我定义为reachness(我瞎起的). 我们知道在特定的算法确定的情况下, 在特定的数据结构下(也就是搜寻的具体空间),&lt;br /&gt;
reachness这个quantity用来刻画我们searching的process, 因为算法确定, 数据结构确定, 没有数据的update.&lt;br /&gt;
那么我们前后两次searching到同一个target的reachness是一样的!没有差异, 我们不能仅仅用他来区分不同的searching process.&lt;br /&gt;
那么我们如何用这个reachness刻画不同searching algorithm呢?在说一次,&lt;br /&gt;
 我们分析过程不关心算法的效率(这种马后炮式的分析,很无聊, 但巨大现实意义), 不属于本次的topic!&lt;br /&gt;
我们的目的是为了理解区分而刻画不同的searching algorithm.实际上在上面分析排序算法的过程中我们隐式的分析对象就是数据结构,&lt;br /&gt;
不过我们忽视了他的存在. 我们分析的内容是确定的:&lt;br /&gt;
数据有序, 能显著减少搜索的空间? 为什么有序order的数据, 就能减少搜索的次数呢?&lt;br /&gt;
a) 查找本身就是做order判断.&lt;br /&gt;
b)  而有序的数据潜在做完了判断.&lt;br /&gt;
也就是还有一个判断读的问题 or orderness. 那么final reachness的最大值就是描述在不同的数据结构中, 得到target经历的quantity.&lt;br /&gt;
if orderness = 0. every structure&amp;rsquo;s final reachness = max space.&lt;br /&gt;
else final reachness &amp;lt; max space; // maybe half of max space&lt;br /&gt;
那么树形结构和linear 结构有什么区别呢? 结构上的已经清楚了.实际上, 我们知道计算机中树就是用linear实现的.&lt;br /&gt;
无序的链表和无序的tree是一样的.可以说无序的树是无意义的.&lt;br /&gt;
树是链表的超集. 有什么事树可以, 链表不可以.二分查找和二叉树查找是一样的.&lt;br /&gt;
但是二分只能应用到array上. 主要是因为没办法找到中间点.如果我们加个指针指向有序链表中间向他变成了什么?&lt;br /&gt;
没错树, 这应该就是树的重要本质了, accessable &amp;ldquo;中间&amp;rdquo;的quantity.除了叶节点职位的quantity都是内部&amp;rdquo;中间&amp;rdquo;quantity.&lt;br /&gt;
tree的两个后继则是边缘的一种展示.相比链表, 我们能第一时间知道正set of quantities的中间quantities.&lt;br /&gt;
实际上, 顺着middle pointer我们能够找到所有的interior middle quantities; 意外吧. 但是我们想知道其他的&lt;br /&gt;
中间节点时间耗费就是增多了.比如2049个节点. dfs只要最多8次就能找到任意&amp;rdquo;interior middle pointer&amp;rdquo;可是link list&lt;br /&gt;
全是512次啊tree有效的控制了reachness. 当然树是完全平衡的二叉树.&lt;br /&gt;
我现在到底在说什么呢? 我们试图用reachness和orderness描述tree, 我们辨析了tree和链表在reachness上的差异, 前提full order.&lt;br /&gt;
tree毫无疑问有link list来的.也就是说我们现在把searching 等价成了tree的结构.&lt;br /&gt;
那么维持reachness在较低值就是算法优劣关键. 那么如何保持reachness最小, 也就是orderness最大.&lt;br /&gt;
是什么让tree在reachness比link list优势这么大? 是存在于tree中隐式的判断.链式是一点点线性的变化, 而tree中的隐式判断确实二分的.&lt;br /&gt;
orderness小于1的tree没有意义.&lt;br /&gt;
记下来看看:avl tree, redblack tree, treap, splay tree, Size Balanced Tree, B-tree, B+ tree. but Trie or 霍夫曼树.&lt;br /&gt;
也就是说我们现在要考察这些tree structure. 基本考察完, 我的算法就同了. 后面还有DP, 贪婪, 数值, PNP之类都是思想了.&lt;br /&gt;
所以基本上本周5能把algorithm, 完事, 周6 设计模式. 周日开始sicp.&lt;br /&gt;
开始, 树结构的分析, 因为尽管是有形的visible structure, 我们依然无法给霍夫曼树和red black一个合理分析视角,&lt;br /&gt;
根本原因就是他们的form causality or 目的因不同.由上面可知orderness和reachness是我门刻画binary balance tree的quantities.&lt;br /&gt;
我们前面也分析了如何从link list到链表. 确定小, 中, 大,即 left, root, right这种模式下所有set of quantities的构成tree有多种可能.&lt;br /&gt;
如 1 2 3 4 5; left subtree 可以是 NULL, 1, 2, 还可以是1, 2, NULL.常见的旋转可以打到前者的情况. or不旋转:&lt;br /&gt;
5是root. 之后3是left 也是subtree的root, 1是left, 4是right,  1是root 2是right.&lt;br /&gt;
有序的link list和二叉树在插入删除是都做order判断调整, 由此一点我们不能判断出书有效的. 那什么是树比link list有效的呢?当然前提是&lt;br /&gt;
整个set 是order的.对1 2 3 4 5, reachness可能是5也可能是3. 对与1024个数据可能是1024, 可能是9.&lt;br /&gt;
树的高度height能有效衡量reachness.现在我们知道了, avl, red black, trap, splay这些tree的目标都是height的最小化.&lt;br /&gt;
但同时, 我们也知道height是一个描述最终结果.并不是process quantity. 我们找到与process动态同步的quantity.&lt;br /&gt;
这个process准确说就是构建balance tree的过程. 那么这个量就是描述balance tree.如 1 2 3 4 5 6 7 8 9, 5做root,&lt;br /&gt;
1 2 3 4 全是left child, 6 7 8 9全是right child. 二叉树的最raw的形态应该是link list那种.也就是说除了leaf node, 每个node至少&lt;br /&gt;
和两个node相连.也就是天然的形态. 那么我们把同时连着两个的node的connectivity作为1. 反之为0.链表起始是right side tree,&lt;br /&gt;
我的天, 这样链表的connectivity就是0啊.比如1,2,3,4,5,6,7的connectivity在0~3, 这是strict connectivity.那么bold connectivity就是&lt;br /&gt;
只要有连着就行link list对于1 to 7 这种情况是6.和二叉树没差. 比如 1 2 3 4 5. connectivity是1 or 2对search是没有影响的.&lt;br /&gt;
饶了一圈发现还是height最好用.那如何保证height最小. 看来还差树的form是保证height=(logN+1向上取整)&lt;br /&gt;
现在searching问题就转换成了二叉树构造的问题了.成了一个动态的过程了.&lt;br /&gt;
我们现在完全不考虑算法实现. 只是单纯的考虑一个过程前后两个state的差异, 类似蒙太奇手法.&lt;br /&gt;
重点是确认前后的两个state是什么? 前一个状态是raw, 我们不关心具体什么, 因为他可以是二叉树可能存在的各种状态.那么后一个状态呢?&lt;br /&gt;
我们期望的是什么. 我们可以为binary tree的各种形态用数值量化表示. 我们不用complete binary tree来表示理性的便于搜索的二叉树.&lt;br /&gt;
因为在最右在层, leaf node是否连续, 对searching的worst-case time O(log n) 没影响.所以我们叫piled tree.&lt;/p&gt;

&lt;p&gt;如果存在3个点向来的情况就认为 connectivity is 1。整个树的connectivity 是每个点的加和结果。&lt;br /&gt;
比如1到7的set那么max connectivity&lt;br /&gt;
4&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;br /&gt;
&lt;sup&gt;13&lt;/sup&gt;&amp;frasl;&lt;sub&gt;67&lt;/sub&gt;&lt;br /&gt;
所以是3这种情况也就是最有利于searching的。&lt;br /&gt;
同样1到7。&lt;br /&gt;
4&lt;br /&gt;
&lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;br /&gt;
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;67&lt;/sub&gt;&lt;br /&gt;
2&lt;br /&gt;
这种情况connectivity不是max，是2。也对应不是对searching最优的结构。&lt;br /&gt;
how to prove the consistency between connectivity and searching effiency？&lt;br /&gt;
Delay this job to future。&lt;br /&gt;
So oncemore we transfer our hunting target to how to build a  binary tree that with max connectivity.&lt;br /&gt;
In other words, all the popular self banlancing tree inherit this intrsic.&lt;br /&gt;
what we can do to modify the structure of  binary searching tree.&lt;br /&gt;
1 link  or unlink&lt;br /&gt;
2 counterclockwise weight inreasing&lt;br /&gt;
3 right shift(left roation); left shift(right roation)&lt;br /&gt;
4 只有insert和delete会影响.&lt;br /&gt;
尝试这却理解redblack tree.&lt;br /&gt;
逐一分析性质:&lt;br /&gt;
分出red black, 根叶都是黑.&lt;br /&gt;
red node不联通.&lt;br /&gt;
每个路径上黑node个数相同.&lt;br /&gt;
如果对于特定数量的nodes, 我们确认他能构成一定数量对应height在log(N+1), 也就是最优的searching.&lt;br /&gt;
所以说specific number nodes可以组成很多种binary searching tree.按照node的height在log(N+1)的数量.&lt;br /&gt;
avl 要严格rb-tree.这就是bst的form. 我们来总结下.&lt;br /&gt;
numbers of node &amp;lt; log(N +1) 取上.&lt;br /&gt;
那么rb是如何保证logN呢?&lt;br /&gt;
一个潜在的性质是插入是红.红永远小于黑,&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gregfjohnson.com/cgi-bin/redblackbuilder&#34;&gt;http://gregfjohnson.com/cgi-bin/redblackbuilder&lt;/a&gt; 生成1 2 3 4 5 6逐一插入的算法.&lt;br /&gt;
                                                                             2  (b)&lt;br /&gt;
                                                                               |&lt;br /&gt;
                                                                   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;-+&lt;br /&gt;
                                                                   |                      |&lt;br /&gt;
                                                                 1  (b)                 4  &amp;reg;&lt;br /&gt;
                                                                                          |&lt;br /&gt;
                                                                                  +&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;-+&lt;br /&gt;
                                                                                  |               |&lt;br /&gt;
                                                                                3  (b)          5  (b)&lt;br /&gt;
                                                                                                  |&lt;br /&gt;
                                                                                                  +&amp;mdash;-+&lt;br /&gt;
                                                                                                       |&lt;br /&gt;
                                                                                                     6  &amp;reg;&lt;br /&gt;
insert 7:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                                                         2  (b)                                 
                                                                           |                                    
                                                              +------------+------------+                       
                                                              |                         |                       
                                                            1  (b)                    4  (r)                    
                                                                                        |                       
                                                                             +----------+----------+            
                                                                             |                     |            
                                                                           3  (b)                6  (b)         
                                                                                                   |            
                                                                                            +------+------+     
                                                                                            |             |     
                                                                                          5  (r)        7  (r) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;insert 8:&lt;br /&gt;
                                                                             4  (b)&lt;br /&gt;
                                                                               |&lt;br /&gt;
                                                                 +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&lt;br /&gt;
                                                                 |                            |&lt;br /&gt;
                                                               2  &amp;reg;                       6  &amp;reg;&lt;br /&gt;
                                                                 |                            |&lt;br /&gt;
                                                          +&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;+             +&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;-+&lt;br /&gt;
                                                          |             |             |               |&lt;br /&gt;
                                                        1  (b)        3  (b)        5  (b)          7  (b)&lt;br /&gt;
                                                                                                      |&lt;br /&gt;
                                                                                                      +&amp;mdash;-+&lt;br /&gt;
                                                                                                           |&lt;br /&gt;
                                                                                                         8  &amp;reg;&lt;br /&gt;
从6和7我们能看出来rb tree不是严格小于log(N+1) 分别有1和2个node height超过(logN+1), 第一个插入的是4那么就能保证complete了.&lt;br /&gt;
那么rb tree是如何保证每条路径上黑node相同呢?貌似是个副产品.可是非常重要.&lt;br /&gt;
如果父和叔都是r, 都变b, 祖父r.&lt;br /&gt;
如果叔是黑, 父黑, 祖父r. 父变root.&lt;br /&gt;
删除:&lt;br /&gt;
要复杂很多.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computer science a kernel programmer&#39;s perspective</title>
      <link>http://firoyang.org/cs/cs/</link>
      <pubDate>Fri, 27 Feb 2015 15:46:14 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/cs/</guid>
      <description>

&lt;h1 id=&#34;reference:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bravegnu.org/gnu-eprog/&#34;&gt;Vijay Kumar B&amp;rsquo;s Embedded Programming with the GNU Toolchain&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-architecture-of-computer-science:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;The Architecture of Computer science&lt;/h1&gt;

&lt;p&gt;SICP states that cs focuses on process.&lt;br /&gt;
What process is is the set of changes and quantaties.而这些changes 和 quantaties live in model of computation.&lt;br /&gt;
我们可以说一个process就是一个从属于model of computation的changes和quantaties的一次排列和集合.&lt;br /&gt;
所以model of computation至少是change的集合 和 quantaty的集合的集合.processess 本身就是暗含着data/quantaties的.&lt;br /&gt;
Why can  processes being? It&amp;rsquo;s model of computation.&lt;br /&gt;
这就是cs的form, process和model of computation. What is the material of cs?&lt;br /&gt;
cs 的material 是symbolic.&lt;br /&gt;
For now, we have noticed that the form of cs is changes and quantities.&lt;br /&gt;
And the material of cs is symbolic(or, symbolic system).&lt;br /&gt;
Both form and material are properties of being/abyss.&lt;br /&gt;
人类的思维使用多种materials(vision, animation, graphics,or, feelings)去express a concept。&lt;br /&gt;
可以说程序设计语言就是标准描述 process的Semiotic system。&lt;br /&gt;
所以， pl对process的elements or origins做了合适的描述。&lt;br /&gt;
sicp研究的符号规则层面的process 和 data。 design pattern研究的是语义层面的。&lt;br /&gt;
PL 给了我们一种视角, 从process的元素的角度去描述process.&lt;br /&gt;
form language(BNF-&amp;gt;syntax, regex-&amp;gt;lexical)藐视pl的语法.&lt;br /&gt;
form language可以通过automata鉴别.automata等价于form system lambda calculus.&lt;br /&gt;
自动机被相应的form grammar分类.&lt;br /&gt;
我们的目的是规范化人类思维的表达形式.以此来达到交流, 具现化.&lt;br /&gt;
我们要明白, pl的所有内容都是围绕the set of changes and quantaties建立的,&lt;br /&gt;
也就是说pl是能指, 而所指便是the set of changes and quantaties.&lt;br /&gt;
syntax句法不是我们关注的, 我们关注的是semantic.从semantic角度去尽可能的描述changes和quantaty.&lt;br /&gt;
quantaties and changes: type system&lt;br /&gt;
我们给quantaties附上特定的类型, 表达特定的含义,&lt;br /&gt;
primitive expression: 数学量, 符号学字符, function&lt;br /&gt;
combination: compound elements&lt;br /&gt;
abstraction: name an elements&lt;br /&gt;
relation: inference, relaton of changes, Flow Diagrams, Turing Machines And Languages With Only Two Formation Rules;&lt;br /&gt;
也就是Jhone Locke的binary relation.&lt;br /&gt;
process 可以看成人的意志力展示.origins加入interence不关注changes. logic就是研究过程/changes和过程/changes之间的关系.&lt;br /&gt;
control flow描述设定的就是这种order/relation.核心不在于有没有if else, 而是是否有足够的表达能力.&lt;br /&gt;
表达changes之间的relation/order.可能是一种图的感觉, 就比如if else引起了tree这种order的产生.&lt;br /&gt;
也就是说语言的表达力. changes要类似automata的四通八达的感觉.&lt;br /&gt;
process由 changes, inference/relation, quantaties组成.因为这是由人的意志will 参与的process.&lt;br /&gt;
inference 强调的是order of changes/computation,也就是control flow.&lt;br /&gt;
Why does the order of execution matter?&lt;br /&gt;
Then we need programming:sicp c3(c2/c1)&lt;br /&gt;
then interpreter: sicp c4&lt;br /&gt;
link load&lt;br /&gt;
computation model: sicp c5&lt;br /&gt;
if else: 表示的是relation(changes之间的关系, order, causality, inference)&lt;br /&gt;
也就是说pl包含:&lt;br /&gt;
changes, quantaties, relation. 这几种表述.&lt;br /&gt;
pl和machine/model of computation近乎等价, progrm是machin的超集. program 是process.而pl不是.&lt;br /&gt;
所以pl和machine都对process有表达的能力.pl和machine的form一致, 但material不同. 他们都是process元素的集合.&lt;br /&gt;
programming是排列组合这些process elements的craft.可以说这些元素是data, 可以转变为process.&lt;br /&gt;
这里面我们就定义programmer的skills, crafts, 是一种排力组合的能力, 不严禁的通俗的理解.&lt;br /&gt;
design pattern 更注重宏观process. 他们排布process. 单这些process是处理别的process.high-order process(procedure?)&lt;br /&gt;
而algorithm, 可以认为是关注的是primitive/ process.&lt;br /&gt;
图灵机加入的&amp;rdquo;感知&amp;rdquo;,正是laking of causal.&lt;br /&gt;
之于表述computational process, 认为(hypothesis?)自然语言和pl是具有相同能力的.&lt;br /&gt;
programming的目的之一是把思维结果转为pl形式表达出来.&lt;br /&gt;
另外, 我们现在能总结出, cs的两大主题就是:the form of process and how to express more better.&lt;br /&gt;
process的内在, 以及如何表达process.cs剩下的问题都是programmer 码农的问题.&lt;br /&gt;
现在我们来研究纯粹的process.继承sicp的定义.&lt;br /&gt;
procedure是process的体现. process &amp;gt;= procedure. 所谓的local evolution, 等价于c,lisp的function.&lt;br /&gt;
procedure 是一changes(quantaties, relation)有限的集合.&lt;br /&gt;
一个process可以包含多个procedure, 也可以只有一个procedure(如, 递归, 迭代).&lt;br /&gt;
还有另外一个就是data.process和data唇亡齿寒.&lt;br /&gt;
process: procedure, computation/changes.&lt;br /&gt;
data-&amp;gt;: compound data, quantaty.&lt;br /&gt;
我们研究的重点似乎时relation吧?&lt;br /&gt;
process和data既像一物两面, 又像唇亡齿寒.&lt;br /&gt;
下面开始,&lt;br /&gt;
从combination, abstraction, relation这三个方面属性的process.&lt;br /&gt;
从简单到复杂, 先关注process.&lt;br /&gt;
如果process只有一个procedure.  elementary process.&lt;br /&gt;
似乎我们可以得到一个关于process的坐标系: procedure 的种类和数量.&lt;br /&gt;
这里, 我们不关注algorithm.&lt;br /&gt;
这里, 关注design pattern, GoF, elemental design pattern, POSA.&lt;br /&gt;
从坐标系角度只考虑process和process之间的关系:&lt;br /&gt;
1 只有一种quality的procedure, 完成的process.&lt;br /&gt;
那么数量上如果构成大于1, 也就是procedure call procedure.&lt;br /&gt;
可以是iteration or recursion; 我门的坐标系反应不出来.&lt;br /&gt;
需要另外一个属性, procedure 自身是否是运算的参数.&lt;br /&gt;
坐标系改下, procedure的数量换成procedure是否参与运算. 如果参与computation就是递归.&lt;br /&gt;
默认procedure 数量&amp;gt;=2.&lt;br /&gt;
我们再一次发现, procedures之间可能并不是直接调用的.&lt;br /&gt;
所以一个小坐标系, 能表达的太有限, 要废弃掉.从属性角度看.但可以明确procedures出现次数是2个以上.&lt;br /&gt;
当然, 我们是从process角度分析问题的.&lt;br /&gt;
只有一种procedure,&lt;br /&gt;
* call/order relation&lt;br /&gt;
参与 computaton 是 recursive, otherwise, iteration.&lt;br /&gt;
iter(a,i, n)&lt;br /&gt;
if (i&lt;n)
 a = a * (a +1)
 i++;
 return iter(a, i, n)//tail call&gt;&lt;br /&gt;
看来这个问题的实质是process是否作为计算的对象.而recursive和iteration是某个general的特例.&lt;br /&gt;
loose relation: sequence(特例iteration), 是computation之间的关系.&lt;br /&gt;
strict relation: computation是内在的关系. computation被抽象data&lt;br /&gt;
primitive computation可以调function, function可以调primitive computation.&lt;br /&gt;
computation function 经过抽象变成data.data反过来又可构成computation.&lt;br /&gt;
可以说没有data, 全是computation!?那这么说(所谓的&amp;rdquo;recursive&amp;rdquo;, 就司空见惯了.)&lt;br /&gt;
function反应的是computation 序列集合.自身调用自身, 首先满足这种 order sequence的关系.&lt;br /&gt;
似乎称之为recursive是没问题的. 但一个只能反应sequence, or和sequence等价的&amp;rdquo;recursive&amp;rdquo;.&lt;br /&gt;
又有多大价值呢?recursive意义又有多大呢? 究竟, process的核心是什么呢? 是computation.&lt;br /&gt;
回答显示世界的recursive, 一个画面不断重复自身的画面!&lt;br /&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/6/62/Droste.jpg&#34; alt=&#34;recursion&#34; /&gt;&lt;br /&gt;
我们发现, 他们总是在表达一个完整的个体.&lt;br /&gt;
画面的recursion, 依然在一个画面下.&lt;br /&gt;
function的recursion, 确实表现在一个function内.&lt;br /&gt;
但是从computation角度, recursive的function表述的是computation的连续sequence.&lt;br /&gt;
也就是说recursion是有对象的,对于process是computation是对象.&lt;br /&gt;
对于recursion process, 只有一个computation, 而iteration的process是多个computation的order/sequence集合.&lt;br /&gt;
所以要区分computation和procedure/function. function是computation和sequence集合.他反应的是computation之间的关系.&lt;br /&gt;
并不能反应computation自身内在关系.这也是我们混淆了recursion procedure的原因.&lt;br /&gt;
想想, 集合的复合还是computation sequence. 而computation自身的复合却是一个computation,自身的演变.&lt;br /&gt;
让我们体悟到了function和computation的区别.不同对象的交互operation差异.&lt;br /&gt;
对函数的讨论研究等价与, 讨论computation之间的关系.也就是把function全部替换成了computation.&lt;br /&gt;
所以recursive function就成了不断内嵌sequence computation了, 递归全无.&lt;br /&gt;
computation 内在的组合, 我们讨论了, 相似对象/function的情况.&lt;br /&gt;
如果一个computation内部,是由不同computation组成的.就是非递归的情况,edp叫Conglomeration.合理&lt;br /&gt;
computation内在讨论先停下.&lt;br /&gt;
我们关注computations之间的关系.&lt;br /&gt;
无论是computation的内部还是,computation之间data都成了纽带.&lt;br /&gt;
我们只讨论具有relation的process/computation.&lt;br /&gt;
如果通过共同的操作的data,&lt;br /&gt;
这就是并发的问题, 也就是changes.&lt;br /&gt;
如果共同的data, 不是作为操作的对象知识表达一个relation.&lt;br /&gt;
这是能想到的通过data的processes/computations之间的交互.&lt;br /&gt;
似乎量changes/computation/process 之间的relation, 只能是&lt;br /&gt;
causality and synchronization?(FIXME).&lt;br /&gt;
Causality: Observer(发起者主动, 结果者被动), polling(结果者主动)&lt;br /&gt;
state pattern(发起者的状态), Strategy Pattern(根据对象的选择行为)&lt;br /&gt;
Command Pattern(?decoupling, 貌似就是个Observer不过把状态给了接收者处理),&lt;br /&gt;
Mediator Pattern(decoupling),&lt;br /&gt;
design pattern 关注的是form, syntax.&lt;br /&gt;
研究process/procedure/function/computation 到 data&lt;br /&gt;
 Simple Factory Pattern类似strategy pattern, 根据(接收者类型产生对象)&lt;br /&gt;
Factory Method Pattern类似(Mediator pattern, 将对象生成放给子类)&lt;br /&gt;
没有relation(or relationless)的process联系到一起.&lt;br /&gt;
adapter pattern&lt;br /&gt;
还有一种两个procedure concurrent, 要分开 order sequence化.&lt;br /&gt;
concurrent是design pattern等价的.&lt;br /&gt;
这样design pattern也融合进来了.&lt;br /&gt;
下面应该是SICP的chapter 3. chapter 3依然是对process的form的阐释和补全, 结合pl的语义进行挖掘.&lt;br /&gt;
另一方面结合具体的实现开始kernel相关的(可能涉及到hard ware), 分布式系统理解.&lt;br /&gt;
还有一个link load interpreter这方面的工作.&lt;/p&gt;

&lt;h1 id=&#34;programming:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;programming&lt;/h1&gt;

&lt;p&gt;Abstraction is vital in helping us to cope with the complexity of&lt;br /&gt;
large systems.&lt;br /&gt;
Effective program synthesis also requires organizational principles that&lt;br /&gt;
can guide us in formulating the overall design of a program.&lt;br /&gt;
orgnizational principles应该是architecture pattern.&lt;br /&gt;
我理解的programming的核心应该是modeling, modeling最直接的体现就是architecture pattern.&lt;br /&gt;
相较于design pattern, ap更注重整体?&lt;br /&gt;
不对, 这块不能把ap直接加进来, 逻辑不严密, 不完整.就先叫op吧.&lt;br /&gt;
why modular,we are not creating something.&lt;br /&gt;
It&amp;rsquo;s just about the being.&lt;br /&gt;
abstraction is vital in helping us to cope with the complexity of&lt;br /&gt;
large systems. 通过抽象构造的material层级, 逐级清晰.&lt;br /&gt;
世界以我们所认为的那样方式运行着.&lt;br /&gt;
modular , that is, so that they can be divided “naturally” into co-&lt;br /&gt;
herent parts that can be separately developed and maintained.&lt;br /&gt;
I think it&amp;rsquo;s because of the form.&lt;br /&gt;
model as modeled, action in local.&lt;br /&gt;
object-based approach and the stream-processing approach&lt;br /&gt;
objec is the form of this world. what about stream?&lt;/p&gt;

&lt;p&gt;The difficulties of dealing with objects, change, and identity are a fundamental&lt;br /&gt;
consequence of the need to grapple with time in our computational models.&lt;br /&gt;
Concurrent 增加了更多的难度, 但只是double的关系不是quality上的.&lt;/p&gt;

&lt;p&gt;The stream approach can be most&lt;br /&gt;
fully exploited when we decouple simulated time in our model from the&lt;br /&gt;
order of the events that take place in the computer during evaluation.&lt;br /&gt;
We will accomplish this using a technique known as delayed evaluation .&lt;br /&gt;
stream 解耦了我模拟的时间和event的order.event有orderbut no time.&lt;br /&gt;
We don&amp;rsquo;t care time. 隐约中我们引入了另一个origin of world, time.&lt;br /&gt;
我想还是需要关心时间的只是在stream的form里面不存在时间了.&lt;br /&gt;
leak of causal is abstraction.&lt;br /&gt;
second origin, state, An object is said to “have&lt;br /&gt;
state” if its behavior is influenced by its history.&lt;br /&gt;
We can characterize an object’s state by one or more state vari-&lt;br /&gt;
ables.&lt;br /&gt;
有很多objects, 一些objects可能影响others&amp;rsquo;s state, couple the state variables.&lt;br /&gt;
modular 需要decomposed into computational objects modeling actual objects.&lt;br /&gt;
model指整体如substitution 和environment.&lt;br /&gt;
Each computational object must have its own lo-&lt;br /&gt;
cal state variables describing the actual object’s state.&lt;br /&gt;
我们用computational object model actual, 每个 computational object must have its own local state variales.&lt;br /&gt;
local state variables 描述actual object&amp;rsquo;s state. why local?&lt;/p&gt;

&lt;p&gt;If we choose to model the flow of time in the system by the elapsed time&lt;br /&gt;
in the computer, then we must have a way to construct computational&lt;br /&gt;
objects whose behaviors change as our programs run. In particular, if&lt;br /&gt;
we wish to model state variables by ordinary symbolic names in the&lt;br /&gt;
programming language, then the language must provide an assignment&lt;br /&gt;
operator to enable us to change the value associated with a name.&lt;br /&gt;
从state variables 扯到 assignment operator.&lt;br /&gt;
因为state variables是记录actual objects的state的, state可能随时间改变.&lt;br /&gt;
我们必须改变state variables, 就需要assignment operator.表述一个关系, change.&lt;br /&gt;
一个对象自己的state variables 被称为 local?&lt;br /&gt;
形参?&lt;br /&gt;
massage passing 类似strategy pattern&lt;/p&gt;

&lt;p&gt;From the point of view of one part of a complex process, the other&lt;br /&gt;
parts appear to change with time. They have hidden time-varying local&lt;br /&gt;
state. If we wish to write computer programs whose structure reflects&lt;br /&gt;
this decomposition, we make computational objects (such as bank ac-&lt;br /&gt;
counts and random-number generators) whose behavior changes with&lt;br /&gt;
time. We model state with local state variables, and we model the changes&lt;br /&gt;
of state with assignments to those variables.&lt;br /&gt;
整体上, a process, one part 看另外一面是&lt;br /&gt;
A process hide time-varying local state in modular, but with a changes behavior. encapuslation.&lt;br /&gt;
= changes, variable states&lt;/p&gt;

&lt;p&gt;In general, programming with assignment forces us to carefully consider the relative orders&lt;br /&gt;
of the assignments to make sure that each statement is using the correct&lt;br /&gt;
version of the variables that have been changed. is issue simply does&lt;br /&gt;
not arise in functional programs.&lt;/p&gt;

&lt;p&gt;函数调用对应的是substitution model&lt;br /&gt;
model of evaluation&lt;br /&gt;
environments&lt;br /&gt;
An environment is a sequence of frames . Each frame is a table (pos-&lt;br /&gt;
sibly empty) of bindings , which associate variable names with their cor-&lt;br /&gt;
responding values. (A single frame may contain at most one binding&lt;br /&gt;
for any variable.) Each frame also has a pointer to its enclosing environ-&lt;br /&gt;
ment , unless, for the purposes of discussion, the frame is considered to&lt;br /&gt;
be global . e value of a variable with respect to an environment is the&lt;br /&gt;
value given by the binding of the variable in the first frame in the en-&lt;br /&gt;
vironment that contains a binding for that variable. If no frame in the&lt;br /&gt;
sequence specifies a binding for the variable, then the variable is said to&lt;br /&gt;
be unbound in the environment.&lt;br /&gt;
所以programming实际讨论的是意义的问题.不是某种形式&lt;br /&gt;
3.4&lt;br /&gt;
e central issue lurking beneath the complexity of state, sameness,&lt;br /&gt;
and change is that by introducing assignment we are forced to admit&lt;br /&gt;
time into our computational models. Before we introduced assignment,&lt;br /&gt;
all our programs were timeless, in the sense that any expression that&lt;br /&gt;
has a value always has the same value.&lt;br /&gt;
so time is changing.&lt;br /&gt;
the execution of assignment&lt;br /&gt;
statements delineates&lt;br /&gt;
moments in time when values change. e result of evaluating an ex-&lt;br /&gt;
pression depends not only on the expression itself, but also on whether&lt;br /&gt;
the evaluation occurs before or aer these moments. Building models&lt;br /&gt;
in terms of computational objects with local state forces us to confront&lt;br /&gt;
time as an essential concept in programming.&lt;br /&gt;
we use assignmnet to record state/history.&lt;br /&gt;
We implemented the time variation of the states of the model objects in the computer&lt;br /&gt;
with assignments to the local variables of the model objects.&lt;br /&gt;
必须意识到change被modeled 到assignment.&lt;br /&gt;
model change in terms of sequences&lt;br /&gt;
list sequence is inefficient than the standard iterative style.&lt;br /&gt;
Streams are a clever idea that allows one to use sequence manipu-&lt;br /&gt;
lations without incurring the costs of manipulating sequences as lists.&lt;br /&gt;
With streams we can achieve the best of both worlds: We can formu-&lt;br /&gt;
late programs elegantly as sequence manipulations, while aaining the&lt;br /&gt;
efficiency of incremental computation.&lt;br /&gt;
stream 比list好,elegantly as sequence manipulation, efficiency as incremental computation.&lt;br /&gt;
(delay ⟨ exp ⟩ ) delayed object很有趣, 类似Brandon的enhanced greensight.连接是空, 穿越时空.&lt;/p&gt;

&lt;h1 id=&#34;chapter-4-metalinguistic-abstraction:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Chapter 4 Metalinguistic abstraction&lt;/h1&gt;

&lt;p&gt;It is no exaggeration to regard this as the most fundamental idea in&lt;br /&gt;
programming:&lt;br /&gt;
e evaluator, which determines the meaning of expres-&lt;br /&gt;
sions in a programming language, is just another program.&lt;/p&gt;

&lt;p&gt;SICP, 暂时看到这里.&lt;br /&gt;
programming 是modeling. 看了sicp差不多了.&lt;br /&gt;
interpreter:&lt;br /&gt;
EOPL&lt;br /&gt;
PLAI&lt;br /&gt;
&lt;a href=&#34;http://papl.cs.brown.edu/2016/&#34;&gt;http://papl.cs.brown.edu/2016/&lt;/a&gt;&lt;br /&gt;
另外PL也到这里吧.&lt;br /&gt;
source code写出来如何让run?&lt;br /&gt;
&lt;a href=&#34;https://www.zhihu.com/question/19918532&#34;&gt;弱类型、强类型、动态类型、静态类型语言的区别是什么？&lt;/a&gt;&lt;br /&gt;
c语言是弱类型语言的意思是：它的类型是给编译器看的，让编译器在初次分配内存的时候好分配一个指定大小的空间。在实际操作中你可以随意更改变量的类型（强制或自动）。&lt;br /&gt;
c语言实际是对内存直接操作的一门语言。也就是说如果给你四个字节的内存，你喜欢把它当成int来操作也行，当成四个char操作也行，随你喜欢。&lt;br /&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/430182/is-c-strongly-typed&#34;&gt;Is C strongly typed?&lt;/a&gt;&lt;br /&gt;
I spent a few weeks, about a year ago, trying to sort out the terminology of &amp;ldquo;strongly typed,&amp;rdquo; &amp;ldquo;statically typed,&amp;rdquo; &amp;ldquo;safe,&amp;rdquo; etc., and found it amazingly difficult. As your message points out, the usage of these terms is so various as to render them almost useless. &amp;ndash;Benjamin C. Pierce&lt;/p&gt;

&lt;h1 id=&#34;program-execution:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;program execution&lt;/h1&gt;

&lt;p&gt;run的目的是source code 对应到ISA.&lt;br /&gt;
最容易想到的就是compilation.&lt;br /&gt;
我们把compilation和interpreter当成从source code 到runnable program之间的某种form的变化.&lt;br /&gt;
先略过compilation, 也就是我们现在编译出了最简单形式的一个程序foo 输出hello world用到了一个新lib.&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/631631/&#34;&gt;How programs get run: ELF binaries&lt;/a&gt;&lt;br /&gt;
我们知道了个大概, 那么我们最关心的事, 现在lib和foo都进入内存了, 那么foo是如何调用到lib的函数.&lt;br /&gt;
原来是直接利用address_space 最memory map private就共享了.&lt;br /&gt;
不需要显示维护library的list列表的.&lt;br /&gt;
这样程序就运行起来了.&lt;br /&gt;
硬件可以理解为programs的的interpreter. 理解为model of computations, 由set of changs and state/quantaties and relations 组成.&lt;br /&gt;
所以硬件也可以看成是抽象的! 只不过不能自动.&lt;br /&gt;
研究memory的是时候我们会区分到RAM和SRAM到电容和logic gates.也就是最终的实现.&lt;br /&gt;
这个时候, 我们发现material成了我们理解问题的所必须考虑的方面了.&lt;br /&gt;
也就是说理解到了电路这个层次, 我们就完成了standalone, Completeness的.&lt;br /&gt;
也就是hardware的material完成了我们的认知, 就是认知闭环了.&lt;br /&gt;
所以已经关注很多cpu的和process运行相关的指令, 对于理解lock锁(包括所谓的lockfree无锁)理解到硬件的material也是应该的.&lt;br /&gt;
为什么这么说? 如果不用关心到logic完整的material, 实际上我们不需要理解什么语言啊, computation model. 设计模式啊, 操作系统啊.&lt;br /&gt;
只要脑子想就够了.可是material也是being存在.也是有form的存在.&lt;br /&gt;
所以另外的, 很重要的就是, 我们不是理解hardware本身, 我们理解的是hardware背后的form!&lt;br /&gt;
form的内容就很少了.所以说学习要特别注意两点, form和completeness.&lt;br /&gt;
记住我们关心的不是hardware的material而是hardware的form.&lt;br /&gt;
所以说我们是为了完整complete form而不是material.&lt;br /&gt;
而实际上, 当我意识到所谓的form的存在的时候, hardware本身就成一种自然的延伸了.自然的被包括进学习的范围目标里面了(FIXME).&lt;/p&gt;

&lt;h1 id=&#34;os:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;os&lt;/h1&gt;

&lt;p&gt;所以下面的os, 从一个整体的角度去看待computer, 实质善顺道把os相关, 有助于os理解的hardware的知识&lt;br /&gt;
也包含进来. 下面的思考包含常见的GNU Linux/Unix/Windows这些系统, 和distribute system.&lt;br /&gt;
在更general 的form下思考他们的form.&lt;br /&gt;
我们似乎根本就不在乎是否有hardware参与进来, 我们关注的只是form. 如果form本身是完整的. hardware是不需要的.&lt;br /&gt;
为什么hardware对我们是不需要的, 因为我们所构建的cs的真正基础是纯粹逻辑的(FIXME), 可能有部分内容依赖物理如晶振, 电路的delta时间.&lt;br /&gt;
所以说, 我几乎不需要hardware.&lt;br /&gt;
开始分析os, os包括userspace, application. 睡觉.&lt;br /&gt;
from this &lt;a href=&#34;https://www.bowdoin.edu/~sbarker/teaching/courses/spring14/slides/lec03.pdf&#34;&gt;ppt Last Class: OS and Computer Architecture&lt;/a&gt;&lt;br /&gt;
we know&lt;br /&gt;
| OS Service | Hardware Support |&lt;br /&gt;
 | Protection  | Kernel/user mode, protected instructions, base/limit registers |&lt;br /&gt;
 |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&lt;br /&gt;
 | Interrupts  | Interrupt vectors |&lt;br /&gt;
 | System calls  | Trap instructions and trap vectors |&lt;br /&gt;
 | I/O  | Interrupts and memory mapping |&lt;br /&gt;
 | Scheduling, error recovery,accounting  | Timer |&lt;br /&gt;
 | Synchronization  | Atomic instructions |&lt;br /&gt;
 | Virtual memory  | Translation look-aside buffers |&lt;/p&gt;

&lt;h1 id=&#34;architecture-of-cs:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;architecture of cs&lt;/h1&gt;

&lt;p&gt;Algorithm, TOC, Design Pattern, SICP, Logic, Mathematics&lt;br /&gt;
Programming: language, coding style&lt;br /&gt;
Compile, link, and load or interpret:&lt;br /&gt;
OS&lt;br /&gt;
Arch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Top method&lt;br /&gt;
Abstruction&lt;br /&gt;
Combination&lt;br /&gt;
Virtualization&lt;br /&gt;
Exchange time and space&lt;br /&gt;
Isolation/Modular&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Top goal&lt;br /&gt;
Easy to use&lt;br /&gt;
Efficiency&lt;br /&gt;
Protection&lt;br /&gt;
Reliability&lt;br /&gt;
Security&lt;br /&gt;
Energy-efficiency&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;programming-1:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Programming&lt;/h1&gt;

&lt;p&gt;Programming langueage: c, python, shell&lt;br /&gt;
Programming tools: vim&lt;br /&gt;
Compile Link: ELF&lt;br /&gt;
Testing&lt;br /&gt;
Debuging&lt;br /&gt;
Interface&lt;/p&gt;

&lt;h1 id=&#34;os-1:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;OS&lt;/h1&gt;

&lt;p&gt;Batch processing -&amp;gt; Time-sharing&lt;br /&gt;
Overlaying&lt;br /&gt;
* vm&lt;br /&gt;
There are some great historical papers and books we should read before fully understanding virtual memory.&lt;br /&gt;
&lt;a href=&#34;http://research.microsoft.com/en-us/um/people/gbell/CGB%20Files/Computer%20Structures%20Readings%20and%20Examples%201971.pdf&#34;&gt;Computer Structures: Readings and Examples &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://research.microsoft.com/en-us/um/people/gbell/Computer_Structures_Principles_and_Examples/contents.html&#34;&gt;Computer Structures: Readings and Examples html version&lt;/a&gt;&lt;br /&gt;
Chapter 10 One-level storage system is the first implemention of virtual memory mind.&lt;/p&gt;

&lt;h2 id=&#34;process-management:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Process management&lt;/h2&gt;

&lt;p&gt;进程的定义和PCB，进程和线程的区别，进程的三个基本状态及它们之间的转换关系，进程的同步，竞争和死锁，进程间通信&lt;br /&gt;
###Representation&lt;br /&gt;
* Program memory&lt;br /&gt;
Stack(User/Kernel)&lt;br /&gt;
Heap&lt;br /&gt;
Data segment(data/bss)&lt;br /&gt;
Code segment&lt;br /&gt;
* PCB&lt;br /&gt;
Resource&lt;br /&gt;
Processor Context&lt;br /&gt;
Process state&lt;br /&gt;
###daemonize&lt;br /&gt;
&lt;a href=&#34;http://fixunix.com/unix/84640-daemon-controlling-terminal.html&#34;&gt;http://fixunix.com/unix/84640-daemon-controlling-terminal.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;memory-managerment:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Memory managerment&lt;/h2&gt;

&lt;p&gt;分页式管理，分段式管理，虚拟内存的概念，页面置换算法，内存分配算法&lt;/p&gt;

&lt;h3 id=&#34;paging:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Paging&lt;/h3&gt;

&lt;p&gt;paging is one of the memory management schemes by which&lt;br /&gt;
a computer stores and retrieves data from the secondary storage for use in main memory.&lt;br /&gt;
* Page fault&lt;br /&gt;
###Page replacement algorithm&lt;br /&gt;
OPT&lt;br /&gt;
FIFO&lt;br /&gt;
Second-chance&lt;br /&gt;
LRU&lt;/p&gt;

&lt;h3 id=&#34;x86-memory-segmentation:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;x86 memory segmentation&lt;/h3&gt;

&lt;p&gt;linux 基本不用&lt;br /&gt;
&lt;a href=&#34;http://oss.org.cn/kernel-book/ch02/2.3.7.htm&#34;&gt;Linux中的段&lt;/a&gt;&lt;br /&gt;
* GDT&lt;br /&gt;
* TSS&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Task_state_segment#Use_of_TSS_in_Linux&#34;&gt;Use of TSS in Linux&lt;/a&gt;&lt;br /&gt;
* Linear address&lt;/p&gt;

&lt;h3 id=&#34;virtual-memory-https-en-wikipedia-org-wiki-virtual-memory-paged-virtual-memory:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_memory#Paged_virtual_memory&#34;&gt;Virtual memory&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It maps memory addresses used by a program, called virtual addresses, into physical addresses in computer memory.&lt;br /&gt;
* Logic/Virtual address&lt;br /&gt;
* Page table&lt;/p&gt;

&lt;h3 id=&#34;memory-allocation:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Memory allocation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Buddy memory allocation.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slab allocation/Memory Pool&lt;/p&gt;

&lt;h2 id=&#34;device-management:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Device management&lt;/h2&gt;

&lt;p&gt;中断的概念，中断处理，I/O控制方式，缓冲区管理，设备驱动，磁盘调度和高速缓存&lt;/p&gt;

&lt;h2 id=&#34;network-stack:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Network stack&lt;/h2&gt;

&lt;p&gt;Protocol&lt;/p&gt;

&lt;h2 id=&#34;i-o:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;I/O&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cs.uwm.edu/classes/cs458/Lecture/HTML/ch11s02.html&#34;&gt;Methods for designing a CPU&amp;rsquo;s I/O interface generally fall into one of the following categories:&lt;/a&gt;&lt;br /&gt;
Completely separate memory and I/O. buses DMA?&lt;br /&gt;
Common buses, separate control lines. Port-I/O&lt;br /&gt;
Common buses and control line. Memroy-maped I/O&lt;br /&gt;
###Higher level implemention of I/O&lt;br /&gt;
device or partion of device/memory -&amp;gt; file&lt;br /&gt;
io -&amp;gt; stream&lt;br /&gt;
####&lt;a href=&#34;https://en.wikipedia.org/wiki/Stream_(computing&#34;&gt;stream&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_streams&#34;&gt;Standard streams&lt;/a&gt;&lt;br /&gt;
interface is stdio library or the kernel version.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;codata&lt;/p&gt;

&lt;h3 id=&#34;low-i-o-type:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Low I/O type&lt;/h3&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Programmed I/O/Polling&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DMA&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interrupt I/O&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Channel I/O&lt;/p&gt;

&lt;h3 id=&#34;i-o-scheduling:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;I/O scheduling&lt;/h3&gt;

&lt;p&gt;Elevator algorithm&lt;br /&gt;
###Asynchronous I/O NEED CLEAN&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;synchronous I/O multiplexing and I/O event notification facility&lt;br /&gt;
select/poll/epoll&lt;br /&gt;
For the ease of use, the select loop is implemented as an &lt;em&gt;event loop&lt;/em&gt; with callbacks.&lt;br /&gt;
libevent and libev is a well-designed &lt;em&gt;event loop&lt;/em&gt;.Check shadowsocks for using of libev.&lt;/p&gt;

&lt;h2 id=&#34;file-system:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;File system&lt;/h2&gt;

&lt;p&gt;文件的概念，文件的管理，文件系统&lt;/p&gt;

&lt;h2 id=&#34;system-calls:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;System calls&lt;/h2&gt;

&lt;p&gt;系统调用的概念，系统调用的处理，系统调用类型&lt;br /&gt;
##CPU-device I/O&lt;/p&gt;

&lt;h3 id=&#34;memory-mapped-i-o:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Memory-mapped I/O&lt;/h3&gt;

&lt;p&gt;ioremap: physical address-&amp;gt;logical address, simlar to vmalloc except we need not page.&lt;/p&gt;

&lt;h3 id=&#34;ported-mapped-i-o:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Ported-mapped I/O&lt;/h3&gt;

&lt;p&gt;##Non CPU-device I/O&lt;/p&gt;

&lt;h3 id=&#34;i-o-channels:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;I/O channels&lt;/h3&gt;

&lt;h2 id=&#34;同步与异步io:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;同步与异步IO&lt;/h2&gt;

&lt;p&gt;今天我们要辨析一下同步和异步IO. 我们先解释最基础的概念, 之后用生活化的例子&lt;br /&gt;
完成认知.&lt;br /&gt;
首先是blocking 和 non-blocking这两个概念. 这两个概念实质上是和IO没有关系.&lt;br /&gt;
他们是在说, 比如读数据, 如果没有数据我该怎么办. 也就是说, 他是在IO不存的时候,&lt;br /&gt;
在语义上才是有效, 如果你要读的数据始终存在, 那么你还会考虑阻塞与不阻塞的问题吗?&lt;br /&gt;
那你应该考虑什么? 同步还是异步IO, 倒地什么是同步或者异步呢?&lt;br /&gt;
英文synchronous, syn 和chronous构成, syn是在一起的意思而chronous是时间的意思.&lt;br /&gt;
也就是说在一个时间点上在一起, 那么是谁和谁在意一起呢?其中一个是IO可以肯定, 另外一个&lt;br /&gt;
就是执行IO的发起者, 通常也就是进程. 简单说来这个IO是由进程执行的.&lt;br /&gt;
那么异步IO呢, asynchronous是a + synchronous. a表否定, 我们知道在IO进行的过程中我们的&lt;br /&gt;
进程是始终存在的, 也就是说IO 和进程共享着相同的时间进度, 但是却不在一起.也就是说,&lt;br /&gt;
IO不是由我们的进程完成而是别的进程完成, 是谁呢,是内核线程.&lt;br /&gt;
那么我们就知道只有linux上的aio是符合异步IO的标准, 而多路复用, 如epoll返回是我们和IO是在&lt;br /&gt;
一起, 我们要调用read之类的完成他.&lt;/p&gt;

&lt;h1 id=&#34;physical-computation-phenomenon:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Physical computation phenomenon&lt;/h1&gt;

&lt;p&gt;A Symbolic Analysis of Relay and Switching Circuits&lt;br /&gt;
The Mathematical Theory of Communication&lt;br /&gt;
Given a symbol level, the architecture is the description of the system in&lt;br /&gt;
whatever system-description scheme exists next below the symbol level. - Newell, 1990, p. 81&lt;br /&gt;
&lt;a href=&#34;https://news.ycombinator.com/item?id=9844090&#34;&gt;Ask HN: How to learn about the history of computing?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Control&lt;br /&gt;
Cogwheel control&lt;br /&gt;
electromechanical magnet plugging control&lt;br /&gt;
control sequence points&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;faq:067ec0f34de866d1b35db70204ef4b7d&#34;&gt;Faq&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How does gcc attribute((aligned)) work?&lt;br /&gt;
struct S1 { short f; short f1; short f2;char a; char c;} &lt;strong&gt;attribute&lt;/strong&gt; ((aligned ));&lt;br /&gt;
sizeof S1 = 16 in 64-bit&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;In what situation can unaligned accesss make a kernel panic?&lt;br /&gt;
may be arch/mips/kernel/unaligned.c&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Is the address generated by compiler physical or virtual?&lt;br /&gt;
Graphviz + CodeViz&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The art of programming</title>
      <link>http://firoyang.org/cs/programming/</link>
      <pubDate>Fri, 27 Feb 2015 15:46:14 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/programming/</guid>
      <description>

&lt;h1 id=&#34;reference:5c3da39ff357103852539a99ae0feccc&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Category:Programming_principles&#34;&gt;Programming principles&lt;/a&gt;&lt;br /&gt;
programming principles&lt;br /&gt;
High cohesion low coupling&lt;/p&gt;

&lt;h1 id=&#34;computer-programming:5c3da39ff357103852539a99ae0feccc&#34;&gt;Computer programming&lt;/h1&gt;

&lt;p&gt;编程作为我重要的谋生手段, 有必要审慎的加以考察审视. 程序设计应该包含那些最少的, 必备的, 重要的能力呢?&lt;br /&gt;
&lt;a href=&#34;http://www.cs.princeton.edu/~bwk/tpop.webpage/&#34;&gt;The practice of programming&lt;/a&gt;给出了大概的框架, 但不完整.&lt;br /&gt;
我认为最重要的就是Abstraction and design.&lt;br /&gt;
&lt;a href=&#34;http://www.ccs.neu.edu/home/matthias/HtDP2e/&#34;&gt;How to design programs&lt;/a&gt;还有&lt;a href=&#34;http://sarabander.github.io/sicp/&#34;&gt;SICP&lt;/a&gt;以及Elements of programming.&lt;br /&gt;
其次我们要掌握几门Programming language.&lt;br /&gt;
养成好的Coding style,&lt;br /&gt;
Valid and verification&lt;br /&gt;
Testing&lt;br /&gt;
Debuging&lt;/p&gt;

&lt;h1 id=&#34;coding-style:5c3da39ff357103852539a99ae0feccc&#34;&gt;Coding style&lt;/h1&gt;

&lt;p&gt;比如GNU coding standards, Linux kernel coding style, Shell coding standard&lt;br /&gt;
* Label&lt;br /&gt;
It is considered to be safer that the label reflect what happens at the&lt;br /&gt;
destination, and not the reason for reaching the label. &amp;ndash;Julia&lt;/p&gt;

&lt;h1 id=&#34;verification-and-validation:5c3da39ff357103852539a99ae0feccc&#34;&gt;Verification and validation&lt;/h1&gt;

&lt;p&gt;抽象的知识来自生活经验的总结, 所以学习抽象知识的重要方向是从实践不断总结抽象.&lt;br /&gt;
programming is a goal-oriented activity&lt;br /&gt;
14.4&lt;br /&gt;
Before attempting to solve a problem, make absolutely sure you  what the problem is.&lt;br /&gt;
14.5&lt;br /&gt;
Before developing a program, make precise and refine the pre/postcondition.&lt;br /&gt;
program -&amp;gt;&lt;br /&gt;
{Q} S {R}: predicte, formal notation&lt;br /&gt;
Q: input asseration&lt;br /&gt;
R: output asseration&lt;br /&gt;
predictes -&amp;gt; asseration&lt;br /&gt;
asseration: a predicate placed in a program is called an asseration.&lt;br /&gt;
Proof outline: a program together with an asseration between each pair of statements&lt;br /&gt;
Program specification ⊃ excution ∪ speed ∪ size&lt;br /&gt;
Instances: summation, squre root approximation, sorting&lt;br /&gt;
command-comment ⊃ all input ∪ output&lt;/p&gt;

&lt;h1 id=&#34;debugging:5c3da39ff357103852539a99ae0feccc&#34;&gt;Debugging&lt;/h1&gt;

&lt;p&gt;see debugging.md&lt;/p&gt;

&lt;h1 id=&#34;testing:5c3da39ff357103852539a99ae0feccc&#34;&gt;Testing&lt;/h1&gt;

&lt;p&gt;1.Black-box testing test software function.&lt;br /&gt;
2.White-box testing test software internal logic.&lt;br /&gt;
kvm  &amp;amp; supermin&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The philosophy of debugging</title>
      <link>http://firoyang.org/cs/debugging/</link>
      <pubDate>Fri, 27 Feb 2015 15:46:14 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/debugging/</guid>
      <description>

&lt;h1 id=&#34;reference:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;Reverse engineering&lt;/p&gt;

&lt;h1 id=&#34;debugging-and-bug-types:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;Debugging and Bug types&lt;/h1&gt;

&lt;p&gt;Does anyone can tell me what is debugging? Debugging is &lt;a href=&#34;https://en.wikipedia.org/wiki/Abductive_reasoning#Logic-based_abduction&#34;&gt;Abductive reasoning&lt;/a&gt;.&lt;br /&gt;
The explaination type of a Bug is named Bug type, generally.&lt;br /&gt;
坊间流传这样一句话:&amp;ldquo;能复现的Bug, 都不算Bug.&amp;rdquo;, 言外之意就是能复现就能解.&lt;br /&gt;
可见Bug复现,对解Bug的重要性. &lt;a href=&#34;http://www.opensourceforu.com/2010/10/joy-of-programming-types-of-bugs&#34;&gt;BUG type of Jim Gray&lt;/a&gt;,除了Bohrbug,其他都不太好解.&lt;br /&gt;
The National Vulnerability Database是一个非常有用的网站, 国内鲜少有人提及.尤其是,&lt;br /&gt;
他的Bug分类方式惊艳无比, 逻辑上非常严密, 就好比数学系统, 由公理系统推导而得.&lt;br /&gt;
NVD的Bug分类也采用类似的构建方式.&lt;a href=&#34;https://nvd.nist.gov/cwe.cfm&#34;&gt;CWE Cross Section Mapped into by NVD&lt;/a&gt;&lt;br /&gt;
涵盖了所有常见的的Bug描述, 而且非常专业.大赞!wikipedia的条目就相形见绌了&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_bug#Common_types_of_computer_bugs&#34;&gt;Common types of computer bugs in wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;use after free&lt;/p&gt;

&lt;h1 id=&#34;bugs-in-linux-kernel:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;Bugs in Linux kernel&lt;/h1&gt;

&lt;p&gt;Kernel oops,&lt;a href=&#34;http://neependra.net/kernel/Debugging_Kernel_OOPs_FUDCon2011.pdf&#34;&gt;When the kernel de-references an invalid pointer, it’s not called a segfault – it’s called an ”oops”.&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.av8n.com/computer/htm/kernel-lockup.htm&#34;&gt;kenrel lockup&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://fedoraproject.org/wiki/KernelBugClassification&#34;&gt;oops, WARN_ON, or kernel panic&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/oops-tracing.txt&#34;&gt;kernel oops&lt;/a&gt;/warn/panic&lt;/p&gt;

&lt;h1 id=&#34;general-debugging-steps:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;General debugging steps&lt;/h1&gt;

&lt;p&gt;Debugging的逻辑过程是&lt;a href=&#34;https://en.wikipedia.org/wiki/Abductive_reasoning#Logic-based_abduction&#34;&gt;Abductive reasoning&lt;/a&gt;. 我们以此进行推导.&lt;br /&gt;
T: Theory 也就是我们的background, cs的知识技术, 出问题的程序与代码.&lt;br /&gt;
O: Observations 是Bug发生的现场以及相应的log, 现象.&lt;br /&gt;
E: Explanation 是最终定位的结论.&lt;br /&gt;
E ⊆ T; O ⊆ T; E ⊃ (E ∩ O);&lt;br /&gt;
if E = (E ∩ O); then debugging is done.&lt;br /&gt;
T, E 与 O理论上都是从∅开始,且O =&amp;gt; E;&lt;br /&gt;
E: ∅ -&amp;gt; Bug type(可能经过是多种Bug types的过渡状态) -&amp;gt; Explanation&lt;br /&gt;
很多时候O也会使T扩大.所以O成为debugging的关键.&lt;br /&gt;
下面严格区分T 和 O. 我们得到O就要不断地结合T进行理性分析.&lt;br /&gt;
&amp;gt; Another perespective,&lt;br /&gt;
&amp;gt; the process of debugging is use O to minimize T to E instance.&lt;br /&gt;
&amp;gt; T is solutions space, E &lt;a href=&#34;https://nvd.nist.gov/cwe.cfm#cweIdEntry-CWE-1&#34;&gt;locates&lt;/a&gt; in T. O is the address to find E.&lt;/p&gt;

&lt;p&gt;对于Software Bug而言, Debugging可以认为是从observations到source code再到人的逻辑的过程.&lt;br /&gt;
observations -&amp;gt; source code -&amp;gt; mind logic&lt;br /&gt;
基于NVD的CWE我们可知, 收集observations 可能是development和deployment的各个节点.&lt;/p&gt;

&lt;h3 id=&#34;get-observations:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;Get observations&lt;/h3&gt;

&lt;p&gt;首先我们要理清中间的各个流程, 以及相关的observations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;coding&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;compilation&lt;br /&gt;
make kernel/sched.s V=1&lt;br /&gt;
readelf, objdump&lt;br /&gt;
c++filt&lt;br /&gt;
addr2line -f -C -a 0xxxx -e ooo.bin&lt;br /&gt;
./scripts/decodecode &amp;lt; Oops.txt&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;load software&lt;br /&gt;
LD_TRACE_LOADED_OBJECTS=1 git&lt;br /&gt;
ldd /usr/bin/git&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;software running&lt;br /&gt;
&amp;gt; #define debugme(fmt, args&amp;hellip;) do{FILE *fdebug=fopen(&amp;ldquo;/tmp/d.log&amp;rdquo;, &amp;ldquo;a+&amp;rdquo;); \&lt;br /&gt;
&amp;gt; fprintf(fdebug,&amp;ldquo;%s,%s,%d:&amp;ldquo;fmt, &lt;strong&gt;TIME&lt;/strong&gt;, &lt;strong&gt;FUNCTION&lt;/strong&gt;, &lt;strong&gt;LINE&lt;/strong&gt;, ##args);fclose(fdebug);} while(0)&lt;br /&gt;
lsof, ltrace, strace, bash -x, coredump&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kernel specific&lt;br /&gt;
putstr early_printk vs printk pr_debug vs dev_debug dump_stack&lt;br /&gt;
Linux serial-port driver is interrupt driven, if irq-off console will not work!&lt;br /&gt;
how to use serial-port addr&lt;br /&gt;
ioctl/netlink, SysRq, ftrace expect,kgtp, lockdep, kdump, kgdboc&lt;br /&gt;
CONFIG_DYNAMIC_DEBUG, &lt;debugfs&gt;/dynamic_debug/control&lt;br /&gt;
print signal This is just a hiwifi wonderful kernel patch #931&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;network specific&lt;br /&gt;
tcpdump netstat iptables wireshark&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;u-boot&lt;br /&gt;
print_tlb&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;make specific&lt;br /&gt;
-s, -n, -p, &amp;ndash;warn-undefined-variables&lt;br /&gt;
$(warning &amp;hellip;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;有的类型的Bug会阻止我们收集observations&lt;br /&gt;
这时候就要增加observations,让我们能收集到. 比如use after free, buffer errors.&lt;br /&gt;
这时要扩大目标struct的大小, 把observations加进去.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;software imediately stop&lt;br /&gt;
Use atexit() register a stackdump or a wrapped print&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;inference:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;Inference&lt;/h1&gt;

&lt;p&gt;From observatons to source code/mind&lt;br /&gt;
追BUG实际上就是, 找关联度最高的.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tips&lt;br /&gt;
If an page oops close to zero, for example 0xfffffff4&lt;br /&gt;
It maybe ERR_PTR(-12);&lt;br /&gt;
&lt;a href=&#34;http://www.stlinux.com/devel/debug/jtag/build?q=node/82&#34;&gt;Tips on debugging optimized code&lt;/a&gt;&lt;br /&gt;
code reordering inlining Optimized-away variables Tailcall optimization&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;oops&lt;br /&gt;
From ASM to c language&lt;br /&gt;
&lt;a href=&#34;http://yarchive.net/comp/linux/oops_decoding.html&#34;&gt;lkml-Linus-Al-Viro-oops-debug&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;asm&lt;/strong&gt;(), 常量, loop codes format, char *, ip&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;一些比较通用的调试工具:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;一些比较通用的调试工具&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;gdb&lt;br /&gt;
gdb vmlinux /proc/kcore&lt;br /&gt;
p jiffies_64&lt;br /&gt;
text_addr=/sys/module/char-read-write/sections/.text&lt;br /&gt;
add-symbol-file /home/nkhare/char-read-write.ko $text_addr&lt;br /&gt;
print &amp;amp;((struct kmem_cache *)0)-&amp;gt;offset&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;anti-debugging:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;Anti-debugging&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Syntax checking&lt;br /&gt;
gcc -Wall&lt;br /&gt;
bash -n&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;static code analysis&lt;br /&gt;
smatch&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;bug-made-by-me:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;BUG made by me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;print_signal_info wrong pritk parameters position&lt;br /&gt;
    printk(KERN_NOTICE &amp;ldquo;K %d : %d -&amp;gt; %s %d %s %d\n&amp;rdquo;, sig, q-&amp;gt;info.si_code,&lt;br /&gt;
            ss&lt;a href=&#34;http://www.opensourceforu.com/2010/10/joy-of-programming-types-of-bugs&#34;&gt;2&lt;/a&gt;, ss&lt;a href=&#34;https://nvd.nist.gov/cwe.cfm&#34;&gt;3&lt;/a&gt;, task_tgid_vnr(r_t), task_tgid_vnr(r_p));&lt;br /&gt;
Watch compile warning info can be avoid of this bug.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;spin_lock(sighand) invoke down_sem and cond_resched&amp;hellip;&lt;br /&gt;
__send_signal()&lt;/p&gt;

&lt;h1 id=&#34;examples:9df68a0e9ceffd0ef168c5e5e50c9f94&#34;&gt;Examples&lt;/h1&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;timer_list-&amp;gt;function = NULL&lt;br /&gt;
我前几天定位了一个Softirq中timer corruption的问题, 现象是timer func是个非法地址.&lt;br /&gt;
首先, 一下子不能确认是由那种Bug type导致的.可能是Improper Restriction of Operations&lt;br /&gt;
within the Bounds of a Memory Buffer 也可能是Use after free. 所以此时debug的关键所在&lt;br /&gt;
就是收集observations,也就是function的名字, 而我遇到的这个问题timer 被完全写坏了.&lt;br /&gt;
可以用ftrace收集所有timer 的地址和function, 再从oops里面得到timer地址,回头找ftrace&lt;br /&gt;
log中记录的function, 从而定位问题. 稍后介绍, 如何通过expect抓屏幕log.&lt;br /&gt;
这个方法没成功, 时候分析知道是因为panic的瞬间出问题的timer的地址和function没来得及&lt;br /&gt;
记录到ftrace.怎么办? 我直接说了, 我想到一个办法, 把timer的空间增大, 增大的空间用来&lt;br /&gt;
保存function,在oops把这块内存打出来. 此法非常有用, timer的function一下子就找到了, 进而&lt;br /&gt;
确认了问题是use after free. 非常开心:-)这里的解释了如何收集observations的技巧.对待use&lt;br /&gt;
after free的问题是够了, 以后用到这类问题基本可以妙解了.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;module text address&lt;br /&gt;
cat /sys/module/wmi/sections/.text&lt;br /&gt;
cat /proc/modules | grep wmi&lt;br /&gt;
int bss_var;&lt;br /&gt;
static int hello_init(void)&lt;br /&gt;
{printk(KERN_ALERT &amp;ldquo;Text location .text(Code Segment):%p\n&amp;rdquo;,hello_init);&lt;br /&gt;
static int data_var=0;&lt;br /&gt;
printk(KERN_ALERT &amp;ldquo;Data Location .data(Data Segment):%p\n&amp;rdquo;,&amp;amp;data_var);&lt;br /&gt;
printk(KERN_ALERT &amp;ldquo;BSS Location: .bss(BSS Segment):%p\n&amp;rdquo;,&amp;amp;bss_var);}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The programming language</title>
      <link>http://firoyang.org/cs/pl/</link>
      <pubDate>Fri, 27 Feb 2015 15:46:14 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/pl/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.yinwang.org/blog-cn/2016/03/31/no-longer-pl&#34;&gt;我为什么不再做PL人&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;∅ ⊢ pl&lt;br /&gt;
scope: The set of expressions for which a binding defines a name is called the scope of that name.&lt;/p&gt;

&lt;h1 id=&#34;reference:9e7166b21e1cf7669599f36f84659158&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zhihu.com/question/21843639&#34;&gt;http://www.zhihu.com/question/21843639&lt;/a&gt;&lt;br /&gt;
貌似正则是type 3, c是type2, 范式角度我现在不好理解, 缺乏语言学的知识.&lt;br /&gt;
Programming Language Pragmatics 3rd&lt;br /&gt;
C11&lt;br /&gt;
C Traps and Pitfalls&lt;br /&gt;
Expert C Programming&lt;/p&gt;

&lt;h1 id=&#34;contents:9e7166b21e1cf7669599f36f84659158&#34;&gt;Contents&lt;/h1&gt;

&lt;p&gt;Programming language theory&lt;br /&gt;
Programming language&lt;/p&gt;

&lt;h1 id=&#34;programming-language-theory:9e7166b21e1cf7669599f36f84659158&#34;&gt;Programming language theory&lt;/h1&gt;

&lt;p&gt;What is formal language and the relationg between fl and pl?&lt;br /&gt;
Language primitive&lt;/p&gt;

&lt;h2 id=&#34;semantics:9e7166b21e1cf7669599f36f84659158&#34;&gt;Semantics&lt;/h2&gt;

&lt;h1 id=&#34;c:9e7166b21e1cf7669599f36f84659158&#34;&gt;C&lt;/h1&gt;

&lt;p&gt;我们还是从使用的角度来看c 语言;&lt;br /&gt;
c语言自身重要基础性质, 我们需要了解.&lt;br /&gt;
除此之外, 我们还要了解一些重要的标准库函数.&lt;br /&gt;
知道这些, 我们就能用c语言.&lt;/p&gt;

&lt;h2 id=&#34;type:9e7166b21e1cf7669599f36f84659158&#34;&gt;Type&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Object type and function type&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Object &amp;ndash; void, scalar,aggregate types, composite&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Scalar type &amp;ndash; Arithmetic types and pointer types&lt;br /&gt;
&lt;a href=&#34;http://www.techopedia.com/definition/16441/scalar&#34;&gt;What does Scalar mean?&lt;/a&gt;&lt;br /&gt;
scalar 词源上由scale演化而来, scalar type来自scalar processor and vector processor.&lt;br /&gt;
超标量也是来自这里concurrent SISD =&amp;gt;MIMD 所谓的流水线.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arithmetic type &amp;ndash; Integer and floating types&lt;/p&gt;

&lt;h2 id=&#34;incomplete-and-complete:9e7166b21e1cf7669599f36f84659158&#34;&gt;Incomplete and complete&lt;/h2&gt;

&lt;p&gt;void; struct s; union u;&lt;/p&gt;

&lt;h2 id=&#34;conversion:9e7166b21e1cf7669599f36f84659158&#34;&gt;Conversion&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;only effect to scalar type data&lt;br /&gt;
error: conversion to non-scalar type requested&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;无符号数 转换成upper rank的有符号数, 还是无符号数, 不管最初是-1!&lt;br /&gt;
unsigned int i = 1; long f = -10;if ( i &amp;gt; f ) printf(&amp;ldquo;ok\n&amp;rdquo;); true 证明确实usigned 向long转换了.&lt;br /&gt;
unsigned int i = -3; long f = -5u;if ( i &amp;gt; f ) printf(&amp;ldquo;ok\n&amp;rdquo;); true&lt;br /&gt;
c11上是ok的!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;做signed 和unsigned 貌似both convert to unsigned gcc才给警告, 否则不给即便是signed和unsigned比较.&lt;/p&gt;

&lt;h2 id=&#34;lvalue-rvalue-modfiable-rvalue:9e7166b21e1cf7669599f36f84659158&#34;&gt;lvalue rvalue modfiable rvalue&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c&#34;&gt;Understanding lvalues and rvalues in C and C++&lt;/a&gt;&lt;br /&gt;
If a variable/expression  has a address, it&amp;rsquo;s of lvalue.&lt;/p&gt;

&lt;h2 id=&#34;array-decay:9e7166b21e1cf7669599f36f84659158&#34;&gt;Array decay&lt;/h2&gt;

&lt;p&gt;数组退化的初衷, 可能是K&amp;amp;R当年计算资源紧缺, 导致不允许函数传值copy数组内容.&lt;br /&gt;
总之标准委员会介入之前就决定.&lt;br /&gt;
&lt;a href=&#34;http://bbs.chinaunix.net/thread-1031622-1-1.html&#34;&gt;[C] [原创]数组与指针&amp;mdash;都是&amp;rdquo;退化&amp;rdquo;惹的祸&lt;/a&gt;&lt;br /&gt;
关于char *s错误声明的讲解不错!&lt;br /&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/17752978/exception-to-array-not-decaying-into-a-pointer&#34;&gt;Exception to array not decaying into a pointer?&lt;/a&gt;&lt;br /&gt;
在c11 6.3.2.1 Lvalues, arrays, and function designators第3点说明了&lt;br /&gt;
array不会退化的4种场景. Except when it is&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the operand of the sizeof operator,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the _Alignof operator, or the&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;unary &amp;amp; operator, or&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is a string literal used to initialize an array, an expression that has type&lt;br /&gt;
‘‘array of type’’ is converted to an expression with type ‘‘pointer to type’’&lt;br /&gt;
that points to the initial element of the array object and is not an lvalue.&lt;br /&gt;
If the array object has register storage class, the behavior is undefined.&lt;br /&gt;
这4种场景之外, 那么array名退化的结果是pointer.&lt;br /&gt;
这个pointer和我们最常用的pointer如int *p有什么区别呢?&lt;br /&gt;
首先array decay是type上的转化array -&amp;gt; pointer.&lt;br /&gt;
其次数组名原来是lvalue -&amp;gt; not an lvalue更谈不上modifiable.&lt;br /&gt;
type: tyepof(array[0]) *&lt;br /&gt;
value: &amp;amp;array[0] or array&lt;br /&gt;
property: not lvalue&lt;br /&gt;
当然这只是c11上的说明, 我们只要明白为什么不能修改一个decay数组名就行了.&lt;br /&gt;
实现的个人猜测是: 根据lvalue的定义decay后数组名还是lvalue, 只不过一直都不是modifiable.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为什么作为函数形参的数组名可以++, 而作为变量的数组名就不可以.&lt;br /&gt;
因为形参数组名被当初pointer处理modifiable lvalue, 而实参数组名只是传值而已.&lt;br /&gt;
而普通数组名是一个lvalue,不能修改.&lt;/p&gt;

&lt;h3 id=&#34;why-innermost-dimension-can-be-omit-in-array:9e7166b21e1cf7669599f36f84659158&#34;&gt;Why innermost dimension can be omit in array&lt;/h3&gt;

&lt;p&gt;用不到.&lt;br /&gt;
In essence, all arrays in C are one-dimensional.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because the array will decay to pointer and to calculate offset to&lt;br /&gt;
the elements of the array you do not need to know the innermost dimension.&lt;/p&gt;

&lt;p&gt;Compiler has to know by how much to increment the pointer when&lt;br /&gt;
indexing on the first dimension for example. So if an int array is named a,&lt;/p&gt;

&lt;h2 id=&#34;integer-promotion:9e7166b21e1cf7669599f36f84659158&#34;&gt;Integer Promotion&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.idryman.org/blog/2012/11/21/integer-promotion/&#34;&gt;Deep C: Integer Promotion&lt;/a&gt;&lt;br /&gt;
* &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/fc9te331.aspx&#34;&gt;Integral Promotions&lt;/a&gt;&lt;br /&gt;
0xF int&lt;br /&gt;
0xFFFFFFFF unsigned int&lt;/p&gt;

&lt;h2 id=&#34;scopes-of-identifiers:9e7166b21e1cf7669599f36f84659158&#34;&gt;Scopes of identifiers&lt;/h2&gt;

&lt;p&gt;For each different entity that an identifier designates, the identifier is visible (i.e., can be&lt;br /&gt;
used) only within a region of program text called its scope.&lt;br /&gt;
* four kinds of scopes: function, file, block, and function prototype&lt;br /&gt;
If the declarator or type specifier that declares the identifier&lt;br /&gt;
appears outside of any block or list of parameters, the identifier has file scope, which&lt;br /&gt;
terminates at the end of the translation unit.&lt;/p&gt;

&lt;p&gt;If the declarator or type specifier that&lt;br /&gt;
declares the identifier appears inside a block or within the list of parameter declarations in&lt;br /&gt;
a function definition, the identifier has block scope, which terminates at the end of the&lt;br /&gt;
associated block.&lt;/p&gt;

&lt;p&gt;If the declarator or type specifier that declares the identifier appears&lt;br /&gt;
within the list of parameter declarations in a function prototype (not part of a function&lt;br /&gt;
definition), the identifier has function prototype scope, which terminates at the end of the&lt;br /&gt;
function declarator.&lt;/p&gt;

&lt;p&gt;If an identifier designates two different entities in the same name&lt;br /&gt;
space, the scopes might overlap.&lt;/p&gt;

&lt;h2 id=&#34;linkages-of-identifiers:9e7166b21e1cf7669599f36f84659158&#34;&gt;linkages of identifiers&lt;/h2&gt;

&lt;p&gt;An identifier declared in different scopes or in the same scope more than once can be&lt;br /&gt;
made to refer to the same object or function by a process called linkage.&lt;br /&gt;
* There are three kinds of linkage: external, internal, and none.&lt;br /&gt;
* There is no linkage between different identifiers.&lt;br /&gt;
* external linkage&lt;br /&gt;
In the set of translation units and libraries that constitutes an entire program, each&lt;br /&gt;
declaration of a particular identifier with external linkage denotes the same object or&lt;br /&gt;
function. &amp;ndash;c11&lt;/p&gt;

&lt;p&gt;If the name has external linkage,&lt;br /&gt;
the entity that name denotes may be referred to from another translation unit&lt;br /&gt;
using a distinct declaration for that same name,&lt;br /&gt;
and from other scopes within the same translation unit using distinct declarations. &amp;ndash;wikipedia&lt;br /&gt;
* Internal linkage&lt;br /&gt;
Within one translation unit, each declaration of an identifier with internal&lt;br /&gt;
linkage denotes the same object or function. &amp;ndash;c11&lt;/p&gt;

&lt;p&gt;Were the name given internal linkage,&lt;br /&gt;
such a declaration would denote a distinct entity, although using the same name,&lt;br /&gt;
but its entity could be referred to by distinct declarations within the same translation unit.  &amp;ndash;wikipedia&lt;br /&gt;
* No linkage&lt;br /&gt;
Each declaration of an identifier with no linkage denotes a unique entity. &amp;ndash;c11&lt;br /&gt;
A name that has no linkage at all cannot be referred to from declarations in different scopes,&lt;br /&gt;
not even from within the same translation unit. &amp;ndash;wikipedia&lt;/p&gt;

&lt;h2 id=&#34;name-spaces-of-identifiers:9e7166b21e1cf7669599f36f84659158&#34;&gt;Name spaces of identifiers&lt;/h2&gt;

&lt;h2 id=&#34;storage-durations-of-objects:9e7166b21e1cf7669599f36f84659158&#34;&gt;Storage durations of objects&lt;/h2&gt;

&lt;p&gt;An object has a storage duration that determines its lifetime.&lt;br /&gt;
There are four storage durations: static, thread, automatic, and allocated.&lt;br /&gt;
The lifetime of an object is the portion of program execution during which storage is&lt;br /&gt;
guaranteed to be reserved for it.&lt;br /&gt;
In book 21st Century C, it was named memory mode.&lt;br /&gt;
* static storage duration&lt;br /&gt;
An object whose identifier is declared without the storage-class specifier _Thread_local,&lt;br /&gt;
and either with external or internal linkage or with the storage-class specifier static(for no linkage &amp;ndash;firo),&lt;br /&gt;
has static storage duration.&lt;/p&gt;

&lt;p&gt;Its lifetime is the entire execution of the program and its stored value is initialized only once,&lt;br /&gt;
prior to program startup.&lt;br /&gt;
* automatic storage duration&lt;br /&gt;
An object whose identifier is declared with no linkage and without the storage-class&lt;br /&gt;
specifier static has automatic storage duration, as do some compound literals.&lt;br /&gt;
* alloced storage duration&lt;br /&gt;
The lifetime of an allocated object extends from the allocation until the deallocation.&lt;br /&gt;
* Thread storage duration&lt;br /&gt;
details in c11&lt;/p&gt;

&lt;h2 id=&#34;alignment-of-objects:9e7166b21e1cf7669599f36f84659158&#34;&gt;Alignment of objects&lt;/h2&gt;

&lt;p&gt;An alignment is an implementation-defined integer value representing the number of bytes between&lt;br /&gt;
successive addresses at which a given object can be allocated.&lt;br /&gt;
More deatils in cs.md&lt;/p&gt;

&lt;h2 id=&#34;declarations:9e7166b21e1cf7669599f36f84659158&#34;&gt;Declarations&lt;/h2&gt;

&lt;p&gt;A declaration specifies the interpretation and attributes of a set of identifiers.&lt;br /&gt;
A definition of an identifier is a declaration for that identifier that:&lt;br /&gt;
for an object, causes storage to be reserved for that object;&lt;br /&gt;
for a function, includes the function body;&lt;br /&gt;
for an enumeration constant, is the (only) declaration of the identifier;&lt;br /&gt;
for a typedef name, is the first (or only) declaration of the identifier.&lt;br /&gt;
The declaration specifiers consist of a sequence of specifiers that indicate the linkage,&lt;br /&gt;
storage duration, and part of the type of the entities that the declarators denote.&lt;/p&gt;

&lt;h2 id=&#34;marco:9e7166b21e1cf7669599f36f84659158&#34;&gt;Marco&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/huyansoft/article/details/2484297&#34;&gt;如果#操作符出现在对象宏的替换列表中,则仅作为一个普通字符,不具有下述含义&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;expressions:9e7166b21e1cf7669599f36f84659158&#34;&gt;Expressions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cast&lt;br /&gt;
A cast does not yield an lvalue.&lt;/p&gt;

&lt;h2 id=&#34;lexical-element:9e7166b21e1cf7669599f36f84659158&#34;&gt;Lexical element&lt;/h2&gt;

&lt;h3 id=&#34;character-constants:9e7166b21e1cf7669599f36f84659158&#34;&gt;Character constants&lt;/h3&gt;

&lt;p&gt;An integer character constant has type int.&lt;/p&gt;

&lt;h2 id=&#34;lexical-pitfall:9e7166b21e1cf7669599f36f84659158&#34;&gt;lexical pitfall&lt;/h2&gt;

&lt;h2 id=&#34;greedy-lexical-analysis:9e7166b21e1cf7669599f36f84659158&#34;&gt;Greedy lexical analysis&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Write tokens with blank!&lt;br /&gt;
x = y/&lt;em&gt;p;  /&lt;/em&gt; oops, hidden error.*/&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Associative&lt;br /&gt;
You donot need to remember it! Just use it!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Precedence&lt;br /&gt;
Need to remember, but if you not sure, parenthess.&lt;/p&gt;

&lt;h2 id=&#34;inline-和宏的区别:9e7166b21e1cf7669599f36f84659158&#34;&gt;inline 和宏的区别&lt;/h2&gt;

&lt;p&gt;inline的好处与坏处&lt;br /&gt;
没有调用的开销效率很高, 但是调试代码复杂了, 内链函数的实现是拷贝副本消耗内存.&lt;br /&gt;
inline有类型检测, 宏没有.&lt;/p&gt;

&lt;h2 id=&#34;c-standard-library:9e7166b21e1cf7669599f36f84659158&#34;&gt;C standard library&lt;/h2&gt;

&lt;h2 id=&#34;faq:9e7166b21e1cf7669599f36f84659158&#34;&gt;FAQ&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logical operation with signed value? x86!&lt;br /&gt;
int c = 0xFFFFFFFF;  int d = c &amp;gt;&amp;gt; 31; =&amp;gt; d == f;&lt;br /&gt;
unsigned c = 0xFFFFFFFF;  int d = c &amp;gt;&amp;gt; 31; d!= f;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;shift beyond bits long?&lt;br /&gt;
c &amp;gt;&amp;gt; 296 == c &amp;gt;&amp;gt; 8&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;变量同名不同类型不同文件, 通过extern, 否则就是multiple definition&lt;br /&gt;
这是c语言最为迷糊的地方.简单说来类似union, 具体我也不清楚.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所有名字引用同一个object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不同文件中不同类型的sizeof和当前文件类型一直.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;c-standard-library-1:9e7166b21e1cf7669599f36f84659158&#34;&gt;C standard library&lt;/h1&gt;

&lt;p&gt;NULL?&lt;/p&gt;

&lt;h2 id=&#34;string-handling:9e7166b21e1cf7669599f36f84659158&#34;&gt;String handling&lt;/h2&gt;

&lt;p&gt;kernel/lib/string.c&lt;br /&gt;
* Copying functions&lt;br /&gt;
memcpy: dest&lt;br /&gt;
memmove: dest&lt;br /&gt;
strcpy: dest, 拷贝\0&lt;br /&gt;
strncpy: dest, if src_len &amp;gt;= n; 0 NULL, if src _len &amp;lt; n; (n - len) NULL;&lt;br /&gt;
strlcpy: src_len, mini(n -1, src_len -1) + \0, src_len 用你返回啊!&lt;br /&gt;
* Concatenation functions&lt;br /&gt;
strcat: dest, overwrite dest \0 with src util src \0&lt;br /&gt;
strncat: dest, 末尾一定有\0&lt;br /&gt;
* Comparison functions&lt;br /&gt;
memcmp: 差值,&lt;br /&gt;
strcmp: -1, 0, 1, 如果整个s1都比完了NULL or &amp;ndash;n ==0 for strncmp, return 0&lt;br /&gt;
* Search functions&lt;br /&gt;
memchr, NULL or p;&lt;br /&gt;
strchr,ditto, 到\0返回NUll&lt;br /&gt;
strrchr,ditto, last occurence.&lt;br /&gt;
strspn: s1开始有多少在s2中.&lt;br /&gt;
strcspn: s1开始有多少不在s2中.&lt;br /&gt;
strpbrk: s2中第一次出现的位置&lt;br /&gt;
strstr: 找子串, 用memcmp&lt;/p&gt;

&lt;h1 id=&#34;asm-in-c-code:9e7166b21e1cf7669599f36f84659158&#34;&gt;ASM in c code&lt;/h1&gt;

&lt;p&gt;c语言嵌入汇编这不是c语言的特性是编译器的feature.&lt;br /&gt;
&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C&#34;&gt;How to Use Inline Assembly Language in C Code&lt;/a&gt;&lt;br /&gt;
#MIPS&lt;br /&gt;
bdi 4, 8 delay solt&lt;br /&gt;
mips instruction size is fixed, 32bit, 4byte.&lt;br /&gt;
instruction address:  instrction in hex formate    instruction in string formate, 260&lt;br /&gt;
8002c28c:   8c440104    lw  a0,260(v0)&lt;br /&gt;
##ASM codes Fixme&lt;br /&gt;
move &amp;lt;-&lt;br /&gt;
j long jump&lt;br /&gt;
b short jump&lt;br /&gt;
a0, a1&amp;hellip;99% is parameters.&lt;br /&gt;
##lwr &amp;amp; lwl&lt;br /&gt;
load a word&lt;br /&gt;
different with endianess&lt;br /&gt;
register 63&amp;hellip;..32&amp;hellip;&amp;hellip;0&lt;br /&gt;
big endian: lwl high bits in b + 0&lt;br /&gt;
little endian: lwl high in b + off&lt;br /&gt;
向中心&lt;/p&gt;

&lt;h1 id=&#34;x86:9e7166b21e1cf7669599f36f84659158&#34;&gt;x86&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://heather.cs.ucdavis.edu/~matloff/50/PLN/lock.pdf&#34;&gt;Intel’s ‘cmpxchg’ instruction&lt;/a&gt;&lt;br /&gt;
eax: e stand for 32&lt;br /&gt;
rax: r stand for 64&lt;br /&gt;
&lt;a href=&#34;http://x86.renejeschke.de/html/file_module_x86_id_159.html&#34;&gt;lock prefix in x86&lt;/a&gt;&lt;br /&gt;
the lock prefix make instruction atomic!&lt;/p&gt;

&lt;h2 id=&#34;registers-purpose:9e7166b21e1cf7669599f36f84659158&#34;&gt;registers&amp;rsquo; purpose&lt;/h2&gt;

&lt;h2 id=&#34;register:9e7166b21e1cf7669599f36f84659158&#34;&gt;Register&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;gs&lt;br /&gt;
The linux kernel uses GS to access cpu-specific memory.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;gdtr&lt;br /&gt;
GDT&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tr&lt;br /&gt;
TSS addressing&lt;br /&gt;
#Wildcards&lt;br /&gt;
&lt;a href=&#34;http://whatis.techtarget.com/definition/wildcard-character&#34;&gt;A wildcard character is a type of meta character&lt;/a&gt;&lt;br /&gt;
##Type&lt;/p&gt;

&lt;h3 id=&#34;standard-wildcards-globbing-patterns:9e7166b21e1cf7669599f36f84659158&#34;&gt;Standard Wildcards (globbing patterns)&lt;/h3&gt;

&lt;p&gt;File and directory patterns&lt;br /&gt;
?: must stand for a character&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Regular expression&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SQL&lt;br /&gt;
#Shell&lt;/p&gt;

&lt;h2 id=&#34;test:9e7166b21e1cf7669599f36f84659158&#34;&gt;test&lt;/h2&gt;

&lt;h3 id=&#34;n-is-not-equivalent-to-z:9e7166b21e1cf7669599f36f84659158&#34;&gt;-n is not equivalent to ! -z&lt;/h3&gt;

&lt;p&gt;Be caution! just juse -z and !-z&lt;/p&gt;

&lt;h2 id=&#34;ls:9e7166b21e1cf7669599f36f84659158&#34;&gt;ls&lt;/h2&gt;

&lt;p&gt;-l: show hardlinks of file/dir in 2nd column&lt;br /&gt;
drwsrwsr-T: T stand for sticky bit no other execution bit&lt;br /&gt;
##eval&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create variable name&lt;br /&gt;
&lt;strong&gt;var=&amp;ldquo;name&amp;rdquo;&lt;br /&gt;
eval &amp;ldquo;export &amp;ndash; \&amp;ldquo;$&lt;/strong&gt;var=firo\&amp;ldquo;&amp;rdquo;&lt;br /&gt;
set | grep firo&lt;br /&gt;
__var=&amp;lsquo;name&amp;rsquo;&lt;br /&gt;
bbb=&amp;lsquo;firo&amp;rsquo;&lt;br /&gt;
##expr&lt;br /&gt;
expr &amp;ldquo;$name&amp;rdquo; : &amp;lsquo;(.*).conf&amp;rsquo;&lt;br /&gt;
##find&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;find symbols in object&lt;br /&gt;
find . -name &amp;lsquo;a.out&amp;rsquo; -exec nm -D {} \; -print&lt;br /&gt;
find . -name &amp;lsquo;*.o&amp;rsquo; -print0 | xargs -0 nm -A | egrep &amp;lsquo; (i|y)$&amp;rsquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;rm&lt;br /&gt;
find . -name ‘your_pattern*’ -exec rm -f {} \;&lt;br /&gt;
find . -name ‘your_pattern*’ -delete&lt;/p&gt;

&lt;h2 id=&#34;grep:9e7166b21e1cf7669599f36f84659158&#34;&gt;grep&lt;/h2&gt;

&lt;p&gt;-c: count of match&lt;br /&gt;
##pipe&lt;br /&gt;
find . -type d | while read d; do cnt=$(ls $d | grep tgz | wc -l); echo &amp;ldquo;$cnt $d&amp;rdquo;; done | sort -n &amp;gt;stat&lt;br /&gt;
#AWK&lt;br /&gt;
netstat -n | awk &amp;lsquo;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&amp;rsquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
