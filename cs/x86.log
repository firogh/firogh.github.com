
# x86
[Agner Fog on x86](https://www.agner.org/optimize/#manuals)

# Interrupt and IPI
SDMv3a chapter: IPI 0xf0~0xff can be disabled. IPI includes smp_call_function_single
Check if specific interrupt is enabled ( IPI ) https://stackoverflow.com/a/51186257/1025001
> The term IPI designates a category of interrupts, specifically: NMI, SMI, SIPI, INIT and Fixed interrupts.
> Of these, the NMI, SMI, SIPI and INIT cannot be masked without disabling the LAPIC globally.

arch_trigger_cpumask_backtrace trigger_single_cpu_backtrace rcu_dump_cpu_stacks

# assembly programming
## Instructions
[Why do x86-64 instructions on 32-bit registers zero the upper part of the full 64-bit register?](https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6)
[cltq](https://stackoverflow.com/questions/6555094/what-does-cltq-do-in-assembly)
[xchg %ax %ax](https://stackoverflow.com/questions/2136043/why-does-visual-studio-use-xchg-ax-ax)
## ABI
[x86 calling conventions](http://redstack.net/blog/x86-calling-conventions.html)
[x86_64 ABI 1.0](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI)

# ref
http://www.sandpile.org/
http://www.sandpile.org/x86/except.htm
[1]:http://x86.renejeschke.de/html/file_module_x86_id_147.html
[2]:https://en.wikipedia.org/wiki/X86-64#History_2
[3]: http://yarchive.net/comp/linux/x86-64.html
[4]: https://www.lri.fr/~filliatr/ens/compil/x86-64.pdf
[5]: https://software.intel.com/en-us/articles/introduction-to-x64-assembly
[6]: https://stackoverflow.com/questions/18447627/what-is-pc-relative-addressing-and-how-can-i-use-it-in-masm

[JMP:Here, the EIP register contains the address of the instruction following the JMP instruction][1]
# Decode instruction
http://ref.x86asm.net/coder64.html

# Speculative Execution 
[Indirect branch](https://en.wikipedia.org/wiki/Indirect_branch)
[Intel Analysis of Speculative Execution Side Channels](https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf)
[Indirect Branch Predictor Barrier](https://software.intel.com/security-software-guidance/insights/deep-dive-indirect-branch-predictor-barrier)

# Mode
[What does protected mode mean](http://www.delorie.com/djgpp/doc/ug/basics/protected.html)

# Descriptor
Segments in GDT or LDT
Gates: special descriptors in IDT

# GDT
[GDT Tutorial](https://wiki.osdev.org/GDT_Tutorial)
[Memory Translation and Segmentation](https://manybutfinite.com/post/memory-translation-and-segmentation/)
## Segment for memory
### Types
code, data, and stack segments that make up the execution environment of a program or procedure
system segment: the task-state segment (TSS) and the LDT
[TSS in software multitasking](https://wiki.osdev.org/Task_State_Segment)
### Format - Segment descriptor
base address, Adding the base address to a logical memory address yields a linear address.
limit, specifies how big the segment is.
DPL, DPL is the descriptor privilege level; itcontrols access to the segment.
### Segment register
Each segment register has a hidden part to store the cached descriptor that corresponds to its segment selector.
The contents of a segment descriptor are cached once they are accessed, so there's no need to actually read the GDT in subsequent accesses, which would kill performance. 
## Linux
### Boot
only 3 segment descriptors are used during boot
code segment and data segment are flat
### Flat mode
set the base address to zero and let logical addresses coincide with linear addresses

# IDT
The IDT stores a collection of gate descriptors that provide access to interrupt and exception handlers.
Like the GDT, the IDT is not a segment.The linear address for the base of the IDT is contained in the IDT register (IDTR).
## Gate for control transfer
v3a: 2.1.2 System Segments, Segment Descriptors, and Gates
### Types
call gates, interrupt gates, trap gates, and task gates
These provide protected gateways to system procedures and handlers that may operate at a different
privilege level than application programs and most procedures.
#### v3a: 7.2.5 Task-Gate Descriptor
It can be placed in the GDT, an LDT, or the IDT.
### Format
v3a 6.11 IDT DESCRIPTORS Figure 6-2. IDT Gate Descriptors
Segment Selector: The _ _KERNEL_CS Segment Selector of the kernel code segment.
Offset: The pointer to the system_call( ) system call handler.
Type: Set to 15. Indicates that the exception is a Trap and that the corresponding handler does not disable maskable interrupts.
DPL: (Descriptor Privilege Level)
### Steps for handling interrupt and exception
6.12.1 Exception- or Interrupt-Handler Procedures
## Linux
### Why pushq $(~vector+0x80)?
x86: 64 bits: shrink and align IRQ stubs - 939b787130bf22887a09d8fd2641a094dcef8c22
### Why ~vector
x86: increase interrupt vector range - 19eadf98c8167eac843580683317b99572e2abf0
The orig_{e,r}ax needs to be < 0 to allow the signal code to distinguish between return from
interrupt and return from syscall.
Check do_signal -> syscall_get_nr(current, regs) >= 0 and WHY??

# Exceptions
## Faults — A fault is an exception that can generally be corrected and that, once corrected, allows the program
to be restarted with no loss of continuity. When a fault is reported, the processor restores the machine state to
the state prior to the beginning of execution of the faulting instruction. The return address (saved contents of
the CS and EIP registers) for the fault handler points to the faulting instruction, rather than to the instruction
following the faulting instruction.
## Traps — A trap is an exception that is reported immediately following the execution of the trapping instruction.
Traps allow execution of a program or task to be continued without loss of program continuity. The return
address for the trap handler points to the instruction to be executed after the trapping instruction.
## Aborts — An abort is an exception that does not always report the precise location of the instruction causing
the exception and does not allow a restart of the program or task that caused the exception. Aborts are used to
report severe errors, such as hardware errors and inconsistent or illegal values in system tables.
## kernel handler
do_error_trap

# DS
[linux最新内核的一些变化以及我的一些想法](https://blog.csdn.net/dog250/article/details/5303223)
?? USER_DS
# Privilege and protection
[CPU Rings, Privilege, and Protection](https://manybutfinite.com/post/cpu-rings-privilege-and-protection/)
## CS
1. First, its contents cannot be set directly by load instructions such as mov, but rather only by instructions that alter the flow of program execution, like call. 
2. Second, and importantly for us, instead of an RPL field that can be set by code, cs has a Current Privilege Level (CPL) field maintained by the CPU itself. This 2-bit CPL field in the code segment register is always equal to the CPU's current privilege level. 
## Protection
Objects: I/O ports, memory, certain instructions
[Difference between DPL and RPL in x86](https://stackoverflow.com/questions/36617718/difference-between-dpl-and-rpl-in-x86)
### The CPU protects memory at two crucial points
1. when a segment selector is loaded
2. when a page of memory is accessed with a linear address. 
2.1 Segment protection
2.2 enforcing privilege
modern kernels use a flat address space where the user-mode segments can reach the entire linear address space.
Each memory page is a block of bytes described by a page table entry containing two fields related to protection: a supervisor flag and a read/write flag. The supervisor flag is the primary x86 memory protection mechanism used by kernels. 
2.2.1 supervisor/user: 
2.2.2 read/write flag: pages storing binary images (code) are marked as read only, thereby catching some pointer errors if a program attempts to write to these pages. This flag is also used to implement copy on write when a process is forked in Unix.

## Switch privilege levels
Transfer control to spots in the kernel.
1. gate descriptors 
A gate descriptor is a segment descriptor of type system, and comes in four sub-types: call-gate descriptor, interrupt-gate descriptor, trap-gate descriptor, and task-gate descriptor.
2. sysenter

# x86-64
[Introduction to x64 Assembly by Chris Lomont][5]
[Notes on x86-64 programming][4]
[IA-32e: Intel's name for this instruction set has changed several times.][2]
[Linus on Intel vs AMD x86-64][3]

# Truth on pc-relative on x86-32
jump/call are always pc-relative except register
Other adresses are always Absolute except register

# gs
[History of gs](https://stackoverflow.com/questions/10810203/what-is-the-fs-gs-register-intended-for)
[x86: Add documentation for rd/wr fs/gs base](https://lore.kernel.org/patchwork/patch/560242/)
[x86: Add support for rd/wr fs/gs base](https://lkml.org/lkml/2016/3/21/517)
http://drops.xmd5.com/static/drops/papers-4860.html
For using in TLS, please check [OSDEV TLS](http://wiki.osdev.org/Thread_Local_Storage#ABI)
## IA32e
v3a 3.4.4 Segment Loading Instructions in IA-32e Mode
When FS and GS segment overrides are used in 64-bit mode, their respective base addresses are used in the linear
address calculation: (FS or GS).base + index + displacement. FS.base and GS.base are then expanded to the full
linear-address size supported by the implementation. The resulting effective address calculation can wrap across
positive and negative addresses; the resulting linear address must be canonical.
...
The hidden descriptor register fields for FS.base and GS.base are physically mapped to MSRs in order to load all
address bits supported by a 64-bit implementation. 
===
Software with CPL = 0 (privileged software) can load all supported linear-address bits into FS.base or GS.base using WRMSR.
load_percpu_segment
__loadsegment_simple(gs, 0);
wrmsrl(MSR_GS_BASE, (unsigned long)per_cpu(irq_stack_union.gs_base, cpu));
===
Addresses written into the 64-bit FS.base and GS.base registers must be in canonical form. 
A WRMSR instruction that attempts to write a non-canonical address to those registers causes a #GP fault.
## ?? init thread gsindex and gsbase
copy_thread_tls()
## ?? change 
__switch_to ->load_seg_legacy
commit 296f781a4b7801ad9c1c0219f9e87b6c25e196fe
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Apr 26 12:23:29 2016 -0700
    x86/asm/64: Rename thread_struct's fs and gs to fsbase and gsbase
## secondary_startup_64
commit f32ff5388d86518c0375ccdb330d3b459b9c405e
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Jan 13 20:41:35 2009 +0900
    x86: load pointer to pda into %gs while brining up a CPU
    [ Based on original patch from Christoph Lameter and Mike Travis. ]
    CPU startup code in head_64.S loaded address of a zero page into %gs
    for temporary use till pda is loaded but address to the actual pda is
    available at the point.  Load the real address directly instead.
    This will help unifying percpu and pda handling later on.
    This patch is mostly taken from Mike Travis' "x86_64: Fold pda into
    per cpu area" patch.
## copy_thread_tls

# Task
## Intel SDMv3a Chapter 7
A task is a unit of work that a processor can *dispatch*, *execute*, and *suspend*. It can be used to execute a program,
a task or process, an operating-system service utility, an interrupt or exception handler, or a kernel or executive
utility.

The IA-32 architecture provides a mechanism for saving the state of a task, for dispatching tasks for execution, and 
for switching from one task to another.

A task is made up of two parts: a task execution space and a task-state segment (TSS).
*The task execution space* consists of a code segment, a stack segment, and one or more data segments (see Figure 7-1). If an operating
system or executive uses the processor’s privilege-level protection mechanism, the task execution space also
provides a separate stack for each privilege level.

The TSS specifies the segments that make up the task execution space and provides a storage place for task state
information. In multitasking systems, the TSS also provides a mechanism for linking tasks.

Task states: segment registers, general-purpose registers, EFLAGS, EIP, CR3, TR, LDTR, I/O map in TSS, Stack pointers to privilege 0,1,2 stacks in TSS.

Ways dispatching a task for execution:
A explicit call to a task with the CALL instruction.
A explicit jump to a task with the JMP instruction.
An implicit call (by the processor) to an interrupt-handler task.
An implicit call to an exception-handler task.
A return (initiated with an IRET instruction) when the NT flag in the EFLAGS register is set.

# apic timer
alloc_intr_gate(LOCAL_TIMER_VECTOR, apic_timer_interrupt);
apic_timer_interrupt->smp_apic_timer_interrupt->local_apic_timer_interrupt->event_handler=tick_handle_periodic->tick_periodic
{
        do_timer
	{
		jiffies_64		- vs irq disable
		calc_global_load	- load average
	}
        update_wall_time
        update_process_times
	{
		account_process_tick - user/sys time
		scheduler_tick - scheduling stuff
	}
}

# cld and DF in kernel error_entry and sync_regs
[GCC 4.3.0 exposes a kernel bug](https://lwn.net/Articles/272048/) [x86: Clear DF before calling signal handler](https://lwn.net/Articles/272203/)
crash> dis sync_regs
0xffffffff8e02ba60 <sync_regs>: mov    %rdi,%rsi
0xffffffff8e02ba63 <sync_regs+0x3>:     mov    %gs:0x71fd95a1(%rip),%rax        # 0x500c
0xffffffff8e02ba6b <sync_regs+0xb>:     sub    $0xa8,%rax
0xffffffff8e02ba71 <sync_regs+0x11>:    cmp    %rdi,%rax
0xffffffff8e02ba74 <sync_regs+0x14>:    je     0xffffffff8e02ba81 <sync_regs+0x21>
0xffffffff8e02ba76 <sync_regs+0x16>:    mov    $0x15,%ecx
0xffffffff8e02ba7b <sync_regs+0x1b>:    mov    %rax,%rdi
0xffffffff8e02ba7e <sync_regs+0x1e>:    rep movsq %ds:(%rsi),%es:(%rdi)
0xffffffff8e02ba81 <sync_regs+0x21>:    repz retq 
0xffffffff8e02ba83 <sync_regs+0x23>:    data32 nopw %cs:0x0(%rax,%rax,1)
0xffffffff8e02ba8e <sync_regs+0x2e>:    xchg   %ax,%ax
## GCC doc for -mcld
This option instructs GCC to emit a cld instruction in the prologue of functions that use string instructions. String instructions depend on the DF flag to select between autoincrement or autodecrement mode. While the ABI specifies the DF flag to be cleared on function entry, some operating systems violate this specification by not clearing the DF flag in their exception dispatchers. The exception handler can be invoked with the DF flag set, which leads to wrong direction mode when string instructions are used. This option can be enabled by default on 32-bit x86 targets by configuring GCC with the --enable-cld configure option. Generation of cld instructions can be suppressed with the -mno-cld compiler option in this case.
## x86 64 ABI
The direction flag DF in the %rFLAGS register must be clear (set to “forward” direction) on function entry and return. Other user flags have no specified role in the standard calling sequence and are not preserved across calls.
## [Direction flag by Agner Fog](https://www.agner.org/optimize/calling_conventions.pdf)
The rules for the direction flag is the same in all systems. The direction flag is cleared bydefault. If the direction flag is set, then it must be cleared again before any call or return. Some compilers and subroutine libraries rely on the direction flag always being clear (Microsoft, Watcom, Digital Mars) while other systems use the double-safe strategy of always leaving the direction flag cleared, but not relying on receiving it cleared (Borland,Gnu).There is a slight possibility that some programmers may have ignored the rule for the direction flag. Therefore, it may be wise to use the double-safe strategy and clear the direction flag before using it if the code will be linked together with modules from unreliable sources.

# clac and AC
[x86/entry/compat: In SYSENTER, sink AC clearing below the existing FLAGS test](https://lore.kernel.org/patchwork/patch/652917/)

