# History
1956 Fritz Rudolf Güntsch’s doctoral dissertation
Logical Design of a Digital Computer with Multiple Asynchronous Rotating Drums and Automatic High Speed Memory Operation
[Origin of the virtual memory concept](https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1369143)

1959 Atlas prototype
[Working prototypes of paging had been developed by 1959.](http://160592857366.free.fr/joe/ebooks/ShareData/Before%20Memory%20was%20Virtual%20By%20Peter%20J.%20Denning%20from%20George%20Mason%20University.pdf)

1962 Paged VM on Atlas
[A Must-read on paging: One-Level Storage System](http://www.dcs.gla.ac.uk/~wpc/grcs/kilburn.pdf)
[A Must-read on virtual address space decoupling address and memory location: Dynamic Storage Allocation in the Atlas Computer, Including an Automatic Use of a Backing Store](https://users.soe.ucsc.edu/~sbrandt/221/Papers/History/fotheringham-cacm61.pdf)

1978
[The Manchester Mark I and Atlas: A Historical Perspective](https://dl.acm.org/citation.cfm?id=359331)

1979 Paged VM on Unix. 
[Design and Implementation of the Berkeley Virtual Memory Extensions to the UNIX Operating System](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.107.9119&rep=rep1&type=pdf)

1987
[Virtual Memory Architecture in SunOS](http://kos.enix.org/pub/gingell8.pdf)
[SunOS Virtual Memory Implementation](http://kos.enix.org/pub/sunos-vi.pdf)

# References
[PJD BEFORE MEMORY WAS VIRTUAL](http://denninginstitute.com/pjd/PUBS/bvm.pdf)
[PJD Virtual Memory 1970](http://denninginstitute.com/pjd/PUBS/VirtMem_1970.pdf)
[PJD VIRTUAL MEMORY II](http://denninginstitute.com/pjd/PUBS/vm.pdf)
[PJD Thrashing: Its causes and prevention](http://denninginstitute.com/pjd/PUBS/thrashing-1968.pdf)
[PJD The Locality Principle](http://denninginstitute.com/pjd/PUBS/CACMcols/cacmJul05.pdf)
[Memory part 3: Virtual Memory](https://lwn.net/Articles/253361/)
[Virtual Memory Architecture in SunOS](http://kos.enix.org/pub/gingell8.pdf)
[Virtual memory from Atlas](http://curation.cs.manchester.ac.uk/computer50/www.computer50.org/kgill/atlas/atdef.html):
[Tiled Virtual Memory for UNIX](https://www.usenix.org/legacy/publications/library/proceedings/sa92/franklin.pdf)
[SunOS Virtual Memory Implementation](https://pdfs.semanticscholar.org/c035/746e00023aa421b75bb2c8b2137f60bccd65.pdf)
[Design and Implementation of the Berkeley Virtual Memory Extensions to the UNIX† Operating System‡](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.107.9119&rep=rep1&type=pdf)
[Memory part 3: Virtual Memory](https://lwn.net/Articles/253361/)
[Machine-Independent Virtual Memory Management for Paged Uniprocessor and Multiprocessor Architectures](https://research.cs.wisc.edu/areas/os/Qual/papers/mach-memory.pdf)

> A system in which a process' workspace is held partly in high speed memory and partly on some slower and cheaper backing store. When the process refers to a memory location the system hardware detects whether or not the required location is physically present in memory and generates an interrupt if it is not, this allows, the system supervisor to transfer the required data area from backing store into memory.
Firo: seems not accurate, consider the kernel space.

# Address space
LDD 3rd: Address Types
[Virtual Memory I: the problem](https://lwn.net/Articles/75174/) 
vma, mm_rb: address space area
## mm_struct
History: commit b7c2deb6ea38080e7f6254b2d779b0bfce71eecb (tag: 1.1.11)
Author: Linus Torvalds <torvalds@linuxfoundation.org>
Date:   Fri Nov 23 15:09:29 2007 -0500
    Import 1.1.11
Firo: Isolate mm_struct from task_struct; no helpful comment.

# Page table

# Paging
[Paging](https://en.wikipedia.org/wiki/Paging) according to [History of VM](https://en.wikipedia.org/wiki/Virtual_memory) is developed at 1959.
The following is cited from 'before memory was virtual' by Peter J. Denning at George Mason University
From their beginnings in the 1940s, electronic computers had two-level storage systems. In the 1950s, main memory was magnetic cores (today it is RAMs); the secondary memory was magnetic drums (today it is disks). The processor (CPU) could address only the main memory. A major part of a programmer’s job was to devise a good way to divide a program into blocks and to schedule their moves between the levels. The blocks were called “segments” or “pages” and the movement operations “overlays” or “swaps”. The designers of the first operating systems in the 1950s dreamt of relieving the programming burden by automating all this storage management. 

[Paging from Atlas](http://curation.cs.manchester.ac.uk/computer50/www.computer50.org/kgill/atlas/atdef.html#page):

> Is a technique in which the main store is divided into segments called pages.
> Large user programs may cover several pages, possibly too many to fit into the available store.
> The operating systems transfers pages between main store and backing store to ensure 
> the correct page is in main store at any stage during the execution of the programs. 

Also come from 'before memory was virtual'.
At the heart of their idea was a radical innovation --- a distinction between “address” and “memory location”.
It led them to three inventions. 
(1) They built hardware that automatically translated each address generated by the processor to its current memory location.
(2) They devised demand paging, an interrupt mechanism triggered by the address translator that moved a missing page of data into the main memory.
(3) They built a replacement algorithm, a procedure to detect and move the least useful pages back to secondary memory.
## page_fault()
### x86
* page-fault exceptions error code
v3a: 4.7 - Figure 4-12. Page-Fault Error Code
P, W/R, U/S, I/D, RSVD
commit 891cffbd6bcba26409869c19c07ecd4bfc0c2460
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Oct 12 13:16:12 2008 -0700
    x86/mm: do not trigger a kernel warning if user-space disables interrupts and generates a page fault
## kernel address space
vmalloc,spurious_fault, kprobes_fault
[fixup_exception](https://www.kernel.org/doc/Documentation/x86/exception-tables.txt)
[Kernel-Level Exception Handling](https://www.linuxjournal.com/article/2135)
SIGSEGV, kernel oops
## faultaround
[map_pages: mm: map few pages around fault address if they are in page cache](https://lwn.net/Articles/588802/)

