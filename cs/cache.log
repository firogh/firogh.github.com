# Buffer cache?

# SLAB

## Reclaim occasions
* Peoridically
cache_reap()

# TLB
http://www.infradead.org/~mchehab/kernel_docs/unsorted/cachetlb.html
https://stackoverflow.com/questions/6803762/dump-the-contents-of-tlb-buffer-of-x86-cpu
https://elixir.bootlin.com/linux/latest/source/Documentation/x86/tlb.txt

# mnt cache
type: hash table
mount_hashtable

# Dentry cache - dcache
## Think it over and human index
access -> accessers sync -> read inode and fill dentry
## Lifetime
?? refcount = -1; bind -> = 0; get =1, 2, 3...
?? LRU 2: 1st mark. 2nd move to head/tail
## Motion concurrent
### Multiple accessers synchronization
#### Locked lookup insert
1. lookup cache
if not; created the dentry, mark as ubound and update progress
2. get lock
lookup cache
if found, discard dentry
if not, insert dentry
Check d_alloc_parallel and ext2_lookup in lookup_slow
### Read dentry that is being reclaimed
Lockref and RCU, read and reclaim in parallel
?? [Introducing lockrefs](https://lwn.net/Articles/565734/)
* Read
d_alloc_parallel->lockref_get_not_dead
* reclaim
shrink_dentry_list
__dentry_kill->
{
	spin_lock(&dentry->d_lock);
	lockref_mark_dead		- why -128?
}
?? RCU
[Dcache scalability and RCU-walk](https://lwn.net/Articles/419811/)

## Connections

## cache
* dentry state
in use/bound
in use/unbound
not use/ boud - LRU
not use/unbound - new one

### Search structure 
Hashtable
### Reclaim polices
Third chance
sb->s_dentry_lru
?? LRU Generic LRU infrastructure
[Smarter shrinkers](https://lwn.net/Articles/550463/)
Check prune_dcache_sb
1. in use -> remove it from lru; and wait to be dput to the tail of lru
dentry->d_lockref.count
2. if referenced -> rotate to tail
DCACHE_REFERENCED
3. move it to dispose list
### Write behavior
### Cache coherence

## Example of using dentry
__shmem_file_setup
d_alloc_pseudo
shmem_get_inode-> inode_init_always
d_instantiate
alloc_file

# Page cache
## Search structure
file page cache : key is page.index( offset in file), item is page.
* swap cache - a fake cache
radix tree same as page cache
add_to_swap 
* page cache
Radix tree
page_cache_tree_insert, add_to_page_cache_lru

## Reclaim algorithm

## Write behavior

## Cache coherence

# CPU cache
https://www.scss.tcd.ie/~jones/vivio/caches/MESI.htm
## search structure - associative arrys
[Where exactly L1, L2 and L3 Caches located in computer?](https://superuser.com/questions/196143/where-exactly-l1-l2-and-l3-caches-located-in-computer)
![cpu cache locations](https://i.stack.imgur.com/4Z1nU.png)
### Associativity
* trade-off
a) Checking more places takes more power and chip area,
b) and potentially more time. On the other hand, caches with more associativity suffer fewer misses
fully associative - the best miss rates, but practical only for a small number of entries
N-way set associative cache: 8 is a common choice for later implementations
direct-mapped cache - if two locations map to the same entry, they may continually knock each other out. anti-fragmantion worsens this case.
### N-way set associative cache
* Why isn't set index in the MSB
[The vast majority of accesses are close together...](http://danluu.com/3c-conflict/#fn:L)
* set vs page-align
[comment 6](http://danluu.com/3c-conflict/#fn:4)
Why is transposing a matrix of 512x512 much slower than transposing a matrix of 513x513?
* etc
http://igoro.com/archive/gallery-of-processor-cache-effects/
## Replacement polices
Pseudo-LRU
## Write behavior
[background on ioremap, cacheing, cache coherency on x86](https://lkml.org/lkml/2008/4/29/480)
• write-through cache implementation;
• write-back cache implementation.
• write-combining; and
• uncacheable.
## Cache coherence
## Cache over context switch
[What happens to the cache contents on a context switch](https://cs.stackexchange.com/questions/1088/what-happens-to-the-cache-contents-on-a-context-switch)
https://mechanical-sympathy.blogspot.com/2013/02/cpu-cache-flushing-fallacy.html
[MMU: context switching needs Cache flushing?](https://community.arm.com/dev-platforms/f/discussions/8925/aarch32-1-1-mmu-context-switching-needs-cache-flushing)
[intel should be virtually indexed and physically tagged](https://www.realworldtech.com/sandy-bridge/7/)
Unix systems for modern architectures
## Cache aliasing
[VIPT Cache Aliasing - Georgia Tech - HPCA: Part 4](https://www.youtube.com/watch?v=mMHkIa6Lkek)
## Example 
dmidecode -t cache
cat /sys/devices/system/cpu/cpu0/cache/index0/number_of_sets 
64
cat /sys/devices/system/cpu/cpu0/cache/index0/ways_of_associativity 
8
cat /sys/devices/system/cpu/cpu0/cache/index0/size 
32K
cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size 
64
https://github.com/sysprog21/phonebook
