---
tags: [ cs ] 
title: x86 task management
date: 2017-04-28T09:30:09+08:00 
category: cs
---

Intel SDMv3a Chapter 7

A task is a unit of work that a processor can *dispatch*, *execute*, and *suspend*. It can be used to execute a program,
a task or process, an operating-system service utility, an interrupt or exception handler, or a kernel or executive
utility.

The IA-32 architecture provides a mechanism for saving the state of a task, for dispatching tasks for execution, and
for switching from one task to another.

A task is made up of two parts: a task execution space and a task-state segment (TSS).
*The task execution space* consists of a code segment, a stack segment, and one or more data segments (see Figure 7-1). If an operating
system or executive uses the processorâ€™s privilege-level protection mechanism, the task execution space also
provides a separate stack for each privilege level.

The TSS specifies the segments that make up the task execution space and provides a storage place for task state
information. In multitasking systems, the TSS also provides a mechanism for linking tasks.

Task states: segment registers, general-purpose registers, EFLAGS, EIP, CR3, TR, LDTR, I/O map in TSS, Stack pointers to privilege 0,1,2 stacks in TSS.

Ways dispatching a task for execution:
A explicit call to a task with the CALL instruction.
A explicit jump to a task with the JMP instruction.
An implicit call (by the processor) to an interrupt-handler task.
An implicit call to an exception-handler task.
A return (initiated with an IRET instruction) when the NT flag in the EFLAGS register is set.


