# Top
https://github.com/iovisor/bcc/blob/master/tools/opensnoop.py
https://github.com/brendangregg/perf-tools/blob/master/kernel/funcslower

# Debug objects
make kernel/sched.s V=1
./scripts/decodecode < Oops.txt

# kernel module
gdb vmlinux /proc/kcore
text_addr=/sys/module/char-read-write/sections/.text
add-symbol-file /home/nkhare/char-read-write.ko $text_addr
print &((struct kmem_cache *)0)->offset


# Perf
perf record -a -e kmem:kmalloc --filter "bytes_alloc==64"

# Kprobes 

# Systemtap
[systemtap脚本分析系统中dentry SLAB占用过高问题](https://yq.aliyun.com/articles/131870)
https://sourceware.org/systemtap/examples/keyword-index.html
stap -L 'kernel.statement("__inet_lookup_established@net/ipv4/inet_hashtables.c:*")'
stap -g -v -e '%{ int foo; %} probe kernel.function("vfs_read"){ %{ foo=1 %}; printf("addr: %x\n", %{ &foo %} );exit()}'
stap -g -v -e '%{ int foo; %} probe kprobe.function("vfs_read"){ %{ foo=1 %}; printf("addr: %x\n", %{ &foo %} );exit()}'
sudo stap -g -v -e '%{ int foo; %} probe kprobe.function("vfs_read"){  %{ printk("addr: %p\n",  &foo) %}; exit()}'

# eBPF
https://lwn.net/Articles/740157/
[How to turn any syscall into an event: Introducing eBPF Kernel probes](https://blog.yadutaf.fr/2016/03/30/turn-any-syscall-into-event-introducing-ebpf-kernel-probes/)

# Print
## Early print
putstr
early_printk
Linux serial-port driver is interrupt driven, if irq-off console will not work!
## Dynamic print
Precondition: CONFIG_DYNAMIC_DEBUG
How to use it during kernel booting?
Use boot option:
dyndbg="file drivers/usb/host/ehci-hcd.c +p; file
drivers/usb/host/ehci-ppc-of.c +p" loglevel=8
loglevel=8 dyndbg="module ehci_pci +p;
module ehci_hcd +p; module usbcore +p"
After booting:
/sys/kernel/debug/dynamic_debug/control
## Dev print
drivers/base/core.c
define_dev_printk_level
THese functions are like pr_func
dev_debug

# Kasan
setup_arch->kasan_init
[KernelAddressSanitizer a fast memory error detector for the Linux kernel](http://events.linuxfoundation.org/sites/events/files/slides/LinuxCon%20North%20America%202015%20KernelAddressSanitizer.pdf)
[kasan found stack out of bounds](https://github.com/zfsonlinux/zfs/pull/4708/commits/01709937be3c28a89eff83e0e657a72826947506)
[lwn The kernel address sanitizer](https://lwn.net/Articles/612153/)
[out of bounds](https://lkml.org/lkml/2014/12/3/128)
Interceptors of memset/memmove/memcpy 393f203f5fd54421fddb1e2a263f64d3876eeadb
