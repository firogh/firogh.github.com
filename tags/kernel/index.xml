<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Kernel on f(x) </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://firoyang.org/tags/kernel/</link>
    <language>en-us</language>
    <author>Firo Yang</author>
    
    <updated>Sat, 08 Jun 2019 00:00:00 UTC</updated>
    
    <item>
      <title>Linux kernel page allocation</title>
      <link>http://firoyang.org/cs/page_allocator/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 UTC</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/page_allocator/</guid>
      <description>

&lt;h1 id=&#34;gfp&#34;&gt;GFP&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html&#34;&gt;Memory Allocation Guide&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/html/latest/core-api/mm-api.html#memory-allocation-controls&#34;&gt;Memory Allocation Controls&lt;/a&gt;&lt;br /&gt;
Also see include/linux/gfp.h&lt;/p&gt;

&lt;h2 id=&#34;removed-gfp-flags&#34;&gt;Removed GFP flags&lt;/h2&gt;

&lt;p&gt;__GFP_WAIT: mm, page_alloc: Rename __GFP_WAIT to __GFP_RECLAIM&lt;/p&gt;

&lt;h2 id=&#34;gfp-zone-table-and-gfp-zone-bad&#34;&gt;GFP_ZONE_TABLE and GFP_ZONE_BAD&lt;/h2&gt;

&lt;p&gt;commit b70d94ee438b3fd9c15c7691d7a932a135c18101&lt;br /&gt;
Refs: v2.6.30-5489-gb70d94ee438b&lt;br /&gt;
Author:     Christoph Lameter &lt;a href=&#34;mailto:cl@linux.com&#34;&gt;cl@linux.com&lt;/a&gt;&lt;br /&gt;
AuthorDate: Tue Jun 16 15:32:46 2009 -0700&lt;br /&gt;
    page-allocator: use integer fields lookup for gfp_zone and check for errors in flags passed to the page allocator&lt;br /&gt;
+ * GFP_ZONE_TABLE is a word size bitstring that is used for looking up the&lt;br /&gt;
+ * zone to use given the lowest 4 bits of gfp_t. Entries are ZONE_SHIFT long&lt;br /&gt;
+ * and there are 16 of them to cover all possible combinations of&lt;br /&gt;
+ * __GFP_DMA, __GFP_DMA32, __GFP_MOVABLE and __GFP_HIGHMEM&lt;br /&gt;
+ * The zone fallback order is MOVABLE=&amp;gt;HIGHMEM=&amp;gt;NORMAL=&amp;gt;DMA32=&amp;gt;DMA.&lt;br /&gt;
+ * But GFP_MOVABLE is not only a zone specifier but also an allocation&lt;br /&gt;
+ * policy. Therefore __GFP_MOVABLE plus another zone selector is valid.&lt;br /&gt;
+ * Only 1bit of the lowest 3 bit (DMA,DMA32,HIGHMEM) can be set to &amp;ldquo;1&amp;rdquo;.&lt;br /&gt;
+ *       bit       result&lt;br /&gt;
+ *       0x0    =&amp;gt; NORMAL&lt;br /&gt;
+ *       0x1    =&amp;gt; DMA or NORMAL&lt;br /&gt;
+ *       0x2    =&amp;gt; HIGHMEM or NORMAL&lt;br /&gt;
+ *       0x3    =&amp;gt; BAD (DMA+HIGHMEM)&lt;br /&gt;
+ *       0x4    =&amp;gt; DMA32 or DMA or NORMAL&lt;br /&gt;
+ *       0x5    =&amp;gt; BAD (DMA+DMA32)&lt;br /&gt;
+ *       0x6    =&amp;gt; BAD (HIGHMEM+DMA32)&lt;br /&gt;
+ *       0x7    =&amp;gt; BAD (HIGHMEM+DMA32+DMA)&lt;br /&gt;
+ *       0x8    =&amp;gt; NORMAL (MOVABLE+0)&lt;br /&gt;
+ *       0x9    =&amp;gt; DMA or NORMAL (MOVABLE+DMA)&lt;br /&gt;
+ *       0xa    =&amp;gt; MOVABLE (Movable is valid only if HIGHMEM is set too)&lt;br /&gt;
+ *       0xb    =&amp;gt; BAD (MOVABLE+HIGHMEM+DMA)&lt;br /&gt;
+ *       0xc    =&amp;gt; DMA32 (MOVABLE+HIGHMEM+DMA32)&lt;br /&gt;
+ *       0xd    =&amp;gt; BAD (MOVABLE+DMA32+DMA)&lt;br /&gt;
+ *       0xe    =&amp;gt; BAD (MOVABLE+DMA32+HIGHMEM)&lt;br /&gt;
+ *       0xf    =&amp;gt; BAD (MOVABLE+DMA32+HIGHMEM+DMA)&lt;/p&gt;

&lt;h1 id=&#34;alloc-flags&#34;&gt;Alloc flags&lt;/h1&gt;

&lt;p&gt;gfp_to_alloc_flags&lt;br /&gt;
ALLOC_HIGH: __zone_watermark_ok(): if (alloc_flags &amp;amp; ALLOC_HIGH) min -= min / 2;&lt;br /&gt;
ALLOC_HARDER: rmqueue(): if (alloc_flags &amp;amp; ALLOC_HARDER) { page = __rmqueue_smallest(zone, order, MIGRATE_HIGHATOMIC);&lt;/p&gt;

&lt;h1 id=&#34;pf-memalloc&#34;&gt;PF_MEMALLOC&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/gorman/html/understand/understand009.html&#34;&gt;Mel&amp;rsquo;s book on PF_MEMALLOC&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lore.kernel.org/patchwork/cover/178099/&#34;&gt;Kill PF_MEMALLOC abuse&lt;/a&gt;&lt;br /&gt;
 get_page_from_freelist and __ac_get_obj&lt;br /&gt;
                 * page is set pfmemalloc is when ALLOC_NO_WATERMARKS was&lt;br /&gt;
                 * necessary to allocate the page. The expectation is&lt;br /&gt;
                 * that the caller is taking steps that will free more&lt;br /&gt;
                 * memory. The caller should avoid the page being used&lt;br /&gt;
                 * for !PFMEMALLOC purposes.&lt;br /&gt;
                if (alloc_flags &amp;amp; ALLOC_NO_WATERMARKS)&lt;br /&gt;
                        set_page_pfmemalloc(page);&lt;/p&gt;

&lt;h2 id=&#34;users-of-pf-memalloc&#34;&gt;Users of PF_MEMALLOC&lt;/h2&gt;

&lt;p&gt;kswapd and &lt;strong&gt;alloc_pages_direct_reclaim-&amp;gt;&lt;/strong&gt;perform_reclaim-&amp;gt;Set PF_MEMALLOC.&lt;br /&gt;
commit c93bdd0e03e848555d144eb44a1f275b871a8dd5&lt;br /&gt;
Author: Mel Gorman &lt;a href=&#34;mailto:mgorman@suse.de&#34;&gt;mgorman@suse.de&lt;/a&gt;&lt;br /&gt;
Date:   Tue Jul 31 16:44:19 2012 -0700&lt;br /&gt;
    netvm: allow skb allocation to use PFMEMALLOC reserves&lt;/p&gt;

&lt;h1 id=&#34;pf-swapwrite-swapwrite-originally-means-swap-space-but-now-stands-for-kswapd-or-zone-reclaim-and-migration&#34;&gt;PF_SWAPWRITE - swapwrite originally means swap space but now stands for kswapd or zone reclaim and migration?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/linux-mm/20051025193023.6828.89649.sendpatchset@schroedinger.engr.sgi.com/#r&#34;&gt;Swap Migration V4: Overview&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/157936/&#34;&gt;Swap Migration V5: Overview&lt;/a&gt;&lt;br /&gt;
commit 930d915252edda7042c944ed3c30194a2f9fe163&lt;br /&gt;
Refs: v2.6.15-1460-g930d915252ed&lt;br /&gt;
Author:     Christoph Lameter &lt;a href=&#34;mailto:clameter@sgi.com&#34;&gt;clameter@sgi.com&lt;/a&gt;&lt;br /&gt;
AuthorDate: Sun Jan 8 01:00:47 2006 -0800&lt;br /&gt;
    [PATCH] Swap Migration V5: PF_SWAPWRITE to allow writing to swap&lt;br /&gt;
    Add PF_SWAPWRITE to control a processes permission to write to swap.&lt;br /&gt;
    - Use PF_SWAPWRITE in may_write_to_queue() instead of checking for kswapd and pdflush&lt;br /&gt;
    - Set PF_SWAPWRITE flag for kswapd and pdflush&lt;/p&gt;

&lt;h2 id=&#34;firo&#34;&gt;Firo&lt;/h2&gt;

&lt;p&gt;The origianl migrations code &lt;a href=&#34;https://lore.kernel.org/linux-mm/20051025193039.6828.74991.sendpatchset@schroedinger.engr.sgi.com/&#34;&gt;swap_pages&lt;/a&gt;&lt;br /&gt;
seems I can remove it from migration code since it&amp;rsquo;s not used during migrating pages.&lt;br /&gt;
Could I remove it completely.&lt;/p&gt;

&lt;h1 id=&#34;zone-lists&#34;&gt;Zone lists&lt;/h1&gt;

&lt;p&gt;struct zonelist node_zonelists[MAX_ZONELISTS];&lt;br /&gt;
 * [0]  : Zonelist with fallback&lt;br /&gt;
 * [1]  : No fallback (__GFP_THISNODE)&lt;br /&gt;
start_kernel -&amp;gt; build_all_zonelists&lt;br /&gt;
or hotpulg or /proc/sys/vm/numa_zonelist_order: numa_zonelist_order_handler&lt;br /&gt;
  node_zonelists = {{               # Fallback zones: this zonelist including all zones from all nodes.&lt;br /&gt;
      _zonerefs = {{&lt;br /&gt;
          zone = 0xffff88107ffd5d80, # node 0&lt;br /&gt;
          zone_idx = 2&lt;br /&gt;
          zone = 0xffff88107ffd56c0, # node 0&lt;br /&gt;
          zone_idx = 1&lt;br /&gt;
          zone = 0xffff88107ffd5000, # node 0&lt;br /&gt;
          zone_idx = 0&lt;br /&gt;
          zone = 0xffff88207ffd2d80, # Node 1; fallback.&lt;br /&gt;
          zone_idx = 2&lt;br /&gt;
          zone = 0x0,&lt;br /&gt;
          zone_idx = 0&lt;br /&gt;
    &amp;hellip;}}}&lt;br /&gt;
    node_zonelists[1]           # Nofallback zones&lt;/p&gt;

&lt;h1 id=&#34;lqo&#34;&gt;LQO&lt;/h1&gt;

&lt;p&gt;[Driver porting: low-level memory allocation]&lt;a href=&#34;https://lwn.net/Articles/22909/)&#34;&gt;https://lwn.net/Articles/22909/)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/627419/&#34;&gt;The &amp;ldquo;too small to fail&amp;rdquo; memory-allocation rule&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/723317/&#34;&gt;Revisiting &amp;ldquo;too small to fail&amp;rdquo;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;high-order-atomic-allocations&#34;&gt;High-order atomic allocations&lt;/h1&gt;

&lt;p&gt;commit 0aaa29a56e4fb0fc9e24edb649e2733a672ca099&lt;br /&gt;
Author: Mel Gorman &lt;a href=&#34;mailto:mgorman@techsingularity.net&#34;&gt;mgorman@techsingularity.net&lt;/a&gt;&lt;br /&gt;
Date:   Fri Nov 6 16:28:37 2015 -0800&lt;br /&gt;
    mm, page_alloc: reserve pageblocks for high-order atomic allocations on demand&lt;/p&gt;

&lt;h1 id=&#34;hot-and-cold-pages-pcp-list&#34;&gt;Hot and cold pages, pcp list&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/14768/&#34;&gt;Hot and cold pages&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://patchwork.kernel.org/patch/10013971/&#34;&gt;mm, Remove cold parameter from free_hot_cold_page*&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;fair-zone-allocation-obsoleted-but-see-gfp-write&#34;&gt;Fair-zone allocation - obsoleted but see __GFP_WRITE&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/patchwork/patch/691300/&#34;&gt;mm, page_alloc: Remove fair zone allocation policy&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/576778/&#34;&gt;Configurable fair allocation zone policy&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;compaction-and-reclamation&#34;&gt;Compaction and reclamation&lt;/h1&gt;

&lt;p&gt;Direct reclaim: do_try_to_free_pages vm_event_item ALLOCSTALL&lt;br /&gt;
Kswapd: balance_pgdat PAGEOUTRUN&lt;/p&gt;

&lt;h1 id=&#34;buddy-memory-system-1963-1965&#34;&gt;Buddy memory system 1963 ~ 1965&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://sci-hub.tw/https://dl.acm.org/citation.cfm?doid=365628.365655&#34;&gt;buddy system 1965 a fast storage allocator.&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Buddy_memory_allocation&#34;&gt;Buddy memory allocation&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=359626&#34;&gt;buddy system variants 1977&lt;/a&gt;&lt;br /&gt;
The following cited from above 1965 paper.&lt;br /&gt;
The oporations involved in obtaining blocks from and retm&amp;rsquo;ning thom to the free&lt;br /&gt;
storage lists aro vory fast, making this scheme particularly appropriate for list structure operations and for other&lt;br /&gt;
situations involving many sizes of blocks which are fixed in size and location. This is in fact tho storago bookkeeping&lt;br /&gt;
mothod used in tho Boll Telephone Laboratories Low-Level List Language&amp;rsquo;&lt;/p&gt;

&lt;h2 id=&#34;osidp&#34;&gt;OSIDP&lt;/h2&gt;

&lt;p&gt;Both fixed and dynamic partitioning schemes have drawbacks. A fixed partitioning&lt;br /&gt;
scheme limits the number of active processes and may use space inefficiently if there is&lt;br /&gt;
a poor match between available partition sizes and process sizes. A dynamic partition-&lt;br /&gt;
ing scheme is more complex to maintain and includes the overhead of compaction. An&lt;br /&gt;
interesting compromise is the buddy system&lt;/p&gt;

&lt;h2 id=&#34;translations&#34;&gt;Translations&lt;/h2&gt;

&lt;p&gt;free_area; page_is_buddy; PageBuddy(buddy) &amp;amp;&amp;amp; page_order(buddy)&lt;br /&gt;
setup_arch-&amp;gt;x86_init.paging.pagetable_init = native_pagetable_init&lt;br /&gt;
        sparse_init vmemmap_populate      # vmemmap&lt;br /&gt;
        zone_sizes_init free_area_init_core zone_pcp_init&lt;br /&gt;
        memmap_init_zone # Memory map a) Set all page to reserved. MIGRATE_MOVABLE? b) Set node, zone to page-&amp;gt;flags; set_page_links&lt;/p&gt;

&lt;h3 id=&#34;buddy-init&#34;&gt;Buddy init&lt;/h3&gt;

&lt;p&gt;mem_init-&amp;gt; memblock_free_all or free_all_bootmem # /* this will put all low memory onto the freelists */&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>memory mapping</title>
      <link>http://firoyang.org/cs/mem_map/</link>
      <pubDate>Wed, 22 Aug 2018 21:39:41 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/mem_map/</guid>
      <description>

&lt;p&gt;This article is talking about user space Memory mmapping; it&amp;rsquo;s not limitted to mmap(2) system call.&lt;br /&gt;
&lt;a href=&#34;https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/com.ibm.aix.genprogc/understanding_mem_mapping.htm&#34;&gt;Understanding memory mapping&lt;/a&gt;&lt;br /&gt;
TLPI:chapter 49 and LSP: Chapter 8&lt;/p&gt;

&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;

&lt;p&gt;BSD 4.2&lt;br /&gt;
1990 SunOS 4.1&lt;br /&gt;
&lt;a href=&#34;http://bitsavers.trailing-edge.com/pdf/sun/sunos/4.1/800-3846-10A_System_Services_Overview_199003.pdf&#34;&gt;A Must-read: The applications programmer gains access to the facilities of the VM system through several sets of system calls.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;memory-mappings&#34;&gt;Memory mappings&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://landley.net/writing/memory-faq.txt&#34;&gt;What are memory mappings? - Landley&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A memory mapping is a set of page table entries describing the properties&lt;br /&gt;
of a consecutive virtual address range.  Each memory mapping has a&lt;br /&gt;
start address and length, permissions (such as whether the program can&lt;br /&gt;
read, write, or execute from that memory), and associated resources (such&lt;br /&gt;
as physical pages, swap pages, file contents, and so on).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;vma&#34;&gt;VMA&lt;/h1&gt;

&lt;p&gt;vma&amp;rsquo;s unit is PAGE_SIZE;&lt;/p&gt;

&lt;h2 id=&#34;split-vma&#34;&gt;split_vma&lt;/h2&gt;

&lt;p&gt;new_below&lt;br /&gt;
commit 5846fc6c31162234e88bdfd91548b1cf0d2cebbd&lt;br /&gt;
Author: Andrew Morton &lt;a href=&#34;mailto:akpm@digeo.com&#34;&gt;akpm@digeo.com&lt;/a&gt;&lt;br /&gt;
Date:   Tue Sep 17 06:35:47 2002 -0700&lt;br /&gt;
    [PATCH] consolidate the VMA splitting code&lt;br /&gt;
new_below means the place where the old vma go to! Bad naming!&lt;br /&gt;
0 means the old will save the head part. 1 means tail part.&lt;/p&gt;

&lt;h1 id=&#34;release-memory-resources&#34;&gt;Release memory resources&lt;/h1&gt;

&lt;p&gt;exit_mm exit_mmap&lt;/p&gt;

&lt;h1 id=&#34;shared-memory-mapping&#34;&gt;Shared memory mapping&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/gorman/html/understand/understand015.html&#34;&gt;Chapter 12  Shared Memory Virtual Filesystem:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very clean interface that is conceptually easy to understand but it does not help anonymous pages as there is no file backing. To keep this nice interface, Linux creates an artifical file-backing for anonymous pages using a RAM-based filesystem where each VMA is backed by a “file” in this filesystem. Every inode in the filesystem is placed on a linked list called shmem_inodes so that they may always be easily located. This allows the same file-based interface to be used without treating anonymous pages as a special case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Firo: every time you create a shared memory via mmap(2), you create a inode with same name dev/zero in the hidden shm_mnt fs;&lt;br /&gt;
The name dev/zero is only a name. It has nothing related to /dev/zero in drivers/char/mem.c. And /dev/shm is only a tmpfs; it has nothing related shmemfs, but POSIX&amp;rsquo;s shm_open uses /dev/shm.&lt;/p&gt;

&lt;h2 id=&#34;shared-anonymouse-mappings&#34;&gt;Shared anonymouse mappings&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/patchwork/patch/174306/&#34;&gt;vmscan: limit VM_EXEC protection to file pages&lt;/a&gt;&lt;br /&gt;
If someone may take advange of reclaimation code by mmap(&amp;hellip;, VM_EXEC, SHRED|ANON), OOM may occur since the old code protect it from reclaiming by add it back to the active list. Great patch. However, program running in tmpfs will also penalized.&lt;br /&gt;
page_is_file_cache &amp;lt; !PageAnon&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/452035/&#34;&gt;ashmem&lt;/a&gt;&lt;br /&gt;
* onset - mmap&lt;br /&gt;
do_mmap -&amp;gt; mmap_region -&amp;gt; vma_link -&amp;gt; (__shmem_file_setup) &amp;amp;&amp;amp; __vma_link_file: into i_mmap interval_tree.&lt;br /&gt;
* nuclus - share fault&lt;br /&gt;
Read: do_read_fault&lt;br /&gt;
Write: do_shared_fault -&amp;gt; shmem_getpage_gfp shmem_add_to_page_cache&lt;br /&gt;
WP: do_wp_page -&amp;gt; wp_page_shared or wp_page_reuse&lt;br /&gt;
b)IPC using a shared file mapping&lt;/p&gt;

&lt;h2 id=&#34;history-1&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;late 70s - IPC: see TLPI: Chapter 45 INTRODUCTION TO SYSTEM V IPC&lt;br /&gt;
they first appear together in Columbus UNIX, a Bell UNIX for database and efficient transaction processing&lt;br /&gt;
1983 - IPC See TLPI or wikipedia shared mmeory.&lt;br /&gt;
they land together in System V that made them popular in mainstream UNIX-es, hence the name&lt;/p&gt;

&lt;p&gt;1983 - BSD mmap with shared vs private memory mapping&lt;br /&gt;
BSD 4.2: The system supports sharing of data between processes by allowing pages to be mapped into memory. These mapped pages may be shared with other processes or private to the process.&lt;/p&gt;

&lt;p&gt;1984 Jan - BSD mmap with file memory mapping support by SunOS&lt;br /&gt;
The mmap seems firstly implemented by &lt;a href=&#34;http://bitsavers.trailing-edge.com/pdf/sun/sunos/1.1/800-1108-01E_System_Interface_Manual_for_the_Sun_Workstation_Jan84.pdf&#34;&gt;SunOS 1.1&lt;/a&gt;&lt;br /&gt;
N.B. This call is not completely implemented In 4.2(BSD).&lt;br /&gt;
More sunos docs: &lt;a href=&#34;http://bitsavers.trailing-edge.com/pdf/sun/sunos/&#34;&gt;http://bitsavers.trailing-edge.com/pdf/sun/sunos/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1988&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Memory-mapped_file#History&#34;&gt;SunOS 4 introduced Unix&amp;rsquo;s mmap, which permitted programs &amp;ldquo;to map files into memory.&amp;rdquo;&lt;/a&gt;&lt;br /&gt;
1989&lt;br /&gt;
One paper found in OSTEP: &lt;a href=&#34;https://courses.cs.washington.edu/courses/cse551/09sp/papers/memory_coherence.pdf&#34;&gt;Memory Coherence in Shared Virtual Memory Systems&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;shared-memory-in-kernel&#34;&gt;Shared memory in kernel&lt;/h2&gt;

&lt;h3 id=&#34;initial-version&#34;&gt;Initial version&lt;/h3&gt;

&lt;p&gt;history: commit 9cb9f18b5d26bf176e13edbc0c248d121217c6b3&lt;br /&gt;
Refs: &lt;0.99.10&gt;&lt;br /&gt;
Author:     Linus Torvalds &lt;a href=&#34;mailto:torvalds@linuxfoundation.org&#34;&gt;torvalds@linuxfoundation.org&lt;/a&gt;&lt;br /&gt;
AuthorDate: Fri Nov 23 15:09:11 2007 -0500&lt;br /&gt;
    [PATCH] Linux-0.99.10 (June 7, 1993)&lt;br /&gt;
Firo: search &amp;lsquo;shm_swap&amp;rsquo;&lt;/p&gt;

&lt;h3 id=&#34;ramfs-based&#34;&gt;Ramfs based&lt;/h3&gt;

&lt;p&gt;history: commit 4d372877c63baaaf4c1c3325cae43f6b9782e59e&lt;br /&gt;
Refs: &lt;2.4.0-test13pre3&gt;&lt;br /&gt;
Author:     Linus Torvalds &lt;a href=&#34;mailto:torvalds@linuxfoundation.org&#34;&gt;torvalds@linuxfoundation.org&lt;/a&gt;&lt;br /&gt;
AuthorDate: Fri Nov 23 15:40:55 2007 -0500&lt;br /&gt;
[&amp;hellip;]&lt;br /&gt;
    The shmfs cleanup should be unnoticeable except to users who use SAP with&lt;br /&gt;
    huge shared memory segments, where Christoph Rohlands work not only&lt;br /&gt;
    makes the code much more readable, it should also make it dependable..&lt;br /&gt;
[&amp;hellip;]&lt;br /&gt;
    - Christoph Rohland: shmfs for shared memory handling&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The definitive guide to Linux x86 entries</title>
      <link>http://firoyang.org/cs/entry/</link>
      <pubDate>Wed, 26 Apr 2017 21:39:41 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/entry/</guid>
      <description>

&lt;h1 id=&#34;all-entries&#34;&gt;All entries&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/x86/entry_64.txt&#34;&gt;Documentation/x86/entry_64.txt&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;entry-irq&#34;&gt;Entry irq&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lenky.info/archives/2013/03/2245&#34;&gt;对Linux x86-64架构上硬中断的重新认识&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;steps-to-handle-intterrupt&#34;&gt;Steps to handle intterrupt&lt;/h2&gt;

&lt;p&gt;For logical address to linear address, see intel SDM v3a 3.4 LOGICAL AND LINEAR ADDRESSES.&lt;br /&gt;
For stack switching during escalate the CPL, see SDM v3a 5.8.5 stack switching. The processor will automatically chose the espCPL stack to use during changing in privilege level.&lt;br /&gt;
For more details on stack switching, please check the Figure 5-13. Stack Switching During an Interprivilege-Level Call&lt;br /&gt;
For fast system call, check 3a 5.8.7 Performing Fast Calls to System Procedures&lt;br /&gt;
For TSS and TR, check 3a 7.2&lt;br /&gt;
For Linux hanld irq processes, check ULK 3rd Chapter 4: Hardware Handling of Interrupts and Exceptions&lt;/p&gt;

&lt;h1 id=&#34;entry-exception&#34;&gt;Entry exception&lt;/h1&gt;

&lt;h2 id=&#34;paranoid-entry&#34;&gt;paranoid_entry&lt;/h2&gt;

&lt;p&gt;Check Documentation/x86/entry_64.txt&lt;/p&gt;

&lt;h2 id=&#34;error-entry&#34;&gt;error_entry&lt;/h2&gt;

&lt;p&gt;tglx: commit 0457d99a336be658cea1a5bdb689de5adb3b382d&lt;br /&gt;
Author:     Andi Kleen &lt;a href=&#34;mailto:ak@muc.de&#34;&gt;ak@muc.de&lt;/a&gt;&lt;br /&gt;
AuthorDate: Tue Feb 12 20:17:35 2002 -0800&lt;br /&gt;
Commit:     Linus Torvalds &lt;a href=&#34;mailto:torvalds@home.transmeta.com&#34;&gt;torvalds@home.transmeta.com&lt;/a&gt;&lt;br /&gt;
CommitDate: Tue Feb 12 20:17:35 2002 -0800&lt;br /&gt;
    [PATCH] x86_64 merge: arch + asm&lt;/p&gt;

&lt;h1 id=&#34;entry-system-calls&#34;&gt;Entry system calls&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/&#34;&gt;The Definitive Guide to Linux System Calls&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;fast-path&#34;&gt;Fast path&lt;/h2&gt;

&lt;p&gt;commit 21d375b6b34ff511a507de27bf316b3dde6938d9&lt;br /&gt;
Author: Andy Lutomirski &lt;a href=&#34;mailto:luto@kernel.org&#34;&gt;luto@kernel.org&lt;/a&gt;&lt;br /&gt;
Date:   Sun Jan 28 10:38:49 2018 -0800&lt;br /&gt;
    x86/entry/64: Remove the SYSCALL64 fast path&lt;/p&gt;

&lt;h2 id=&#34;sysenter-vs-syscall&#34;&gt;sysenter vs syscall&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/comp.arch/CjDs4MJCBow%5B1-25%5D&#34;&gt;SYSENTER/SYSEXIT vs.SYSCALL/SYSRET&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://arkanis.de/weblog/2017-01-05-measurements-of-system-call-performance-and-overhead&#34;&gt;Measurements of system call performance and overhead&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://reverseengineering.stackexchange.com/a/16511/16996&#34;&gt;AMD vs Intel and syscall vs sysenter&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.codeguru.com/cpp/misc/misc/system/article.php/c8223/System-Call-Optimization-with-the-SYSENTER-Instruction.htm&#34;&gt;System Call Optimization with the SYSENTER Instruction&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://articles.manugarg.com/systemcallinlinux2_6.html&#34;&gt;Sysenter Based System Call Mechanism in Linux 2.6&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;system-call-restart-mechanism-and-orig-eax&#34;&gt;system call restart mechanism and ORIG_EAX&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/17744/&#34;&gt;A new system call restart mechanism&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lkml.org/lkml/2006/8/29/350&#34;&gt;Why set ORIG_EAX(%esp) to -1 in arch/i386/kernel/entry.S:error_code?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;kernel-implementations&#34;&gt;kernel implementations&lt;/h2&gt;

&lt;p&gt;arch/x86/include/asm/proto.h&lt;br /&gt;
64-bit long mode: syscall; check syscall_init&lt;br /&gt;
64-bit compatible kernel: sysenter, syscall, or int 0x80; check __kernel_vsyscall and def_idts&lt;br /&gt;
32-bit kernel: int 0x80, sysenter;&lt;/p&gt;

&lt;h3 id=&#34;64-bit-without-compat-32-compatible-kernel-support&#34;&gt;64-bit without COMPAT_32/compatible kernel support&lt;/h3&gt;

&lt;p&gt;./int80&lt;br /&gt;
[  730.583700] traps: int80[1697] general protection ip:4000c4 sp:7ffd84b59730 error:402 in int80[400000+1000]&lt;br /&gt;
Segmentation fault (core dumped)&lt;/p&gt;

&lt;h2 id=&#34;x86-64-rcx-and-r10&#34;&gt;x86_64 rcx and r10&lt;/h2&gt;

&lt;p&gt;Check x86_64 ABI: Linux conventions and  according to &lt;a href=&#34;https://www.felixcloutier.com/x86/syscall&#34;&gt;x86 syscall instruction&lt;/a&gt;, rcx is used to passing next rip.&lt;br /&gt;
According to entry_SYSCALL_64, rcx is rip before it is pushed on the kernel stack. So r10 is right 4th args passed from userspace.&lt;br /&gt;
According to do_syscall_64, regs-&amp;gt;ax = sys_call_table&lt;a href=&#34;regs-&amp;gt;di, regs-&amp;gt;si, regs-&amp;gt;dx, regs-&amp;gt;r10, regs-&amp;gt;r8, regs-&amp;gt;r9&#34;&gt;nr&lt;/a&gt;;&lt;/p&gt;

&lt;h2 id=&#34;x86-32-asmlinkage&#34;&gt;x86_32 asmlinkage&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://qr.ae/Ti5MJJ&#34;&gt;By default gcc passes parameters on the stack for x86-32 arch, so what is it needed for? It&amp;rsquo;s because linux kernel uses -mregparm=3 option which overrides the default behaviour&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/67175/&#34;&gt;enbaled -mregparm=3 Shrinking the kernel with gcc&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://kernelnewbies.org/FAQ/asmlinkage&#34;&gt;What is asmlinkage?&lt;/a&gt;&lt;br /&gt;
However, for C functions invoked from assembly code, we should explicitly declare the function&amp;rsquo;s calling convention, because the parameter passing code in assembly side has been fixed. Show all predefined macros for your compiler&lt;/p&gt;

&lt;h2 id=&#34;hacking&#34;&gt;Hacking&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.exploit-db.com/papers/13146&#34;&gt;Obtain sys_call_table on amd64(x86_64)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vdso&#34;&gt;vDSO&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.linuxjournal.com/content/creating-vdso-colonels-other-chicken?page=0,0&#34;&gt;Creating a vDSO: the Colonel&amp;rsquo;s Other Chicken&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.trilithium.com/johan/2005/08/linux-gate/&#34;&gt;What is linux-gate.so.1&lt;/a&gt;&lt;br /&gt;
glibc -&amp;gt; AT_SYSINFO-&amp;gt; __kernel_vsyscall -&amp;gt; sysenter/syscall/in0x80&lt;br /&gt;
just for vDSO syscalls&lt;br /&gt;
glibc -&amp;gt; AT_SYSINFO_EHDR-&amp;gt; vDSO elf&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/446528/&#34;&gt;On vsyscalls and the vDSO&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://blog.tinola.com/?e=5&#34;&gt;linux syscalls on x86 64&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Journey to RCU</title>
      <link>http://firoyang.org/cs/rcu_/</link>
      <pubDate>Sun, 24 May 2015 09:52:12 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/rcu_/</guid>
      <description>

&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;RCU, cond_resched(), and performance regressions &lt;a href=&#34;https://lwn.net/Articles/603252/&#34;&gt;https://lwn.net/Articles/603252/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://preshing.com/20160726/using-quiescent-states-to-reclaim-memory/&#34;&gt;Using Quiescent States to Reclaim Memory&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/Design/Requirements/Requirements.html&#34;&gt;A Tour Through RCU&amp;rsquo;s Requirements&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.rdrop.com/~paulmck/RCU/rcu-exploit.2019.05.01a.pdf&#34;&gt;A Critical RCU Safety Property is&amp;hellip; Ease of Use!&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.rdrop.com/users/paulmck/RCU/whatisRCU.html&#34;&gt;What is RCU?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/whatisRCU.txt&#34;&gt;What is RCU?  &amp;ndash;  &amp;ldquo;Read, Copy, Update&amp;rdquo;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/652156/&#34;&gt;Requirements for RCU part 1: the fundamentals&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;2001 &lt;a href=&#34;https://www.kernel.org/doc/ols/2001/read-copy.pdf&#34;&gt;Read-Copy Update on ols&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/541037/&#34;&gt;As of March 2013: Simplifying RCU&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www2.rdrop.com/users/paulmck/RCU/RCUdissertation.2004.07.14e1.pdf&#34;&gt;RCU dissertation.2004.07&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/264090/&#34;&gt;RCU part 3: the RCU API, 2008 edition&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/418853/&#34;&gt;The RCU API, 2010 Edition&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/609904/&#34;&gt;The RCU API, 2014 Edition&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/777036/&#34;&gt;The RCU API, 2019 edition&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;rcu-talk-by-joel-fernandes&#34;&gt;RCU Talk by Joel Fernandes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joelfernandes.org/joel/slides/RCU_in_2019_KernelRecipes.pdf&#34;&gt;RCU in 2019&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=bsyXDAouI6E&#34;&gt;Kernel Recipes 2019 - RCU in 2019&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.slideshare.net/ennael/kernel-recipes-2019-rcu-in-2019-joel-fernandes&#34;&gt;https://www.slideshare.net/ennael/kernel-recipes-2019-rcu-in-2019-joel-fernandes&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;and&#34;&gt;And&lt;/h2&gt;

&lt;p&gt;Verification of the Tree-Based Hierarchical Read-Copy Update in the Linux Kernel: &lt;a href=&#34;https://arxiv.org/pdf/1610.03052.pdf&#34;&gt;https://arxiv.org/pdf/1610.03052.pdf&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/Design/Data-Structures/Data-Structures.html#The%20rcu_segcblist%20Structure&#34;&gt;https://www.kernel.org/doc/Documentation/RCU/Design/Data-Structures/Data-Structures.html#The%20rcu_segcblist%20Structure&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-problems-refrence&#34;&gt;The problems - refrence&lt;/h1&gt;

&lt;p&gt;The fundermental problems underlying RCU is how to make sure if there is a refrence to the data which is going to be reclaim.&lt;br /&gt;
So RCU is essentially used as resource-reclamation mechanism. And we know there are 3 popular ways hazard pointer, reference counting, Quiescent state to do rerouce reclamation. RCU use quiescent state.&lt;/p&gt;

&lt;h1 id=&#34;quiescent-state-in-linux-kernel&#34;&gt;Quiescent state in Linux kernel&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/573424/&#34;&gt;URCU: Any line of code not in an RCU read-side critical section is termed a quiescent state&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://lse.sourceforge.net/locking/rcu/HOWTO/descrip.html&#34;&gt;&amp;hellip; after all the CPUs in the system have gone through at least one &amp;ldquo;quiescent&amp;rdquo; state (such as context switch, idle loop, or user code)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/305782/#Pass%20through%20a%20quiescent%20state.&#34;&gt;The rcu and rcu_bh flavors of RCU have different sets of quiescent states.&lt;/a&gt;&lt;br /&gt;
rcu_flavor_sched_clock_irq rcu_rs&lt;br /&gt;
rcu_report_qs_rnp&lt;/p&gt;

&lt;h2 id=&#34;cpu-vs-qs&#34;&gt;CPU vs QS&lt;/h2&gt;

&lt;p&gt;@冯博群 你好，请教一个问题，对于rcu-preempt， CPU report QS的意义是什么？ 我理解只有task QS 才不block GP。&lt;br /&gt;
冯博群: qs都是CPU的，每个task都要report qs的话，那记录的结构得多复杂; rcu preempt是搞了一个list用来记录block当前qs的task; 当前gp; 过gp的条件就是list为空，且所有的CPU都report过qs;你说得概念上没啥问题，但是实现中不是这样作的.&lt;/p&gt;

&lt;h2 id=&#34;eqs&#34;&gt;EQS&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;RCU implementations that avoid unnecessarily awakening dyntick-idle CPUs will mark those CPUs as being in an extended quiescent state from Hierarchical RCU&lt;br /&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/305782/&#34;&gt;https://lwn.net/Articles/305782/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;eqs-vs-interrupt-vs-read-side-section&#34;&gt;EQS vs interrupt vs read-side section&lt;/h2&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
&lt;dt&gt;Hierarchical RCU&lt;br /&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/305782/&#34;&gt;https://lwn.net/Articles/305782/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;eqs-vs-interrupt-vs-read-side-section-1&#34;&gt;EQS vs interrupt vs read-side section&lt;/h2&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;heavy-and-light&#34;&gt;Heavy and light&lt;/h2&gt;

&lt;h1 id=&#34;grace-period-time-to-reclaim&#34;&gt;Grace period - time to reclaim&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/573424/&#34;&gt;URCU: any period of time during which each reader thread resides in at least one quiescent state is called a grace period.&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/305782/#Brief%20Overview%20of%20Classic%20RCU%20Implementation&#34;&gt;&amp;hellip; after each CPU has passed through at least one quiescent state, the RCU grace period ends.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;gp-vs-qs-vs-read-vs-updater&#34;&gt;GP vs QS vs read vs updater&lt;/h2&gt;

&lt;p&gt;GP: rcu_state&lt;br /&gt;
QS: rcu_data&lt;br /&gt;
data: rcu_head&lt;br /&gt;
1. when to start GP&lt;br /&gt;
Updater want to free data if no GP is in-progress.&lt;/p&gt;

&lt;h2 id=&#34;gp-vs-data-callback&#34;&gt;GP vs Data(callback)&lt;/h2&gt;

&lt;p&gt;continuos Data on GP. Segmented.&lt;/p&gt;

&lt;h2 id=&#34;deffered-qs&#34;&gt;Deffered QS&lt;/h2&gt;

&lt;p&gt;rcu_flavor_sched_clock_irq&lt;br /&gt;
rcu_preempt_deferred_qs&lt;br /&gt;
Reporting of a deferred QS reporting (when rcu_read_unlock() could not help).&lt;/p&gt;

&lt;h2 id=&#34;memory-ordering&#34;&gt;Memory ordering&lt;/h2&gt;

&lt;p&gt;A Tour Through TREE_RCU’s Grace-Period Memory Ordering &lt;a href=&#34;https://www.kernel.org/doc/html/latest/RCU/Design/Memory-Ordering/Tree-RCU-Memory-Ordering.html&#34;&gt;https://www.kernel.org/doc/html/latest/RCU/Design/Memory-Ordering/Tree-RCU-Memory-Ordering.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;start-a-grapce-period&#34;&gt;Start a grapce period&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/305782/#Start%20a%20new%20grace%20period.&#34;&gt;Start a New Grace Period&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;expedite-grace-period&#34;&gt;Expedite grace period&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/Design/Expedited-Grace-Periods/Expedited-Grace-Periods.html&#34;&gt;Expedited Grace Period Design&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;process-data&#34;&gt;Process data&lt;/h1&gt;

&lt;h2 id=&#34;callbacks-vs-gp-vs-segments&#34;&gt;Callbacks vs GP vs segments&lt;/h2&gt;

&lt;p&gt;GP is completed, current, next&lt;br /&gt;
commit 5127bed588a2f8f3a1f732de2a8a190b7df5dce3&lt;br /&gt;
Author: Lai Jiangshan &lt;a href=&#34;mailto:laijs@cn.fujitsu.com&#34;&gt;laijs@cn.fujitsu.com&lt;/a&gt;&lt;br /&gt;
Date:   Sun Jul 6 17:23:59 2008 +0800&lt;br /&gt;
    rcu classic: new algorithm for callbacks-processing(v2)&lt;/p&gt;

&lt;h3 id=&#34;next-segment-list&#34;&gt;Next segment list&lt;/h3&gt;

&lt;p&gt;Finally, the RCU NEXT TAIL segment contains callbacks that are not yet associated with any grace period. from V..&lt;br /&gt;
RCU_NEXT_TAIL: Callbacks that have not yet been associated with a grace period. from design/data-structure.&lt;br /&gt;
commit 64db4cfff99c04cd5f550357edcc8780f96b54a2&lt;br /&gt;
Refs: v2.6.28-rc8-92-g64db4cfff99c&lt;br /&gt;
Author:     Paul E. McKenney &lt;a href=&#34;mailto:paulmck@kernel.org&#34;&gt;paulmck@kernel.org&lt;/a&gt;&lt;br /&gt;
AuthorDate: Thu Dec 18 21:55:32 2008 +0100&lt;br /&gt;
Commit:     Ingo Molnar &lt;a href=&#34;mailto:mingo@elte.hu&#34;&gt;mingo@elte.hu&lt;/a&gt;&lt;br /&gt;
CommitDate: Thu Dec 18 21:56:04 2008 +0100&lt;br /&gt;
    &amp;ldquo;Tree RCU&amp;rdquo;: scalable classic RCU implementation&lt;br /&gt;
+        * [*nxttail[RCU_NEXT_READY_TAIL], NULL = *nxttail[RCU_NEXT_TAIL]):&lt;br /&gt;
+        *      Entries that might have arrived after current GP ended&lt;br /&gt;
+        * [*nxttail[RCU_WAIT_TAIL], *nxttail[RCU_NEXT_READY_TAIL]):&lt;br /&gt;
+        *      Entries known to have arrived before current GP ended&lt;br /&gt;
commit 15fecf89e46a962ccda583d919e25d9da7bf0723&lt;br /&gt;
Refs: v4.11-rc2-13-g15fecf89e46a&lt;br /&gt;
Author:     Paul E. McKenney &lt;a href=&#34;mailto:paulmck@kernel.org&#34;&gt;paulmck@kernel.org&lt;/a&gt;&lt;br /&gt;
AuthorDate: Wed Feb 8 12:36:42 2017 -0800&lt;br /&gt;
Commit:     Paul E. McKenney &lt;a href=&#34;mailto:paulmck@kernel.org&#34;&gt;paulmck@kernel.org&lt;/a&gt;&lt;br /&gt;
CommitDate: Tue Apr 18 11:38:18 2017 -0700&lt;br /&gt;
    srcu: Abstract multi-tail callback list handling&lt;br /&gt;
+ * [*tails[RCU_NEXT_READY_TAIL], *tails[RCU_NEXT_TAIL]):&lt;br /&gt;
+ *     Callbacks that might have arrived after the next GP started.&lt;/p&gt;

&lt;h2 id=&#34;adavnce-segments&#34;&gt;Adavnce segments&lt;/h2&gt;

&lt;p&gt;rcu_advance_cbs&lt;br /&gt;
rcu_segcblist_advance&lt;br /&gt;
note_gp_changes&lt;br /&gt;
If an old grace period has ended,&lt;br /&gt;
rcu advance cbs() is invoked to advance all callbacks,&lt;br /&gt;
otherwise, rcu accelerate cbs() is invoked to assign a&lt;br /&gt;
grace period to any recently arrived callbacks. If a new grace&lt;br /&gt;
period has started, -&amp;gt;passed quiesce is set to zero, and if&lt;br /&gt;
in addition RCU is waiting for a quiescent state from this&lt;br /&gt;
CPU, -&amp;gt;qs pending is set to one, so that a new quiescent&lt;br /&gt;
state will be detected for the new grace period.&lt;br /&gt;
&lt;a href=&#34;https://github.com/lihaol/verify-treercu/blob/master/main.c&#34;&gt;https://github.com/lihaol/verify-treercu/blob/master/main.c&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;accelerate&#34;&gt;Accelerate&lt;/h2&gt;

&lt;p&gt;rcu_segcblist_accelerate - the core function&lt;/p&gt;

&lt;h2 id=&#34;batch-processing&#34;&gt;Batch processing&lt;/h2&gt;

&lt;h2 id=&#34;rcu-callbacks-offload&#34;&gt;RCU callbacks offload&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/522262/&#34;&gt;Relocating RCU callbacks&lt;/a&gt;&lt;br /&gt;
API 14: &lt;a href=&#34;https://lwn.net/Articles/609904/&#34;&gt;https://lwn.net/Articles/609904/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;rcu-cpu-stall&#34;&gt;RCU CPU stall&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/stallwarn.txt&#34;&gt;https://www.kernel.org/doc/Documentation/RCU/stallwarn.txt&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=23_GOr8Sz-E&#34;&gt;Decoding Those Inscrutable RCU CPU Stall Warnings&lt;/a&gt;&lt;br /&gt;
update_process_times rcu_pending print_other_cpu_stall print_cpu_stall_info&lt;/p&gt;

&lt;h1 id=&#34;rcu-and-dynticks&#34;&gt;RCU and dynticks&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ertl.jp/~shinpei/conf/ospert13/slides/FredericWeisbecker.pdf&#34;&gt;Status of Linux dynticks&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=G3jHP9kNjwc&#34;&gt;Full dynticks status - Frederic Weisbecker, Red Hat&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.joelfernandes.org/linuxinternals/2018/06/15/rcu-dynticks.html&#34;&gt;RCU and dynticks-idle mode&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;upcall&#34;&gt;Upcall&lt;/h2&gt;

&lt;p&gt;/*&lt;br /&gt;
 * Exit an RCU extended quiescent state, which can be either the&lt;br /&gt;
 * idle loop or adaptive-tickless usermode execution.&lt;br /&gt;
 *&lt;br /&gt;
 * We crowbar the -&amp;gt;dynticks_nmi_nesting field to DYNTICK_IRQ_NONIDLE to&lt;br /&gt;
 * allow for the possibility of usermode upcalls messing up our count of&lt;br /&gt;
 * interrupt nesting level during the busy period that is just now starting.&lt;br /&gt;
 */&lt;br /&gt;
static void noinstr rcu_eqs_exit(bool user)&lt;br /&gt;
See desgin/data-structures&lt;br /&gt;
However, it turns out that when running in non-idle kernel context, the Linux kernel is fully capable of entering interrupt handlers that never exit and perhaps also vice versa. Therefore, whenever the -&amp;gt;dynticks_nesting field is incremented up from zero, the -&amp;gt;dynticks_nmi_nesting field is set to a large positive number, and whenever the -&amp;gt;dynticks_nesting field is decremented down to zero, the the -&amp;gt;dynticks_nmi_nesting field is set to zero. Assuming that the number of misnested interrupts is not sufficient to overflow the counter, this approach corrects the -&amp;gt;dynticks_nmi_nesting field every time the corresponding CPU enters the idle loop from process context.&lt;/p&gt;

&lt;h2 id=&#34;translation-for-hierarchical-rcu&#34;&gt;Translation for Hierarchical RCU&lt;/h2&gt;

&lt;p&gt;rcu_enter_nohz -&amp;gt; rcu_idle_enter&lt;br /&gt;
RCU idle includes eqs which includes&lt;br /&gt;
/*&lt;br /&gt;
 * Enter an RCU extended quiescent state, which can be either the&lt;br /&gt;
 * idle loop or adaptive-tickless usermode execution.&lt;br /&gt;
 *&lt;br /&gt;
 * We crowbar the -&amp;gt;dynticks_nmi_nesting field to zero to allow for&lt;br /&gt;
 * the possibility of usermode upcalls having messed up our count&lt;br /&gt;
 * of interrupt nesting level during the prior busy period.&lt;br /&gt;
 */&lt;br /&gt;
static noinstr void rcu_eqs_enter(bool user)&lt;br /&gt;
Firo: so extended quiescent state includes non-extended quiescent state.&lt;/p&gt;

&lt;p&gt;rcu_dynticks_in_eqs&lt;br /&gt;
rcu_dynticks_curr_cpu_in_eqs&lt;/p&gt;

&lt;h3 id=&#34;special-bottom-bit-in-rcu-data-dynticks&#34;&gt;Special/bottom bit in rcu_data:: dynticks&lt;/h3&gt;

&lt;p&gt;commit b8c17e6664c461e4aed545a943304c3b32dd309c&lt;br /&gt;
Refs: v4.11-rc2-1-gb8c17e6664c4&lt;br /&gt;
Author:     Paul E. McKenney &lt;a href=&#34;mailto:paulmck@kernel.org&#34;&gt;paulmck@kernel.org&lt;/a&gt;&lt;br /&gt;
AuthorDate: Tue Nov 8 14:25:21 2016 -0800&lt;br /&gt;
Commit:     Paul E. McKenney &lt;a href=&#34;mailto:paulmck@kernel.org&#34;&gt;paulmck@kernel.org&lt;/a&gt;&lt;br /&gt;
CommitDate: Tue Apr 18 11:19:22 2017 -0700&lt;br /&gt;
    rcu: Maintain special bits at bottom of -&amp;gt;dynticks counter&lt;/p&gt;

&lt;h3 id=&#34;rcu-data-dynticks-counter-validate-by-warn-on&#34;&gt;rcu_data::dynticks counter? validate by warn on?&lt;/h3&gt;

&lt;p&gt;Integrating and Validating dynticks and Preemptable RCU?? &lt;a href=&#34;https://lwn.net/Articles/279077/&#34;&gt;https://lwn.net/Articles/279077/&lt;/a&gt;&lt;br /&gt;
输了又怎样？&lt;/p&gt;

&lt;h1 id=&#34;model&#34;&gt;Model&lt;/h1&gt;

&lt;p&gt;A GP completed seq A&lt;br /&gt;
CBs to process&lt;br /&gt;
New GP in-progress&lt;br /&gt;
CBs waiting for GP seq B&lt;/p&gt;

&lt;h1 id=&#34;tree-rcu-hierarchical-rcu&#34;&gt;Tree RCU / Hierarchical RCU&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/305782&#34;&gt;Hierarchical RCU&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/Design/Data-Structures/Data-Structures.html&#34;&gt;A Tour Through TREE_RCU&amp;rsquo;s Data Structures&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/Design/Expedited-Grace-Periods/Expedited-Grace-Periods.html&#34;&gt;A Tour Through TREE_RCU&amp;rsquo;s Expedited Grace Periods&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/453002/&#34;&gt;Tree preempt RCU: 3.0 and RCU: what went wrong&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.kroening.com/papers/date2018-rcu.pdf&#34;&gt;Verification of Tree-Based Hierarchical Read-Copy Update in the Linux Kernel&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;rcu-sched&#34;&gt;RCU sched&lt;/h1&gt;

&lt;p&gt;commit 9b06e818985d139fd9e82c28297f7744e1b484e1&lt;br /&gt;
Refs: v2.6.12-rc3-362-g9b06e818985d&lt;br /&gt;
Author:     Paul E. McKenney &lt;a href=&#34;mailto:paulmck@us.ibm.com&#34;&gt;paulmck@us.ibm.com&lt;/a&gt;&lt;br /&gt;
AuthorDate: Sun May 1 08:59:04 2005 -0700&lt;br /&gt;
Commit:     Linus Torvalds &lt;a href=&#34;mailto:torvalds@ppc970.osdl.org&#34;&gt;torvalds@ppc970.osdl.org&lt;/a&gt;&lt;br /&gt;
CommitDate: Sun May 1 08:59:04 2005 -0700&lt;br /&gt;
    [PATCH] Deprecate synchronize_kernel, GPL replacement&lt;br /&gt;
    The synchronize_kernel() primitive is used for quite a few different purposes:&lt;br /&gt;
    waiting for RCU readers, waiting for NMIs, waiting for interrupts, and so on.&lt;br /&gt;
    This makes RCU code harder to read, since synchronize_kernel() might or might&lt;br /&gt;
    not have matching rcu_read_lock()s.  This patch creates a new&lt;br /&gt;
    synchronize_rcu() that is to be used for RCU readers and a new&lt;br /&gt;
    synchronize_sched() that is used for the rest.  These two new primitives&lt;br /&gt;
    currently have the same implementation, but this is might well change with&lt;br /&gt;
    additional real-time support.&lt;br /&gt;
+ * synchronize_sched - block until all CPUs have exited any non-preemptive&lt;br /&gt;
+ * kernel code sequences.&lt;br /&gt;
+ * This means that all preempt_disable code sequences, including NMI and&lt;br /&gt;
+ * hardware-interrupt handlers, in progress on entry will have completed&lt;br /&gt;
+ * before this primitive returns.  However, this does not guarantee that&lt;br /&gt;
+ * softirq handlers will have completed, since in some kernels&lt;br /&gt;
+ * This primitive provides the guarantees made by the (deprecated)&lt;br /&gt;
+ * synchronize_kernel() API.  In contrast, synchronize_rcu() only&lt;br /&gt;
+ * guarantees that rcu_read_lock() sections will have completed.&lt;/p&gt;

&lt;h2 id=&#34;quiescent-states-for-rcu-sched&#34;&gt;Quiescent states for RCU-sched&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.kroening.com/papers/date2018-rcu.pdf&#34;&gt;Verification of Tree-Based Hierarchical Read-Copy Update in the Linux Kernel&lt;/a&gt;&lt;br /&gt;
The non-preemptible RCU-sched flavor’s quiescent states apply to CPUs, and are user-space execution, context switch, idle, and offline state. Therefore, RCU-sched only needs to track tasks and interrupt handlers that are actually running because blocked and preempted tasks are always in quiescent states. Thus, RCU-sched needs only track CPU states.&lt;/p&gt;

&lt;h1 id=&#34;rcu-preempt-preemptiable-rcu&#34;&gt;RCU-preempt Preemptiable RCU&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joelfernandes.org/linuxinternals/2018/05/10/5-rcu-preempt-context-switch.html&#34;&gt; RCU-preempt: What happens on a context switch&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.rdrop.com/users/paulmck/RCU/realtimeRCU.2005.04.23a.pdf&#34;&gt;Towards Hard Realtime Response from the Linux Kernel on SMP Hardware&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/201195/&#34;&gt;The 1st: Read-copy-update for realtime&lt;/a&gt; &lt;a href=&#34;http://www.rdrop.com/users/paulmck/RCU/OLSrtRCU.2006.08.11a.pdf&#34;&gt;Papper&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/253651/&#34;&gt;The design of preemptible read-copy-update&lt;/a&gt;&lt;br /&gt;
The RCU implementation for the -rt patchset is unusual in that it permits read-side critical sections to be preempted and to be blocked waiting for locks. However, it does not handle general blocking (for example, via the wait_event() primitive): if you need that, you should instead use SRCU.&lt;br /&gt;
&lt;a href=&#34;http://www.rdrop.com/users/paulmck/RCU/realtimeRCU.2005.04.23a.pdf&#34;&gt;Realtime RCU&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.joelfernandes.org/linuxinternals/2018/05/10/5-rcu-preempt-context-switch.html&#34;&gt;RCU-preempt: What happens on a context switch&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;+#define RCU_READ_UNLOCK_NEED_QS (1 &amp;lt;&amp;lt; 2) /* RCU core needs CPU response. */&lt;br /&gt;
f41d911f8c49a5d65c86504c19e8204bb605c4fd&lt;br /&gt;
need_qs&lt;br /&gt;
1d082fd061884a587c490c4fc8a2056ce1e47624&lt;/p&gt;

&lt;h2 id=&#34;rcu-preempt-and-sleeping&#34;&gt;RCU-preempt and sleeping&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joelfernandes.org/linuxinternals/2018/05/10/5-rcu-preempt-context-switch.html&#34;&gt;A recent discussion on LKML clarified to me that “preempted to run something else” not only covers involuntary preemption but also voluntarily sleeping.&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;joelfernandes.org/linuxinternals/2018/05/10/5-rcu-preempt-context-switch.html&#34;&gt;The exception is -rt &amp;ldquo;spinlock&amp;rdquo; acquisition.  If the &amp;ldquo;spinlock&amp;rdquo; is held,&lt;/a&gt;&lt;br /&gt;
the task acquiring it will block, which is legal within an RCU-preempt&lt;br /&gt;
read-side critical section.&lt;br /&gt;
This exception is why I define bad things in terms of lack of&lt;br /&gt;
susceptibility to priority boosting instead of sleeping.&lt;/p&gt;

&lt;h2 id=&#34;priority-boosting-rcu&#34;&gt;Priority-Boosting RCU&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/220677/&#34;&gt;Priority-Boosting RCU Read-Side Critical Sections&lt;/a&gt;&lt;br /&gt;
CONFIG_RCU_BOOST&lt;/p&gt;

&lt;h1 id=&#34;rcu-bh&#34;&gt;RCU bh&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/lkml/CAJWu+oqCun1Ae6GqPxnS+eCDi3jadGPp+MO8TjOWgs+AiAh79A@mail.gmail.com/&#34;&gt;rcu-bh design by Joel Fernandes &lt;a href=&#34;mailto:joelaf@google.com&#34;&gt;joelaf@google.com&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/Documentation/RCU/Design/Requirements/Requirements.html#Bottom-Half%20Flavor&#34;&gt;From kernel doc rcu design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The softirq-disable (AKA “bottom-half”, hence the “_bh” abbreviations) flavor of RCU, or RCU-bh, was developed by Dipankar Sarma to provide a flavor of RCU that could withstand the network-based denial-of-service attacks researched by Robert Olsson. These attacks placed so much networking load on the system that some of the CPUs never exited softirq execution, which in turn prevented those CPUs from ever executing a context switch, which, in the RCU implementation of that time, prevented grace periods from ever ending. The result was an out-of-memory condition and a system hang.&lt;br /&gt;
The solution was the creation of RCU-bh, which does local_bh_disable() across its read-side critical sections, and which uses &lt;em&gt;the transition from one type of softirq processing to another as a quiescent state in addition to context switch, idle, user mode, and offline&lt;/em&gt;. This means that RCU-bh grace periods can complete even when some of the CPUs execute in softirq indefinitely, thus allowing algorithms based on RCU-bh to withstand network-based denial-of-service attacks.&lt;/p&gt;

&lt;h1 id=&#34;srcu&#34;&gt;SRCU&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/202847/&#34;&gt;Sleepable RCU&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;tasks-rcu&#34;&gt;Tasks RCU&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/607117/&#34;&gt;The RCU-tasks subsystem&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;tiny-rcu-rcu-the-bloatwatch-edition&#34;&gt;Tiny RCU / RCU: The Bloatwatch Edition&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/323929/&#34;&gt;RCU: The Bloatwatch Edition&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/396767/&#34;&gt;rcu: Add a TINY_PREEMPT_RCU&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lore.kernel.org/patchwork/patch/373048/&#34;&gt;rcu: Remove TINY_PREEMPT_RCU&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;classic-rcu-let-it-die-peacefully&#34;&gt;Classic RCU - let it die peacefully&lt;/h1&gt;

&lt;p&gt;tags/v2.6.32-rc1~724^2~29&lt;br /&gt;
commit c17ef45342cc033fdf7bdd5b28615e0090f8d2e7&lt;br /&gt;
Author: Paul E. McKenney &lt;a href=&#34;mailto:paulmck@linux.vnet.ibm.com&#34;&gt;paulmck@linux.vnet.ibm.com&lt;/a&gt;&lt;br /&gt;
Date:   Tue Jun 23 17:12:47 2009 -0700&lt;br /&gt;
    rcu: Remove Classic RCU&lt;br /&gt;
    Remove Classic RCU, given that the combination of Tree RCU and&lt;br /&gt;
    the proposed Bloatwatch RCU do everything that Classic RCU can&lt;br /&gt;
    with fewer bugs.&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/305782/#Brief%20Overview%20of%20Classic%20RCU%20Implementation&#34;&gt;Brief Overview of Classic RCU Implementation&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.wowotech.net/kernel_synchronization/linux2-6-11-RCU.html&#34;&gt;Linux2.6.11版本：classic RCU的实现&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;jargons&#34;&gt;Jargons&lt;/h1&gt;

&lt;h2 id=&#34;rcu-is-mapped-to-either-rcu-sched-or-rcu-preempt-depending-on-configuration&#34;&gt;RCU is mapped to either RCU-sched or RCU-preempt depending on configuration.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/patchwork/cover/164913/&#34;&gt;[RFC,-tip,0/4] RCU cleanups and simplified preemptable RCU&lt;/a&gt;&lt;br /&gt;
o   Rename variables and functions so that RCU-sched is an&lt;br /&gt;
    underlying definition, along with RCU-bh and (when so&lt;br /&gt;
    configured) RCU-preempt.  RCU then maps to either RCU-sched&lt;br /&gt;
    or RCU-preempt, depending on configuration.&lt;br /&gt;
commit d6714c22b43fbcbead7e7b706ff270e15f04a791&lt;br /&gt;
Refs: v2.6.31-rc6-15-gd6714c22b43f&lt;br /&gt;
Author:     Paul E. McKenney &lt;a href=&#34;mailto:paulmck@linux.vnet.ibm.com&#34;&gt;paulmck@linux.vnet.ibm.com&lt;/a&gt;&lt;br /&gt;
AuthorDate: Sat Aug 22 13:56:46 2009 -0700&lt;br /&gt;
Commit:     Ingo Molnar &lt;a href=&#34;mailto:mingo@elte.hu&#34;&gt;mingo@elte.hu&lt;/a&gt;&lt;br /&gt;
CommitDate: Sun Aug 23 10:32:37 2009 +0200&lt;br /&gt;
    rcu: Renamings to increase RCU clarity&lt;br /&gt;
    Make RCU-sched, RCU-bh, and RCU-preempt be underlying&lt;br /&gt;
    implementations, with &amp;ldquo;RCU&amp;rdquo; defined in terms of one of the&lt;br /&gt;
    three.  Update the outdated rcu_qsctr_inc() names, as these&lt;br /&gt;
    functions no longer increment anything.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yet another guide on the way to linux kernel hacking</title>
      <link>http://firoyang.org/cs/kernel_hacking/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 UTC</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/kernel_hacking/</guid>
      <description>

&lt;h1 id=&#34;hacking-goals&#34;&gt;Hacking goals&lt;/h1&gt;

&lt;h2 id=&#34;trade-time-for-space&#34;&gt;Trade time for space&lt;/h2&gt;

&lt;p&gt;search_exception_tables&lt;/p&gt;

&lt;h1 id=&#34;define-asm-extable-handle-from-to-handler&#34;&gt;define _ASM_EXTABLE_HANDLE(from, to, handler)                 &lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    .pushsection &amp;quot;__ex_table&amp;quot;,&amp;quot;a&amp;quot; ;                         \
    .balign 4 ;                                             \
    .long (from) - . ;                                      \
    .long (to) - . ;                                        \
    .long (handler) - . ;                                   \
    .popsection
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;hacking-area&#34;&gt;Hacking area&lt;/h1&gt;

&lt;p&gt;mm&lt;br /&gt;
&lt;a href=&#34;https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project&#34;&gt;https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/749064/&#34;&gt;Variable-length arrays and the max() mess&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=wlqjQe3vDx8&amp;amp;list=PLbzoR-pLrL6rOT6m50HdJFYUHyvA9lurI&amp;amp;index=11&amp;amp;t=0s&#34;&gt;Sub-system Update: Kernel Self-Protection Project - Kees Cook, Google&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;kernel-refactoring&#34;&gt;Kernel refactoring&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://linuxtv.org/wiki/index.php/Development:_Hints_for_Refactoring_Existing_Drivers&#34;&gt;https://linuxtv.org/wiki/index.php/Development:_Hints_for_Refactoring_Existing_Drivers&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=mxxicJZ8cis&#34;&gt;Kernel Recipes 2017 - Refactoring the Linux Kernel - Thomas Gleixner&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;feature&#34;&gt;Feature&lt;/h2&gt;

&lt;p&gt;some results or progress information for PFRA&lt;/p&gt;

&lt;h2 id=&#34;write-your-own-kernel&#34;&gt;Write your own kernel&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://os.phil-opp.com/&#34;&gt;Writing an OS in Rust&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.brokenthorn.com/Resources/OSDevIndex.html&#34;&gt;BrokenThorn Entertainment Operating System Development Series&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;learning-kernel&#34;&gt;Learning kernel&lt;/h1&gt;

&lt;h2 id=&#34;is-reading-codes-a-way-to-learn-kernel&#34;&gt;Is reading codes a way to learn kernel&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.itwire.com/opinion-and-analysis/open-sauce/44975-linus-torvalds-looking-back-looking-forward&#34;&gt;https://www.itwire.com/opinion-and-analysis/open-sauce/44975-linus-torvalds-looking-back-looking-forward&lt;/a&gt;&lt;br /&gt;
iTWire: Do you ever find yourself reading the source code to other open source operating system (kernels), e.g., NetBSD, to see how a particular feature is implemented? What I mean is, as an author do you have/make time to read code other than kernel code, either for amusement or education?&lt;br /&gt;
LT: I haven&amp;rsquo;t ever really found it useful to read other people&amp;rsquo;s code for ideas - source code is a singularly bad medium for transferring high-level concepts, since the whole point is to tell a really stupid computer exactly what to do, rather than explain it at any human level.&lt;br /&gt;
So no, I wouldn&amp;rsquo;t read code to see how something is implemented. I&amp;rsquo;d read code to see why something doesn&amp;rsquo;t &lt;em&gt;work&lt;/em&gt; - but then it wouldn&amp;rsquo;t be another OS, it would be something like reading the source code of zlib when I wondered why git spent so much time in some particular library routine ;)In general, I&amp;rsquo;d much rather read a book meant for humans than code meant for computers. It&amp;rsquo;s how I started - I still remember Bach&amp;rsquo;s &amp;ldquo;The Design of the Unix Operating System&amp;rdquo; fondly. That&amp;rsquo;s how I learnt about how Unix worked. Not to mention Tanenbaum&amp;rsquo;s &amp;ldquo;Operating Systems: Design and Implementation&amp;rdquo; book.&lt;br /&gt;
These days? No, I don&amp;rsquo;t read OS books any more. I actually seldom read computer books at all.&lt;/p&gt;

&lt;h1 id=&#34;build&#34;&gt;Build&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;if no .config, every config tools make a .config from scrach!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;oldconfig just for new moduels patch merged in trunk. This no any relations to .config.old and /boot/config.x.y.z&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;make localmodconfig will reduce many unused kernel config.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;make bzImage  #kmods will not build that configured with M!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;make modules_install INSTALL_MOD_PATH=/home/firo/kmods&lt;br /&gt;
##build signle kernel module&lt;br /&gt;
make menuconfig&lt;br /&gt;
make oldconfig &amp;amp;&amp;amp; make prepare&lt;br /&gt;
make -C $(pwd) M=/home/firo/linux/fs/ext3 modules V=1&lt;br /&gt;
make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnu- drivers/pcmcia/sa11xx_base.o&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;old-kernel&#34;&gt;Old kernel&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://oldlinux.org/Linux.old/mail-archive/&#34;&gt;http://oldlinux.org/Linux.old/mail-archive/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;git-repos&#34;&gt;Git repos&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/572068/&#34;&gt;Git tree maintenance&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;next-tree-2-6-1x-latest-tree-please-rebase-your-patch-against-this-tree-before-sending-it-to-upstream&#34;&gt;next tree - 2.6.1x ~ latest tree; please rebase your patch against this tree before sending it to upstream&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/man-pages/linux-next.html&#34;&gt;Working with linux-next&lt;/a&gt;&lt;br /&gt;
git add git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git&lt;/p&gt;

&lt;h2 id=&#34;tglx-tree-2-4-2-6-1x&#34;&gt;tglx tree - 2.4 - 2.6.1x&lt;/h2&gt;

&lt;p&gt;origin  git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git (fetch)&lt;br /&gt;
origin  git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git (push)&lt;/p&gt;

&lt;h2 id=&#34;history-tree-0-2-4&#34;&gt;history tree - 0 - 2.4&lt;/h2&gt;

&lt;p&gt;origin  &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/history/history.git/&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/history/history.git/&lt;/a&gt; (fetch)&lt;br /&gt;
origin  &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/history/history.git/&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/history/history.git/&lt;/a&gt; (push)&lt;br /&gt;
git checkout -b 240p 2.4.0-prerelease&lt;/p&gt;

&lt;h1 id=&#34;blogs&#34;&gt;Blogs&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.joelfernandes.org/linuxinternals/&#34;&gt;http://www.joelfernandes.org/linuxinternals/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://paulmck.livejournal.com/&#34;&gt;https://paulmck.livejournal.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;traning&#34;&gt;Traning&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/htmldocs/kernel-hacking/index.html&#34;&gt;Unreliable Guide To Hacking The Linux Kernel&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://linux-kernel-labs.github.io/master/index.html&#34;&gt;Bootlin linux kernel labs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;mailing-list-archives&#34;&gt;Mailing list archives&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/lore.html&#34;&gt;The Linux Kernel Archives&lt;/a&gt;&lt;br /&gt;
Online: &lt;a href=&#34;https://lore.kernel.org/lists.html&#34;&gt;https://lore.kernel.org/lists.html&lt;/a&gt;&lt;br /&gt;
Git: &lt;a href=&#34;https://git.kernel.org/pub/scm/public-inbox/&#34;&gt;https://git.kernel.org/pub/scm/public-inbox/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/758034/&#34;&gt;LKML archives on lore.kernel.org&lt;/a&gt;&lt;br /&gt;
and marc.info&lt;/p&gt;

&lt;h1 id=&#34;source-code-navigator&#34;&gt;Source code navigator&lt;/h1&gt;

&lt;p&gt;Just make tags; make cscope&lt;br /&gt;
&lt;a href=&#34;https://www.gnu.org/software/global/links.html&#34;&gt;&amp;lsquo;Source code reading&amp;rsquo; related sites&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;kvm&#34;&gt;KVM&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://blacks3pt3mb3r.wordpress.com/linux-stuffz/264-2/&#34;&gt;Building a KVM host machine.&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/660404/&#34;&gt;Speeding up kernel development with QEMU&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://mgalgs.github.io/2015/05/16/how-to-build-a-custom-linux-kernel-for-qemu-2015-edition.html&#34;&gt;How to Build A Custom Linux Kernel For Qemu&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://morbidrsa.github.io/2017/04/19/rapid-kernel-development-with-dracut-and-qemu.html&#34;&gt;Rapid kernel development with dracut and Qemu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;suse&#34;&gt;SUSE&lt;/h2&gt;

&lt;p&gt;zypper &amp;ndash;root /home/firo/ws/suse addrepo &lt;a href=&#34;http://download.opensuse.org/distribution/leap/15.0/repo/oss/&#34;&gt;http://download.opensuse.org/distribution/leap/15.0/repo/oss/&lt;/a&gt; foss&lt;br /&gt;
&lt;a href=&#34;https://en.opensuse.org/Package_repositories&#34;&gt;https://en.opensuse.org/Package_repositories&lt;/a&gt;&lt;br /&gt;
zypper &amp;ndash;root /home/firo/ws/suse install kernel-default-devel&lt;/p&gt;

&lt;h2 id=&#34;build-minimal-bootable-rootfs-fedora&#34;&gt;Build minimal bootable rootfs - fedora&lt;/h2&gt;

&lt;p&gt;./etc/yum.repos.d/&lt;br /&gt;
./etc/yum.repos.d/fedora-updates-testing.repo&lt;br /&gt;
./etc/yum.repos.d/fedora.repo&lt;br /&gt;
./etc/yum.repos.d/fedora-updates.repo&lt;br /&gt;
./etc/yum.repos.d/fedora-cisco-openh264.repo&lt;br /&gt;
can be gotten by supermin &amp;ndash;prepare bash -o /tmp/supermin.d&lt;br /&gt;
or just copy from you host to some place like /home/firo/kernel/k/testfs/&lt;br /&gt;
sudo dnf &amp;ndash;releasever=27 &amp;ndash;installroot=/home/firo/kernel/k/testfs/ &amp;ndash;setopt=reposdir=/home/firo/kernel/k/testfs/etc/yum.repos.d install dnf udev passwd&lt;/p&gt;

&lt;h2 id=&#34;how-to-build-a-minimal-kernel-for-testing&#34;&gt;How to build a minimal kernel for testing?&lt;/h2&gt;

&lt;p&gt;[tiny config @ kernel.org][5]&lt;br /&gt;
[3 attempts to reduce the configurations][6]&lt;br /&gt;
&lt;a href=&#34;7&#34;&gt;Fedora equivalent of debootstrap&lt;/a&gt;&lt;br /&gt;
Then enable following config option&lt;br /&gt;
CONFIG_CHR_DEV_SG&lt;br /&gt;
Some ftrace stuff&lt;br /&gt;
CONFIG_SLUB&lt;br /&gt;
CONFIG_KASAN&lt;/p&gt;

&lt;h2 id=&#34;kernel-org-build-a-tiny-kernel-https-tiny-wiki-kernel-org&#34;&gt;&lt;a href=&#34;https://tiny.wiki.kernel.org/&#34;&gt;Kernel.org: Build a tiny kernel&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;make-initrd-for-nfs&#34;&gt;make initrd for NFS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://migueleonardortiz.com.ar/linux/upgrade-kernel-and-initrd-in-linux/2067&#34;&gt;Upgrade kernel and initrd in Linux&lt;/a&gt;&lt;br /&gt;
sudo chroot suse mkinitrd -m &amp;lsquo;nfs nfsv3 nfsv4 iwlwifi&amp;rsquo; -A -D wlp4s0&lt;/p&gt;

&lt;h2 id=&#34;kvm-and-nfs&#34;&gt;KVM and NFS&lt;/h2&gt;

&lt;p&gt;qemu-system-x86_64 -nographic -enable-kvm  -kernel ./bzImag  -append &amp;lsquo; console=ttyS0 ip=dhcp root=/dev/nfs nfsroot=192.168.0.104:/home/firo/kernel/k/testfs,nfsvers=3,tcp rw nfsrootdebug debug  raid=noautodetect selinux=0 enforcing=0 &amp;lsquo;&lt;br /&gt;
dnf install nfs-utils&lt;br /&gt;
cat /etc/exports # For more details, man exports&lt;br /&gt;
/home/firo/kernel/k/testfs 127.0.0.1(rw,sync,fsid=0,no_root_squash)&lt;br /&gt;
systemctl start nfs-server.service&lt;br /&gt;
systemctl status nfs-server.service&lt;br /&gt;
● nfs-server.service - NFS server and services&lt;br /&gt;
   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; disabled; vendor preset: disabled)&lt;br /&gt;
   Active: active (exited) since Sat 2018-03-17 17:52:29 CST; 4s ago&lt;/p&gt;

&lt;h3 id=&#34;test-the-nfs&#34;&gt;Test the nfs&lt;/h3&gt;

&lt;p&gt;sudo mount -t nfs localhost://home/firo/kernel/k/testfs /mnt&lt;br /&gt;
if touch prermission denied, add no_all_squash to/etc/exports&lt;/p&gt;

&lt;h2 id=&#34;nfs-errors&#34;&gt;NFS errors&lt;/h2&gt;

&lt;p&gt;[   54.600121] NFS: sending MNT request for 10.0.2.2:/buildarea1/firo/ima/export/dist&lt;br /&gt;
[   54.600121] NFS: failed to create MNT RPC client, status=-101&lt;br /&gt;
[   54.600121] NFS: unable to mount server 10.0.2.2, error -101&lt;br /&gt;
CONFIG_E100 CONFIG_E1000 &amp;hellip;and IP_PNP and DHCP BOOTP RARP&lt;br /&gt;
try: nfsvers=3,tcp and 192.168.0.104 or 10.0.2.2 are mandatory!&lt;/p&gt;

&lt;h2 id=&#34;nfs-vers&#34;&gt;NFS vers&lt;/h2&gt;

&lt;p&gt;rpcinfo -t localhost nfs&lt;br /&gt;
program 100003 version 3 ready and waiting&lt;br /&gt;
program 100003 version 4 ready and waiting&lt;br /&gt;
rpcinfo -p | grep nfs&lt;br /&gt;
    100003    3   tcp   2049  nfs&lt;br /&gt;
    100003    4   tcp   2049  nfs&lt;br /&gt;
    100227    3   tcp   2049  nfs_acl&lt;/p&gt;

&lt;h1 id=&#34;submitting-patch&#34;&gt;Submitting patch&lt;/h1&gt;

&lt;h2 id=&#34;patch-prefix&#34;&gt;Patch prefix&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git log --oneline  path/to/file.c
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resending-the-patch&#34;&gt;Resending the patch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://meta.stackexchange.com/questions/314212/why-is-it-called-initial-revision-if-its-not-a-revision&#34;&gt;First revision, version, second revision&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://kernelnewbies.org/Outreachyfirstpatch&#34;&gt;Versioning one patch revision&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://kernelnewbies.org/PatchTipsAndTricks&#34;&gt;For example, if you&amp;rsquo;re sending the second revision of a patch, you should use [PATCH v2]&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://kernelnewbies.org/PatchPhilosophy&#34;&gt;use PATCHv2 (or PATCHv3 and so on) in the subject lines instead of PATCH &amp;hellip; To update the subject lines, add the -v 2 (or -v 3, etc) options to git format-patch&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://kernelnewbies.org/PatchPhilosophy&#34;&gt;Finally, to send your new patch series as a reply to the previous one, first look up the Message-Id of the cover letter (or the one-and-only patch) in your previous patch series, and then pass that to the &amp;ndash;in-reply-to= option of either git format-patch or git send-email.&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://kernelnewbies.org/PatchTipsAndTricks&#34;&gt;Patch v2, v3, &amp;hellip; Changes, tags&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;patch-in-series-with-a-cover&#34;&gt;Patch in series with a cover&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;proxychains git send-email --subject &amp;quot;[PATCH v2 0/15] Remove unneeded casts of memory-alloc function return values&amp;quot; --thread --compose --confirm=compose --to firogm@gmail.com *.patch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dave-s-miller-s-perferences&#34;&gt;Dave S Miller&amp;rsquo;s perferences&lt;/h2&gt;

&lt;p&gt;@@ -325,13 +325,15 @@ static inline void empty_child_dec(struct key_vector *n)&lt;br /&gt;
  static struct key_vector *leaf_new(t_key key, struct fib_alias *fa)&lt;br /&gt;
  {&lt;br /&gt;
-       struct tnode *kv = kmem_cache_alloc(trie_leaf_kmem, GFP_KERNEL);&lt;br /&gt;
-       struct key_vector *l = kv-&amp;gt;kv;&lt;br /&gt;
+       struct tnode *kv;&lt;br /&gt;
+       struct key_vector *l;&lt;br /&gt;
Dave Miller usually prefers it if variables are ordered from longest to shortest.  So you should probably have l defined first, and then kv.&lt;/p&gt;

&lt;h2 id=&#34;julia-lawall-sorry-to-be-picky&#34;&gt;Julia Lawall Sorry to be picky,&lt;/h2&gt;

&lt;p&gt;but normally people put a space after the colon.  Also,&lt;br /&gt;
the subject line could be shorter: Remove unneeded cast.&lt;br /&gt;
The description part of the subject doesnt have to be unique,&lt;br /&gt;
just the whole thing, asfter the [PATCH] part.&lt;/p&gt;

&lt;h2 id=&#34;dan-carpenter&#34;&gt;Dan Carpenter&lt;/h2&gt;

&lt;p&gt;Otherwise your patch was fine, btw.  Other improvements.&lt;br /&gt;
Don&amp;rsquo;t put &amp;ldquo;Drivers:&amp;rdquo; in the subject.&lt;br /&gt;
On Wed, Apr 22, 2015 at 09:10:50PM +0800, Firo Yang wrote:&lt;br /&gt;
&amp;gt; From: Firo Yang &lt;a href=&#34;mailto:firogm@gmail.com&#34;&gt;firogm@gmail.com&lt;/a&gt;&lt;br /&gt;
Don&amp;rsquo;t include this line.  We can get it from you email address.&lt;br /&gt;
Include everyone from the ./scripts/get_maintainer.pl output except&lt;br /&gt;
don&amp;rsquo;t include linux-kernel@vger.kernel.org if there is another mailing&lt;br /&gt;
list there already.&lt;/p&gt;

&lt;h2 id=&#34;kubecek&#34;&gt;Kubecek&lt;/h2&gt;

&lt;p&gt;│17:31:57 mkubecek | For the record, once the commit is in net or net-next tree, there is no chance to tweak its commit message. │ vtsironis_ho&lt;br /&gt;
│17:32:26   alesak | mkubecek: ok, thanks for the clarification                                                                  │ wpreston&lt;br /&gt;
│17:33:19 mkubecek | These trees do not rebase and some people (like me) would appreciate if other subsystem trees didn&amp;rsquo;t        │ Zara&lt;br /&gt;
│                  | either.                                                                                                     │ zuzka&lt;br /&gt;
│17:34:20 mkubecek | We could avoid spurious git_sort failures and commits like kernel-source 174731527683&lt;/p&gt;

&lt;h1 id=&#34;git-mutt-patch&#34;&gt;git mutt patch&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6zUVS4kJtrA&#34;&gt;Greg: How to Apply a Patch to the Linux Kernel Stable Tree&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;newbies-what-to-do&#34;&gt;newbies! what to do?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/286244/&#34;&gt;Peter Zijlstra: From DOS to kernel hacking&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://kernelnewbies.org/KernelJanitors/Todo&#34;&gt;KernelJanitors/Todo&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/284099/&#34;&gt;linux-wanking@vger.kernel.org&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;smatch&#34;&gt;Smatch&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    make CHECK=&amp;quot;~/path/to/smatch/smatch -p=kernel&amp;quot; C=1 \
            bzImage modules | tee warns.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;coccinelle&#34;&gt;Coccinelle&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>An introduction to File system in Linux operating system</title>
      <link>http://firoyang.org/cs/fs/</link>
      <pubDate>Fri, 27 Feb 2015 15:46:12 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/fs/</guid>
      <description>

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/accelazh/hellofs/blob/master/super.c&#34;&gt;hellofs&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/html/latest/filesystems/api-summary.html&#34;&gt;Linux Filesystems API summary&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://download.samba.org/pub/samba/cifs-cvs/ols2007-fs-tutorial-smf.pdf&#34;&gt;Linux File Systems in 21 days 45 minutes&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;xfs&#34;&gt;xfs&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://xfs.wiki.kernel.org/&#34;&gt;https://xfs.wiki.kernel.org/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://xfs.org/docs/xfsdocs-xml-dev/XFS_User_Guide/tmp/en-US/html/index.html&#34;&gt;https://xfs.org/docs/xfsdocs-xml-dev/XFS_User_Guide/tmp/en-US/html/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;buffer-cache&#34;&gt;Buffer cache&lt;/h1&gt;

&lt;p&gt;getblk: ULK2 14.2.3 The getblk( ) Function&lt;/p&gt;

&lt;h1 id=&#34;fsck&#34;&gt;fsck&lt;/h1&gt;

&lt;p&gt;man systemd-fsck-root.service&lt;/p&gt;

&lt;h1 id=&#34;mkfs&#34;&gt;mkfs&lt;/h1&gt;

&lt;p&gt;e2fsprog&lt;/p&gt;

&lt;h1 id=&#34;block-size&#34;&gt;block size&lt;/h1&gt;

&lt;p&gt;blockdev &amp;ndash;getbsz /dev/sda1&lt;br /&gt;
4096&lt;br /&gt;
sudo tune2fs -l /dev/sda1 | grep size&lt;/p&gt;

&lt;h1 id=&#34;lqo&#34;&gt;LQO&lt;/h1&gt;

&lt;p&gt;如果是很多基本概念没有可以看看，因为就是个中规中矩的教科书，从历史到单机存储方方面面，如果写过store，就没必要了，可以关心rise lab 或者peloton lab他们的项目和publication，我曾经想弄存储，最后觉得最后都是玩电路了，感觉自己玩不下去，就放弃了。整体的工业设计可以找找emc的人写的书&lt;/p&gt;

&lt;h1 id=&#34;acl&#34;&gt;ACL&lt;/h1&gt;

&lt;p&gt;man chmod&lt;/p&gt;

&lt;h2 id=&#34;t-vs-t&#34;&gt;T vs t&lt;/h2&gt;

&lt;p&gt;只有owner 和root才能删除这个文件, 用于/tmp&lt;br /&gt;
touch /tmp/firo; ls -l /tmp/firo&lt;br /&gt;
-rw-rw-r&amp;ndash; 1 firo firo 0 Sep 24 21:20 /tmp/firo&lt;br /&gt;
chmod +t /tmp/firo; ls -l /tmp/firo&lt;br /&gt;
-rw-rw-r-T 1 firo firo 0 Sep 24 21:20 /tmp/firo&lt;br /&gt;
chmod +x /tmp/firo; ls -l /tmp/firo&lt;br /&gt;
-rwxrwxr-t 1 firo firo 0 Sep 24 21:20 /tmp/firo&lt;/p&gt;

&lt;h1 id=&#34;linus-on-atime&#34;&gt;Linus on atime&lt;/h1&gt;

&lt;p&gt;perhaps the most stupid Unix design idea of all times,&amp;rdquo; adding: &amp;ldquo;Think about this a bit: &amp;lsquo;For every file that is read from the disk, lets do a &amp;hellip; write to the disk! And, for every file that is already cached and which we read from the cache &amp;hellip; do a write to the disk!&amp;rsquo;&amp;rdquo; He further emphasized the performance impact thus:&lt;br /&gt;
&lt;a href=&#34;http://web.archive.org/web/20110427023154/http:/kerneltrap.org/node/14148&#34;&gt;Linux: Replacing atime With relatime&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;linus-on-everything-is-a-file&#34;&gt;Linus on  Everything is a file&lt;/h2&gt;

&lt;p&gt;The whole point with &amp;ldquo;everything is a file&amp;rdquo; is not that you have some&lt;br /&gt;
random filename (indeed, sockets and pipes show that &amp;ldquo;file&amp;rdquo; and &amp;ldquo;filename&amp;rdquo;&lt;br /&gt;
have nothing to do with each other), but the fact that you can use common&lt;br /&gt;
tools to operate on different things. - &lt;a href=&#34;http://yarchive.net/comp/linux/everything_is_file.html&#34;&gt;Linus&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hard-link&#34;&gt;Hard Link&lt;/h2&gt;

&lt;p&gt;hard link to directory, recursive&lt;br /&gt;
hard link to file accross partitions, may led confilict with inode number.&lt;/p&gt;

&lt;h1 id=&#34;rootfs&#34;&gt;rootfs&lt;/h1&gt;

&lt;p&gt;init_rootfs&lt;br /&gt;
init_mount_tree and sys_chroot and rootfs_mount&lt;br /&gt;
do_basic_setup-&amp;gt;rootfs_initcall(populate_rootfs);&lt;/p&gt;

&lt;h1 id=&#34;tmpfs&#34;&gt;tmpfs&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://wangcong.org/2012/02/17/-e5-85-b3-e4-ba-8e-tmpfs/&#34;&gt;关于 tmpfs&lt;/a&gt;&lt;br /&gt;
fs/ramfs,  tmpfs mm/shmem.c&lt;/p&gt;

&lt;h1 id=&#34;sysfs&#34;&gt;Sysfs&lt;/h1&gt;

&lt;h1 id=&#34;procfs&#34;&gt;Procfs&lt;/h1&gt;

&lt;p&gt;##How many parts does procfs has?&lt;br /&gt;
* process-specific read only /proc/&lt;pid&gt;/&lt;br /&gt;
* process tuneable interface. /proc/&lt;pid&gt;/&lt;br /&gt;
* kernel sysctl, importanta kernel tuneable files. /proc/sys/kernel net vm fs&amp;hellip;&lt;br /&gt;
* Read only kernel infomation. /proc&lt;br /&gt;
##I think, important directory need to know.&lt;br /&gt;
/proc/sys/kernel&lt;/p&gt;

&lt;h1 id=&#34;btrfs&#34;&gt;btrfs&lt;/h1&gt;

&lt;p&gt;btrfs_mount&lt;br /&gt;
btrfs_fill_super&lt;br /&gt;
setup_bdi&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux device driver</title>
      <link>http://firoyang.org/cs/driver/</link>
      <pubDate>Fri, 27 Feb 2015 15:46:12 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/driver/</guid>
      <description>

&lt;h1 id=&#34;modversions&#34;&gt;Modversions&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/21393/&#34;&gt;https://lwn.net/Articles/21393/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/707520/&#34;&gt;https://lwn.net/Articles/707520/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;kabi&#34;&gt;KABI&lt;/h2&gt;

&lt;p&gt;Ludicrously Technical – Kernel ABI Tracking: &lt;a href=&#34;http://www.jonmasters.org/blog/2007/06/16/ludicrously-technical-kernel-abi-tracking/&#34;&gt;http://www.jonmasters.org/blog/2007/06/16/ludicrously-technical-kernel-abi-tracking/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;kernel-module-programming&#34;&gt;Kernel module programming&lt;/h1&gt;

&lt;p&gt;sudo depmod -n -a -F /boot/System.map-4.3.5-300.fc23.x86_64  4.3.5-300.fc23.x86_64 &amp;gt; /tmp/m.log&lt;br /&gt;
CFLAGS_jc.o := -O2&lt;br /&gt;
ccflags-y := -O2&lt;/p&gt;

&lt;h2 id=&#34;mapping&#34;&gt;Mapping&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/653585/&#34;&gt;ioremap() and memremap()&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;kernel-module-param&#34;&gt;kernel module param&lt;/h2&gt;

&lt;p&gt;include/asm-generic/vmlinux.lds.h&lt;br /&gt;
                KEEP(*(__param))                                        &lt;br /&gt;
__module_param_call&lt;br /&gt;
&lt;strong&gt;attribute&lt;/strong&gt; ((unused,&lt;strong&gt;section&lt;/strong&gt; (&amp;rdquo;__param&amp;rdquo;),aligned(sizeof(void *)))) &lt;/p&gt;

&lt;h2 id=&#34;lib&#34;&gt;Lib&lt;/h2&gt;

&lt;p&gt;devm_kfree and &lt;a href=&#34;http://lists.freedesktop.org/archives/dri-devel/2013-May/038943.html&#34;&gt;devm_kfree does not need for fail case of probe function and for remove function.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;device-model&#34;&gt;Device model&lt;/h1&gt;

&lt;p&gt;The device model was originally intended to make power management tasks easier - LDD?&lt;br /&gt;
Documentation/driver-model&lt;br /&gt;
&lt;a href=&#34;http://lwn.net/Articles/31185/&#34;&gt;Driver porting: Device model overview&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/604413/&#34;&gt;Devices in /sys&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;history-of-module-linkage-and-loader&#34;&gt;History of module linkage and loader&lt;/h1&gt;

&lt;h2 id=&#34;ksyms-removed&#34;&gt;ksyms - removed&lt;/h2&gt;

&lt;p&gt;History: commit d80e0e9b2620f8ec6508d43484bd8300401d0383 (tag: 0.99.14d)&lt;br /&gt;
Author: Linus Torvalds &lt;a href=&#34;mailto:torvalds@linuxfoundation.org&#34;&gt;torvalds@linuxfoundation.org&lt;/a&gt;&lt;br /&gt;
Date:   Fri Nov 23 15:09:16 2007 -0500&lt;br /&gt;
    Import 0.99.14d&lt;br /&gt;
+++ b/include/linux/module.h&lt;br /&gt;
+ * Dynamic loading of modules into the kernel.&lt;br /&gt;
+++ b/kernel/ksyms.S&lt;br /&gt;
+ * Herein lies all the functions/variables that are &amp;ldquo;exported&amp;rdquo; for linkage&lt;br /&gt;
+ * With dynamically loaded kernel modules. Could do with making this a bit&lt;br /&gt;
+ * cleaner!&lt;br /&gt;
History: commit 75bcc1d5a30e1d2045c3564a668c11dbba5cfe3f (tag: 1.1.0)&lt;br /&gt;
Author: Linus Torvalds &lt;a href=&#34;mailto:torvalds@linuxfoundation.org&#34;&gt;torvalds@linuxfoundation.org&lt;/a&gt;&lt;br /&gt;
Date:   Fri Nov 23 15:09:26 2007 -0500&lt;br /&gt;
    Import 1.1.0&lt;br /&gt;
convert ksyms.S to ksyms.c&lt;br /&gt;
tglx: commit ff08f6fe935ff0854990421e80d04c39c7c2a15a&lt;br /&gt;
Author: Arnaldo Carvalho de Melo &lt;a href=&#34;mailto:acme@conectiva.com.br&#34;&gt;acme@conectiva.com.br&lt;/a&gt;&lt;br /&gt;
Date:   Tue Oct 7 17:54:04 2003 -0300&lt;br /&gt;
    o kernel/ksyms.c: move remaining EXPORT_SYMBOLs, remove this file from the tree&lt;br /&gt;
Removing ksyms.c&lt;/p&gt;

&lt;h2 id=&#34;export-symbol&#34;&gt;EXPORT_SYMBOL&lt;/h2&gt;

&lt;p&gt;History: commit f1bbcc4197c4597636782a34ad138a51c40b1efb (tag: 2.1.18)&lt;br /&gt;
Author: Linus Torvalds &lt;a href=&#34;mailto:torvalds@linuxfoundation.org&#34;&gt;torvalds@linuxfoundation.org&lt;/a&gt;&lt;br /&gt;
Date:   Fri Nov 23 15:12:47 2007 -0500&lt;br /&gt;
    Import 2.1.18&lt;br /&gt;
+/* Export a symbol either from the kernel or a module.&lt;br /&gt;
+   In the kernel, the symbol is added to the kernel&amp;rsquo;s global symbol table.&lt;br /&gt;
+   In a module, it controls which variables are exported.  If no&lt;br /&gt;
+   variables are explicitly exported, the action is controled by the&lt;br /&gt;
+   insmod -[xX] flags.  Otherwise, only the variables listed are exported.&lt;br /&gt;
+   This obviates the need for the old register_symtab() function.  */&lt;/p&gt;

&lt;h2 id=&#34;in-kernel-module-loader&#34;&gt;In-kernel module loader&lt;/h2&gt;

&lt;p&gt;tglx: commit aa65be3f456be1ac4359f7fffeb7b4ae3c149419&lt;br /&gt;
Author: Rusty Russell &lt;a href=&#34;mailto:rusty@rustcorp.com.au&#34;&gt;rusty@rustcorp.com.au&lt;/a&gt;&lt;br /&gt;
Date:   Sun Nov 10 17:08:07 2002 -0800&lt;br /&gt;
    [PATCH] In-kernel Module Loader&lt;br /&gt;
+/* Allocate and load the module */&lt;br /&gt;
+static struct module *load_module(void *umod,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Power management</title>
      <link>http://firoyang.org/dark_ages/pm/</link>
      <pubDate>Fri, 27 Feb 2015 15:46:12 CST</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/dark_ages/pm/</guid>
      <description>

&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.wowotech.net/pm_subsystem/generic_pm_architecture.html&#34;&gt;wowotech&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/384146/&#34;&gt;The cpuidle subsystem&lt;/a&gt;cpuidle—Do nothing, efficiently&lt;br /&gt;
&lt;a href=&#34;http://www.marvell.com/embedded-processors/armada-xp/assets/HW_MV78460_OS.PDF&#34;&gt;Hardware Specifications 9.4&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.marvell.com/embedded-processors/armada-xp/assets/ARMADA-XP-Functional-SpecDatasheet.pdf&#34;&gt;Functional Specifications 34&lt;/a&gt;&lt;br /&gt;
Documentation/power&lt;br /&gt;
Controlling Processor C-State Usage in Linux&lt;br /&gt;
&lt;a href=&#34;http://doc.opensuse.org/documentation/html/openSUSE_114/opensuse-tuning/cha.tuning.power.html&#34;&gt;Chapter 11. Power Management&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C-states: idle core power state&lt;/p&gt;

&lt;h1 id=&#34;the-structure-of-pm-source-codes&#34;&gt;The structure of PM source codes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Interface&lt;br /&gt;
syscall /sys/power&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;PM core&lt;br /&gt;
kernel/power&lt;br /&gt;
main.c suspend.c suspend_test.c console.c process.c&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Device PM&lt;br /&gt;
driver/base/power &amp;ndash; Power management interface, firo&lt;br /&gt;
power management 是针对device, bus, driver这部分的. 在suspend_devices_and_enter用到dpm_suspend_start.&lt;br /&gt;
driver/各种设备的驱动&lt;br /&gt;
driver/cpuidle &amp;ndash;firo&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Platform PM&lt;br /&gt;
include/linux/suspend.h&amp;mdash;-定义platform dependent PM有关的操作函数集&lt;br /&gt;
就是他platform_suspend_ops&lt;br /&gt;
arch/xxx/mach-xxx/xxx.c or arch/xxx/plat-xxx/xxx.c&amp;mdash;-平台相关的电源管理操作&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;CPU control&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;important-data-structure&#34;&gt;Important data structure&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Platform PM&lt;br /&gt;
platform_suspend_ops, platform plat-* is equivalent to mach-* and microarchitecture.&lt;br /&gt;
plat-* is abustruct from mach-*1 and mach-&lt;em&gt;2 and so on.&lt;br /&gt;
mach-&lt;/em&gt; is more closer to Board!&lt;br /&gt;
所以这个platform_suspend_ops, 是非常重要的, 他包含了所有BSP底层的内容.&lt;br /&gt;
竟然是用suspend_ops这个全局变量, 来承载所有platform相关的内容.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Device PM&lt;br /&gt;
dev_pm_ops这个和上面是完全不同的两条调用路线,在suspend_devices_and_enter用到dpm_suspend_start.&lt;/p&gt;

&lt;h1 id=&#34;steps-of-suspend&#34;&gt;Steps of suspend&lt;/h1&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function steps&lt;br /&gt;
state_store-&amp;gt;pm_suspend-&amp;gt;enter_state-&amp;gt;&lt;br /&gt;
{&lt;br /&gt;
valid_state &amp;amp; suspend_prepare&lt;br /&gt;
suspend_devices_and_enter-&amp;gt; {&lt;br /&gt;
    suspend_console &amp;amp; ftrace_stop &amp;amp; dpm_suspend_start&lt;br /&gt;
    suspend_enter-&amp;gt;&lt;br /&gt;
    {&lt;br /&gt;
        disable_nonboot_cpus &amp;amp; arch_suspend_disable_irqs&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PM core&lt;br /&gt;
freeze userspace&lt;br /&gt;
console&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Device PM&lt;br /&gt;
suspend device&lt;br /&gt;
before and first part in suspend_enter&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mass stuffs&lt;br /&gt;
CPU &amp;amp; IRQ disable&lt;br /&gt;
syscore&lt;br /&gt;
Device PM check wakeup pendings&lt;br /&gt;
middle part in suspend_enter&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Platform PM&lt;br /&gt;
last part in suspend_enter&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;introdution&#34;&gt;Introdution&lt;/h1&gt;

&lt;p&gt;电源管理都涉及到那些内容?&lt;br /&gt;
PMU MP and DEV, CPU cores, L2 cache, Coherency Fabric, Devices&lt;br /&gt;
Core Power Modes: run, idle/WFI/WFE/stadnby, deep idle/power down&lt;br /&gt;
* WFI: core power down except snoop and interrupt cache working&lt;br /&gt;
disable clocks of the CPU&lt;br /&gt;
snoop other Cores and io agent.&lt;br /&gt;
only snoop block are temporarily woken up and the block back to WFI mode after complete snoop.&lt;br /&gt;
can recognize interrupt.&lt;br /&gt;
* Power down: core power down, l1 flush, cache not mantained/snoop stoped, but l2 &amp;amp; fabric&lt;br /&gt;
can not recognize interrupt, recovery is fully depended on MP_PMU&lt;/p&gt;

&lt;p&gt;In hardware layer, we need &lt;a href=&#34;https://en.wikipedia.org/wiki/Power_Management_Unit&#34;&gt;PMU&lt;/a&gt; to complete power management.&lt;br /&gt;
What is the relation of PMU and CPU?&lt;br /&gt;
armadaxp的PMU与CPU物理上与逻辑上是独立的.&lt;br /&gt;
The Power Management functions are provided by two power manager units:&lt;br /&gt;
The Device Power Management Unit (DEV_PMU)&lt;br /&gt;
The Multiprocessor Power Management Service Unit (MP_PMU).&lt;br /&gt;
PMU省电模式:&lt;/p&gt;

&lt;h1 id=&#34;kernel-cpuidle-subsystem&#34;&gt;kernel cpuidle subsystem&lt;/h1&gt;

&lt;h2 id=&#34;steps-of-cpuilde&#34;&gt;Steps of cpuilde&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;interface&lt;br /&gt;
kernel sched and sysfs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cpuidle core&lt;br /&gt;
cpuidle.c、driver.c、governor.c、sysfs.c。&lt;br /&gt;
抽象出cpuidle device、cpuidle driver、cpuidle governor三个实体&lt;br /&gt;
一个core对应一个cpuidle device drivers/cpuidle/cpuidle.c.&lt;br /&gt;
device 和driver隔离, 通过全局变量联系 ifndef CONFIG_CPU_IDLE_MULTIPLE_DRIVERS&lt;br /&gt;
管理cpuidle driver 和governor&lt;br /&gt;
上层sched模块 和sysfs 提供接口&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cpuidle governors&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cpuidle drivers&lt;br /&gt;
drivers/cpudile/cpuidle-xxx.c or&lt;br /&gt;
arch/arm/plat-armada/cpuidle.c&lt;br /&gt;
如何进入idle状态&lt;br /&gt;
什么条件下会退出&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;source-code-layout&#34;&gt;Source code layout&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;drivers/cpuidle&lt;br /&gt;
include/linux/cpuidle.h&lt;br /&gt;
cpuidle core、cpuidle governors和cpuidle drivers三个模块&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;kernel\sched\idle.c&lt;br /&gt;
kernel sched中的cpuidle entry&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;important-data-structre&#34;&gt;Important data structre&lt;/h2&gt;

&lt;p&gt;struct cpuidle_driver&lt;br /&gt;
struct cpuidle_state&lt;br /&gt;
struct cpuidle_device used by ladder or menu&lt;/p&gt;

&lt;p&gt;device_initcall -&amp;gt; armadaxp_init_cpuidle -&amp;gt; cpuidle_register_driver  cpuidle_register_device&lt;br /&gt;
cpu_idle -&amp;gt; cpuidle_idle_call&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux memory management</title>
      <link>http://firoyang.org/cs/mm/</link>
      <pubDate>Sun, 28 Dec 2014 00:00:00 UTC</pubDate>
      <author>Firo Yang</author>
      <guid>http://firoyang.org/cs/mm/</guid>
      <description>

&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pZghXbeCH5s&#34;&gt;Kernel Recipes 2017 - 20 years of Linux virtual memory - Andrea Arcangeli&lt;/a&gt;&lt;br /&gt;
Dragon book 9th chapter 8 main memory&lt;br /&gt;
&lt;a href=&#34;https://landley.net/writing/memory-faq.txt&#34;&gt;A must-read: memory FAQ by Landley&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.usenix.org/system/files/conference/atc16/atc16_paper-huang.pdf&#34;&gt;An Evolutionary Study of Linux Memory Management for Fun and Profit&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/html/v4.18/vm/index.html&#34;&gt;Kernel developers MM documentation&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/mm/index.html&#34;&gt;kernel.org Memory Management&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://linux-mm.org/&#34;&gt;https://linux-mm.org/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://bitsavers.trailing-edge.com/pdf/sun/sunos/1.1/800-1108-01E_System_Interface_Manual_for_the_Sun_Workstation_Jan84.pdf&#34;&gt;2. Memory management&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;memory-partitioning&#34;&gt;Memory partitioning&lt;/h1&gt;

&lt;p&gt;Check OSIDP 7.2&lt;/p&gt;

&lt;h2 id=&#34;page-vs-variable-sized-memory-allocations&#34;&gt;Page vs variable-sized memory allocations&lt;/h2&gt;

&lt;p&gt;By variable-sized, we are not taking historical segementation.&lt;br /&gt;
Placement algorithm: Best-fit, first-fit. Within variable-szied memory allocations, it&amp;rsquo;s very difficult to track free memories compared with page-sized.&lt;/p&gt;

&lt;h2 id=&#34;1961-segmentation&#34;&gt;1961 segmentation&lt;/h2&gt;

&lt;p&gt;Fist appears in Burroughs B5500&lt;br /&gt;
OSIDP&lt;br /&gt;
The difference, compared to dynamic partitioning, is that with seg-&lt;br /&gt;
mentation a program may occupy more than one partition, and these partitions&lt;br /&gt;
need not be contiguous. Segmentation eliminates internal fragmentation but, like&lt;br /&gt;
dynamic partitioning, it suffers from external fragmentation. However, because a&lt;br /&gt;
process is broken up into a number of smaller pieces, the external fragmentation&lt;br /&gt;
should be less.&lt;/p&gt;

&lt;h2 id=&#34;1964-fixed-sized-partitioning&#34;&gt;1964 fixed-sized partitioning&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_management_(operating_systems)#Partitioned_allocation&#34;&gt;Partitioned allocation&lt;/a&gt;&lt;br /&gt;
Dragon OS book 8.3.2 Memory Allocation&lt;br /&gt;
OSIDP: 7.2 MEMORY PARTITIONING&lt;br /&gt;
fixed-sized partitions.&lt;br /&gt;
variable-partition scheme or Segmentation&lt;/p&gt;

&lt;h3 id=&#34;describing-pages-memory-map-the-mem-map-array&#34;&gt;Describing pages: memory map, the &amp;lsquo;mem_map&amp;rsquo; array&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/789304/&#34;&gt;Memory: the flat, the discontiguous, and the sparse&lt;/a&gt;&lt;br /&gt;
Firo: All these 3 types are &lt;a href=&#34;https://en.wikipedia.org/wiki/Flat_memory_model&#34;&gt;Flat memory model&lt;/a&gt;&lt;br /&gt;
Firo: I think kernel developers are abusing the terminology &amp;lsquo;memory model&amp;rsquo;. &lt;a href=&#34;https://www.kernel.org/doc/html/latest/vm/memory-model.html&#34;&gt;Physical Memory Model&lt;/a&gt;&lt;br /&gt;
Firo: the full name should be memory map/layout model.&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/134804/&#34;&gt;sparsemem memory model&lt;/a&gt; &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d41dee369bff3b9dcb6328d4d822926c28cc2594&#34;&gt;PATCH&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/439472/&#34;&gt;DISCONTIGMEM, !NUMA, and SLUB&lt;/a&gt;&lt;br /&gt;
8170e6bed465b4b0c7687f93e9948aca4358a33b x86, 64bit: Use a PF handler to materialize early mappings on demand&lt;br /&gt;
zone_mem_map =&amp;gt; node_mem_map&lt;br /&gt;
commit a0140c1d85637ee5f4ea7c78f066e3611a6a79dc&lt;br /&gt;
Author: KAMEZAWA Hiroyuki &lt;a href=&#34;mailto:kamezawa.hiroyu@jp.fujitsu.com&#34;&gt;kamezawa.hiroyu@jp.fujitsu.com&lt;/a&gt;&lt;br /&gt;
Date:   Mon Mar 27 01:15:55 2006 -0800&lt;br /&gt;
    [PATCH] remove zone_mem_map&lt;br /&gt;
Related code: pfn_to_page&lt;/p&gt;

&lt;h1 id=&#34;zones&#34;&gt;Zones&lt;/h1&gt;

&lt;p&gt;ULK 2: 7.1.2 Memory Zones; LDD: Memory zones; LKD3: Zones; UVM: Chapter 2  Describing Physical Memory&lt;br /&gt;
history: commit 4d1ceac2980133513fec009b18514f026ff58afa (tag: 2.3.23pre5)&lt;br /&gt;
Author: Linus Torvalds &lt;a href=&#34;mailto:torvalds@linuxfoundation.org&#34;&gt;torvalds@linuxfoundation.org&lt;/a&gt;&lt;br /&gt;
Date:   Fri Nov 23 15:27:55 2007 -0500&lt;br /&gt;
    Import 2.3.23pre5&lt;br /&gt;
+#define MEM_TYPE_DMA           0&lt;br /&gt;
+#define MEM_TYPE_NORMAL                1&lt;br /&gt;
+#define MEM_TYPE_HIGH          2&lt;/p&gt;

&lt;p&gt;history: commit cb75bc5a9d9a433f6b5c8015a0f43c1b4d0fad79 (tag: 2.3.27pre6)&lt;br /&gt;
Author: Linus Torvalds &lt;a href=&#34;mailto:torvalds@linuxfoundation.org&#34;&gt;torvalds@linuxfoundation.org&lt;/a&gt;&lt;br /&gt;
Date:   Fri Nov 23 15:28:33 2007 -0500&lt;br /&gt;
    Import 2.3.27pre6&lt;br /&gt;
+ *  Reshaped it to be a zoned allocator, Ingo Molnar, Red Hat, 1999&lt;br /&gt;
-#define MEM_TYPE_DMA           0&lt;br /&gt;
-#define MEM_TYPE_NORMAL                1&lt;br /&gt;
+#define ZONE_DMA               0&lt;br /&gt;
+#define ZONE_NORMAL            1&lt;br /&gt;
-static struct free_area_struct free_area[NR_MEM_TYPES][NR_MEM_LISTS];&lt;br /&gt;
+typedef struct zone_struct {&lt;br /&gt;
&lt;a href=&#34;https://lwn.net/Articles/753269/&#34;&gt;Zone-lock and mmap_sem scalability&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;memory-allocation&#34;&gt;Memory allocation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://compas.cs.stonybrook.edu/~nhonarmand/courses/sp17/cse506/papers/dsa.pdf&#34;&gt;Dynamic Storage Allocation: A Survey and Critical Review&lt;/a&gt;&lt;br /&gt;
Page allocator.&lt;/p&gt;

&lt;h2 id=&#34;memory-allocation-overcommit&#34;&gt;Memory allocation overcommit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/vm/overcommit-accounting&#34;&gt;https://www.kernel.org/doc/Documentation/vm/overcommit-accounting&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://linuxperf.com/?p=102&#34;&gt;理解LINUX的MEMORY OVERCOMMIT&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://engineering.pivotal.io/post/virtual_memory_settings_in_linux_-_the_problem_with_overcommit/&#34;&gt;Virtual memory settings in Linux - The Problem with Overcommit&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;garbage-collection&#34;&gt;Garbage collection&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=2473932&#34;&gt;Linus Torvalds on Garbage Collection (2002)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://yarchive.net/comp/linux/reference_counting.html&#34;&gt;Linus on refrence counting&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.145.3800&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Paul E. McKenney: Overview of Linux-Kernel Reference Counting&lt;/a&gt;&lt;br /&gt;
Book: The Garbage Collection Handbook&lt;br /&gt;
Book: Japanese GC book.&lt;br /&gt;
&lt;a href=&#34;https://www.linuxidc.com/Linux/2015-01/111565.htm&#34;&gt;https://www.linuxidc.com/Linux/2015-01/111565.htm&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;reference-counting&#34;&gt;Reference counting&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/565734/&#34;&gt;Introducing lockrefs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;fragmentations&#34;&gt;Fragmentations&lt;/h1&gt;

&lt;p&gt;buddy system, memory compaction&lt;/p&gt;

&lt;h2 id=&#34;anti-fragmentation&#34;&gt;Anti fragmentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/ols/2006/ols2006v1-pages-369-384.pdf&#34;&gt;The What, The Why and the Where To of Anti-Fragmentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
