[   46.118978] Firok ================ ffff880037c1c410 0 0
[   46.119653] Firox reuse 1 i 1, 0, id -1, 1, 0, ffff880037c1c410, orgin ffff880037c1c410           (null) orgin ffff880037c1c410, ffff880037c1c3f8, ffff880037c1c3f8, ffff880037c1c410
[   46.123850] Firok ================ ffff880037c1a2b8 0 0
[   46.124550] Firox reuse 1 i 1, 0, id -1, 1, 0, ffff880037c1a2b8, orgin ffff880037c1a2b8           (null) orgin ffff880037c1a2b8, ffff880037c1a2a0, ffff880037c1a2a0, ffff880037c1a2b8
[   46.128902] Firok ================ ffff88003bdd8160 0 0
[   46.129907] Firox reuse 1 i 1, 0, id -1, 1, 0, ffff88003bdd8160, orgin ffff88003bdd8160           (null) orgin ffff88003bdd8160, ffff88003bdd8148, ffff88003bdd8148, ffff88003bdd8160
[   46.136076] Firok ================ ffff88003bddc410 0 0
[   46.137281] Firox reuse 1 i 1, 0, id -1, 1, 0, ffff88003bddc410, orgin ffff88003bddc410           (null) orgin ffff88003bddc410, ffff88003bddc3f8, ffff88003bddc3f8, ffff88003bddc410
[   46.142327] Firok ================ ffff88003bdda2b8 0 0
[   46.143328] Firox reuse 1 i 1, 0, id -1, 1, 0, ffff88003bdda2b8, orgin ffff88003bdda2b8           (null) orgin ffff88003bdda2b8, ffff88003bdda2a0, ffff88003bdda2a0, ffff88003bdda2b8
[   46.148418] Firok ================ ffff88003a4c0160 0 0
[   46.149455] Firox reuse 1 i 1, 0, id -1, 1, 0, ffff88003a4c0160, orgin ffff88003a4c0160           (null) orgin ffff88003a4c0160, ffff88003a4c0148, ffff88003a4c0148, ffff88003a4c0160
[   46.154186] Firok ================ ffff88003a4c4410 0 0
[   46.155080] Firox reuse 0 i 1, 6, id -1, 0, 0, ffff88003a4c43f8, orgin           (null)           (null) orgin ffff88003a4c4410, ffff88003a4c43f8, ffff88003a4c43f8, ffff88003a4c4410
[   46.157319] Firox up read ffff88003a4c43f8 ffff88003a4c43f8 17400 6
[   46.158273] Firox new 1 ffff88003a4c43f8 17400, 1
[   46.159042] Firox new ffff88003a4c43f8  1
[   46.159617] Firox finish ffff88003a4c43f8 17400
[   46.160300] Firo, sg_remove_scat:           (null), ffff88003a4c4410, use 17400 len=ffff8800 k=0, pg=0xffff88006cc38ae8 order1 posion dead000000000000
[   46.162235] Firo, sg_remove_scat:           (null), ffff88003a4c4410, use 17400 len=ffff8800 k=1, pg=0xffff88006cc38ae8 order1 posion dead000000000000
[   46.164114] Firo, sg_remove_scat:           (null), ffff88003a4c4410, use 17400 len=ffff8800 k=2, pg=0xffff88006cc38a10 order1 posion dead000000000000
[   46.165643] Firo, sg_remove_scat:           (null), ffff88003a4c4410, use 17400 len=ffff8800 k=3, pg=0xdead4ead00000000 order1 posion dead000000000000
[   46.167424] kasan: CONFIG_KASAN_INLINE enabled
[   46.168174] kasan: GPF could be caused by NULL-ptr deref or user memory access
[   46.169071] general protection fault: 0000 [#1] SMP KASAN
[   46.169618] Dumping ftrace buffer:
[   46.169962]    (ftrace buffer empty)
[   46.170371] Modules linked in:
[   46.170807] CPU: 1 PID: 4278 Comm: sg Not tainted 4.11.0-next-20170512+ #52
[   46.172244] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.9.3-1.fc25 04/01/2014
[   46.173561] task: ffff880069251700 task.stack: ffff88006b4d8000
[   46.174488] RIP: 0010:__free_pages+0x5/0x30
[   46.175087] RSP: 0018:ffff88006b4dfa78 EFLAGS: 00010202
[   46.175865] RAX: 1ffff1000749885a RBX: ffff88003a4c4410 RCX: 0000000000000000
[   46.176985] RDX: 0000000000000000 RSI: 0000000000000001 RDI: dead4ead00000000
[   46.178256] RBP: ffff88006b4dfaf0 R08: ffffffff84ef5e78 R09: 0000000000000000
[   46.179347] R10: 0000000000000000 R11: 0000000000000000 R12: dffffc0000000000
[   46.180273] R13: 0000000000000004 R14: 0000000000000001 R15: ffff88003a4c42d0
[   46.181347] FS:  00007f053f88f7c0(0000) GS:ffff88003ed00000(0000) knlGS:0000000000000000
[   46.182573] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[   46.183398] CR2: 0000000020002000 CR3: 000000006a3dd000 CR4: 00000000000006e0
[   46.184432] Call Trace:
[   46.184777]  ? sg_remove_scat+0x236/0x410
[   46.185355]  sg_finish_rem_req+0x32c/0x3f0

        i = 0; 
        list_for_each_entry(p, &sfp->rq_list, entry) {
                i++;
        }    

        printk("Firox reuse %d i %d, %d, id %d, %d, %d, %p, orgin %p %p orgin %p, %p, %p, %p\n", resp->res_used, 
                        i, resp->header.interface_id, pack_id, record_done, record_id, resp, ret_resp,list_empty(&sfp->rq_list), list_first_entry(&sfp->rq_list, typeof(*resp), entry),
                                list_entry(&sfp->rq_list, typeof(*resp), entry), &sfp->rq_list, sfp->rq_list.next, sfp->rq_list.prev);
        write_unlock_irqrestore(&sfp->rq_list_lock, iflags);

