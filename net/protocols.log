
# History
## Maybe not useful
[The Design Philosophy of the DARPA Internet Protocols](http://ccr.sigcomm.org/archive/1995/jan95/ccr-9501-clark.pdf)
[History of TCP/IP](http://student.ing-steen.se/IPv4/TCP-IP.pdf)
## MUST-READ 
### Packet switching
[Packet switching](https://en.wikipedia.org/wiki/Packet_switching)
### [End-to-end principle](https://en.wikipedia.org/wiki/End-to-end_principle)
[END-TO-END ARGUMENTS IN SYSTEM DESIGN](http://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf)
### Layering
[HISTORY OF IP ADDRESSES PART 2: HOW TCP/IP CHANGED EVERYTHING](https://www.colocationamerica.com/blog/history-of-ip-address-part-2-tcp-ip)
[what's the difference between Transfer, Transport and Transmission as the noun](https://english.stackexchange.com/questions/56443/whats-the-difference-between-transfer-transport-and-transmission-as-the-noun)
[Comments on Internet Protocol and TCP](https://www.rfc-editor.org/ien/ien2.txt)
We are screwing up in our design of internet protocols by violating the
principle of layering. Specifically we are trying to use TCP to do two
things: serve as a host level end to end protocol, and to serve as an
internet packaging and routing protocol. These two things should be
provided in a layered and modular way. I suggest that a new distinct
internetwork protocol is needed, and that TCP be used strictly as a host
level end to end protocol. --Jon Postel  ien2
The Transmission Control Program was split into two distinct protocols, the Transmission Control Protocol and the Internet Protocol.

# TCP
https://tools.ietf.org/html/rfc793
[A Protocol for Packet Network Intercommunication](https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf)
本文主要关注tcp这一类的可靠的传输层协议.
在之前的推理过程中, 我们已经能够明白, tcp的核心性质, 远没有想象
中那么复杂:
        multiplex, 这是传输层的本质, 标志用户地址, 也就是端口
        面向连接的, 收到的数据有序, 且存在session也就是握手挥手.
        可靠性, 报文一个都不能少.
        congestion control, 拥塞控制, 保证网络整体的性能.
        flow control, 流控, 保证对端可以良好稳定接收到报文.免得想双11的快递公司被爆仓.
        数据校验, 防止传输过程导致数据出错. 我常会想起水浒传中, 戴总送信那段.
对tcp就是围绕这6个核心的性质开始设计, 实现的.
无论你是看tcp的头部啊, 还是协议栈的代码基本上都逃不出这六点.
我不建议直接去看内核的tcp实现, 我是吃过苦头的.
1. 很容易让人掉进去代码里面, 而忘了初衷.
2. 内核的实现有很多工程性的问题, 这和tcp本身是无关的.比如tcp seq回绕的问题.
##  大话TCP 头部
从上往下, 这也标志了重要性. 先是, 源目的端口, 属于multiplex. 接着sequence number, 这是面向连接, 数据有序; 接着是ack, 这是可靠性;再往下是, offset 处于数据管理需要和tcp无关,tcp flags涉及到了多个性质,主要是握手和拥塞;之后window size, 这是流控.之后是checksum, 保证传输过程中不会修改数据.你看tcp真的不复杂, 我们只是没有遇到一个好的解读角度, tcp是有鼻子有眼;很生动的.

## Reliability
* lost, duplicated, or delivered out of order
sequence number to each octet transmitted and acknowledgment
* Damage - Detection of transmission errors  
checksum, the transport protocol may check that the data is not corrupted
[a checksum to each segment transmitted](http://www.tcpipguide.com/free/t_TCPChecksumCalculationandtheTCPPseudoHeader-2.htm)


## Flow Control
receive windowsize 暗含tcp的最大64KB.
[Sliding window protocol](http://www.tcpipguide.com/free/t_TCPSlidingWindowDataTransferandAcknowledgementMech-2.htm)
Sliding window protocols are used where reliable in-order delivery of packets is required.
For every ack packet received, the window slides by one packet (logically) to transmit one new packet.
发送方的发送窗口, 由发送了但没ack和 可用的发送空间,这个通常有对端的receive windowsize指定.
如果发送了一个可用的发送空间 = receive windowsize - 那个报文大小, 新来报文更新串口.
接收端的窗口就是最后收到连续到不连续的位置.

## Multiplexing
port

## Connection-oriented communications
### Session - handshack
In computer science, in particular networking, a session is a semi-permanent
interactive information interchange.
[Instance of tcp session in BSD socket](http://www.scottklement.com/rpg/socktut/overview.html)
[TCP Session - Handshaking in protocol](http://www.dummies.com/how-to/content/network-basics-tcp-session-establishment-handshaki.html)
这个对应tcp的三次握手, 4次挥手,
### in order
涉及到的另外一个概念Virtul circuit
A virtual circuit (VC) is a means of transporting data over a packet switched
 computer network in such a way that it appears as though there is a dedicated
physical layer link between the source and destination end systems of this data.
对应tcp 的接收队列, seq number

## Duplex

## 深入理解seq 和 ack and syn
syn occupys one seq, but ack.
--
[TCP Sequence & Acknowledgment numbers](http://serverfault.com/questions/593037/tcp-sequence-acknowledgment-numbers)
这种问题就是咬住定义就完了.
The sequence number of the first data octet in this segment (except when SYN is present). If SYN is present the sequence number is the initial sequence number (ISN) and the first data octet is ISN+1. If the ACK control bit is set this field contains the value of the next sequence number the sender of the segment is expecting to receive.  Once a connection is established this is always sent.
ACK最简单了, 整个tcp session只有一个segement没有ack number就是第一个syn. 其他情况, ack都是对面发来的seq + len + 1. (排除reorder包问题);这里的问题是第三次握手的时候, 单独一个ack, 没有数据, 这时候segement的seq
应该是多少呢?RFC给出的是ISN + 1.但这个ack segment是个空数据. 也就出现了下面发一个GET的时seq 和ack number和这个ack segement一致. 那么如果交互过程中出现了空的ack呢?原理和这里是一样的. 空的ack 的seq也是
标志下一个segement的byte序号, 但是如果no data, 下一个segment的seq还是这个. 知道有数据了. 这里想说的是, seq确实是标注segment的data, 知识偶尔因为空ack导致了假象, 会被后面的有数据的segement还原真相. 总结: syn 和 ack, 还有fin这种都不是数据, 不计算在seq里面. seq的计算只和实际的数据有关.小心处理no data这种情况, 就OK了.
### What about TCP sequence number warp around
PAWS use timestamp and RTT to solve this problem.

## Nagle - optimization
Nagle算法并没有阻止发送小包，它只是阻止了发送大量的小包！
Nagle算法的初衷：避免发送大量的小包，防止小包泛滥于网络，理想情况下，
对于一个TCP连接而言，网络上每次只能一个小包存在。它更多的是端到端意义上的优化。
正是交互式应用引入了大量的小包，Nagle算法所作用的正是交互式应用！
### Cork
CORK算法的初衷：提高网络利用率，理想情况下，完全避免发送小包，仅仅发送满包以及不得不发的小包。
CORK的真正初衷是提高载荷率，提高网络利用率

# Internet protocol - network layer
https://tools.ietf.org/html/rfc791
[What’s wrong with IPv4 and Why we are moving to IPv6](http://www.tecmint.com/ipv4-and-ipv6-comparison/)
## Addressing
A name indicates what we seek.  An address indicates where it is.  A route indicates how to get there.
Shoch, J., "Inter-Network Naming, Addressing, and Routing," COMPCON, IEEE Computer Society, Fall 1978.

Classless Inter-Domain Routing: CIDR is a method for allocating IP addresses and routing Internet Protocol packets.
IETF introduced CIDR in 1993 to replace the classful network.
* prefix/length
* Prefix aggregation
Private network: In the Internet addressing architecture, a private network is a network that uses private IP address space.
## Fragmentation
[Updated Specification of the IPv4 ID Field](http://tools.ietf.org/html/rfc6864)

## Checksum - error detection
Best effort service, IP has a simple error handling algorithm: throw away the datagram and try to send an ICMP message back to the source

# IPv6 address
Check definitions around IPV6_ADDR_ANY
