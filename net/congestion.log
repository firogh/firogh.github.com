---
tags: [ net ] 
title: TCP congestion control
date: 2015-02-27T15:46:13+08:00 
category: net
---
# Congestion control
icsk_ca_ops;
tcp_ack {
tcp_cong_avoid
tcp_fastretrans_alert
tcp_slow_start}
TCP send queue len /proc/sys/net/core/wmem_default
今天想聊一聊, tcp的拥塞控制, 13年那会, 走自己一个人非常偏执的想把整个协议栈都看完.
当时看得书不好, 加上自己脑袋已经僵化, 书看得很死性.
一个人的青春时光不长, 大家要好好珍惜.
所谓拥塞, 现实生活中也能经常遇到, 比如北京早本的交通, taobao双11的快递物流.
所以tcp的拥塞控制, 可以说是这一类问题的最为理想化的工程场景.
简单来看, 为什么会拥塞?发的报文太多了, 网络设备传输不过来了.
改怎么办? 现实社会中, 可以通过单双号现行的方法, 来减少出行的车辆, 尽量避免交通拥堵.
或者, 等待时间慢慢流逝, 上班堵车的时候就这么干的, 可是效率非常低啊. 我从镶黄旗去中关村
不堵车,也就20~30分钟, 一堵车就要40 ~50分钟了.
在计算机的世界, 我们可以控制发送报文的数量, 而不像真实生活一样, 有车的人出行开车与否,
都是要依据个人意愿的,很难控制.
这里, 我直接说tcp, 是如何解决的.
我们下载电影, 升级系统的时候, 你会发现速度是一点点变快, 最终停留在一个较为固定速度值.
没错这里就暗含这tcp的拥塞控制思想, tcp的想法是, 我不知道网络带宽到底是多少, 我不能贸然的
向网络发太多的数据包, 有可能网络本来就很糟了, 更是雪上加霜. 当然运气好, 就没问题了.
但linux的实现是保守的! 我一点点慢慢的浸满网络, 也就是slow start, 这个方法一点也不满,
这是个指数增长的算法, 一开始发一个, 网络好, 发2个, 4个.所以增长速度很快的.slow是只起点低.
但终极这么个长法, 早晚会浸满网络, 之后你再发包, 网络就不通常了.
tcp既要保守, 又想获取更多的网络带宽.slow start一直长,不加控制, 拥塞是早晚的事, 即便这种方法
能够在某些时候带来, 快速网络带宽利用, 但是最终确实也很快让网络拥塞了.
所以tcp, 没有让slow start一直持续着, 相对潜在快速发包, 他们更怕拥塞.
所以slow start控制的发包数量涨到一点阶段, 就停了. 网上找到的这个临界点是ssthresh的值是65536byte.
ss就是slow start的缩写, 我没有验证过这个值.
涨到这个值之后, tcp就谨小慎微地控制发包数量的增长了, 线下的增加发包数量, 指数式不敢再用了.
即便是这样的增长, 早晚还是要触发拥塞. 拥塞了怎么办?
已经出去的报文, 你控制不了了. 只能控制将要发送的报文, tcp是直接把当前速度削半作为ssthresh.
实际又回到slow start 从1 开始一点点的从新晚上增长, 慢慢的等待网络变好.
这套思想就叫AIMD原则，即加法增大、乘法减小.
我这里只是,通俗的介绍了拥塞控制,以上帝视角来看一切都是那么合理.
不过, 做学问有一点, 就是要追根溯源, 这几乎和实践验证同等重要.
[Congestion Avoidance and Control](http://ee.lbl.gov/papers/congavoid.pdf)
这个paper道出了拥塞控制的初衷, 先驱不是神, 他也踩着坑过来的!
86年10月LBL to UC Berkeley的网络带宽速率从32 Kbps 降到 40 bps, 才促使了拥塞控制的开始.
到底传输的流量多少和网络整体传输速度有什么关系呢? 也就是说, 我什么都不做就让整个网络的报文
一点点的变多, 看看网络的性能是如何变化?
[Transport Level Congestion Control](http://www.cs.virginia.edu/~cs757/slidespdf/757-13-congestion.pdf)
这个paper将的比较好.
下面说tcp的优化.
## Fast retrans 
这个解决丢包timeout太慢的问题.
tcp认为收到3个重复确认相同ack序号的报文, 就认为有报文丢了, 我要重传了.
比如1 2 3 4 5, 发了这个5个报文, 他收到了3个1序号的ack, 那么他就认为2 丢失了就重传.
这比等超时, 要快.所以叫快重传. 为什么快重传, 收到重复ack, 说明网络很可能是好的.
那其实, 我们也没必要再来次slow start了. 而是进入了拥塞避免阶段了, 这个叫做快速恢复.
我说的比较粗, 细节还是要看rfc和协议栈实现, 但是大致的道理是这样的.
现在, 我们回过头总结一下:
协议栈的拥塞算法宏观上看是, slow start, 拥塞避免, 拥塞控制.
而且目标是让状态机维持在拥塞避免这个状态附近.
就到这里了.
## SACK and DSACK
看cool shell就够了, 其实很好理解.

